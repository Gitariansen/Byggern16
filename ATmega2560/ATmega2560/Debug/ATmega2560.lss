
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800200  00000cfc  00000d90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800300  00800300  00000e90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ed2  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000738  00000000  00000000  00001ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000922  00000000  00000000  00002616  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00002f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f1  00000000  00000000  000035ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003d9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	71 c1       	rjmp	.+738    	; 0x2f0 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ef       	ldi	r30, 0xFC	; 252
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 30       	cpi	r26, 0x0B	; 11
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	eb c5       	rjmp	.+3030   	; 0xcf8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include <util/delay.h>
#include "drivers/uart.h"
#include "drivers/can.h"

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	2b 97       	sbiw	r28, 0x0b	; 11
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
 138:	87 e6       	ldi	r24, 0x67	; 103
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	67 d1       	rcall	.+718    	; 0x40c <UART_init>
	CAN_init();
 13e:	38 d0       	rcall	.+112    	; 0x1b0 <CAN_init>

	printf("Hello world!\n");
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	d0 d1       	rcall	.+928    	; 0x4e6 <puts>
	};
	while(1) {
		_delay_ms(1000);
		receive_msg = CAN_data_receive();
		printf("Message received\n");
		printf("ID: %d\n", receive_msg.id);
 146:	0f 2e       	mov	r0, r31
 148:	f4 e2       	ldi	r31, 0x24	; 36
 14a:	ef 2e       	mov	r14, r31
 14c:	f2 e0       	ldi	r31, 0x02	; 2
 14e:	ff 2e       	mov	r15, r31
 150:	f0 2d       	mov	r31, r0
		printf("x: %d y: %d\n\n", receive_msg.data[0], receive_msg.data[1]);
 152:	0c e2       	ldi	r16, 0x2C	; 44
 154:	12 e0       	ldi	r17, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	83 ed       	ldi	r24, 0xD3	; 211
 15a:	90 e3       	ldi	r25, 0x30	; 48
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x38>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x42>
 166:	00 00       	nop
		.data = data,
		.length = 1
	};
	while(1) {
		_delay_ms(1000);
		receive_msg = CAN_data_receive();
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	3a d0       	rcall	.+116    	; 0x1e2 <CAN_data_receive>
		printf("Message received\n");
 16e:	83 e1       	ldi	r24, 0x13	; 19
 170:	92 e0       	ldi	r25, 0x02	; 2
 172:	b9 d1       	rcall	.+882    	; 0x4e6 <puts>
		printf("ID: %d\n", receive_msg.id);
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	8f 93       	push	r24
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	8f 93       	push	r24
 17c:	ff 92       	push	r15
 17e:	ef 92       	push	r14
 180:	a1 d1       	rcall	.+834    	; 0x4c4 <printf>
		printf("x: %d y: %d\n\n", receive_msg.data[0], receive_msg.data[1]);
 182:	2d 81       	ldd	r18, Y+5	; 0x05
 184:	82 2f       	mov	r24, r18
 186:	99 27       	eor	r25, r25
 188:	87 fd       	sbrc	r24, 7
 18a:	90 95       	com	r25
 18c:	9f 93       	push	r25
 18e:	2f 93       	push	r18
 190:	2c 81       	ldd	r18, Y+4	; 0x04
 192:	82 2f       	mov	r24, r18
 194:	99 27       	eor	r25, r25
 196:	87 fd       	sbrc	r24, 7
 198:	90 95       	com	r25
 19a:	9f 93       	push	r25
 19c:	2f 93       	push	r18
 19e:	1f 93       	push	r17
 1a0:	0f 93       	push	r16
 1a2:	90 d1       	rcall	.+800    	; 0x4c4 <printf>
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	d3 cf       	rjmp	.-90     	; 0x156 <main+0x32>

000001b0 <CAN_init>:
	}
	// Write starting from TXB0SIDH
	MCP2551_write_data(MCP_TXB0SIDH, data, data_length); 
	// Request to send from buffer TX0
	MCP2551_request_to_send(1);
}
 1b0:	ed d0       	rcall	.+474    	; 0x38c <MCP2551_init>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	60 ee       	ldi	r22, 0xE0	; 224
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	d0 d0       	rcall	.+416    	; 0x35a <MCP2551_bit_modify>
 1ba:	8e e0       	ldi	r24, 0x0E	; 14
 1bc:	c0 d0       	rcall	.+384    	; 0x33e <MCP2551_read_data>
 1be:	80 7e       	andi	r24, 0xE0	; 224
 1c0:	21 f0       	breq	.+8      	; 0x1ca <CAN_init+0x1a>
 1c2:	8a e3       	ldi	r24, 0x3A	; 58
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	8f c1       	rjmp	.+798    	; 0x4e6 <puts>
 1c8:	08 95       	ret
 1ca:	43 e2       	ldi	r20, 0x23	; 35
 1cc:	6f ef       	ldi	r22, 0xFF	; 255
 1ce:	8b e2       	ldi	r24, 0x2B	; 43
 1d0:	c4 d0       	rcall	.+392    	; 0x35a <MCP2551_bit_modify>
 1d2:	e9 e6       	ldi	r30, 0x69	; 105
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	80 83       	st	Z, r24
 1dc:	ea 9a       	sbi	0x1d, 2	; 29
 1de:	78 94       	sei
 1e0:	08 95       	ret

000001e2 <CAN_data_receive>:

struct can_message_t CAN_data_receive() {
 1e2:	8f 92       	push	r8
 1e4:	9f 92       	push	r9
 1e6:	af 92       	push	r10
 1e8:	bf 92       	push	r11
 1ea:	cf 92       	push	r12
 1ec:	df 92       	push	r13
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	2b 97       	sbiw	r28, 0x0b	; 11
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	6c 01       	movw	r12, r24
	// TODO: enable interrupts to use rx_flag
	struct can_message_t msg;

	if(rx_flag) {
 20c:	80 91 00 03 	lds	r24, 0x0300
 210:	88 23       	and	r24, r24
 212:	59 f1       	breq	.+86     	; 0x26a <CAN_data_receive+0x88>
		msg.id = (MCP2551_read_data(MCP_RXB0SIDH) << 3) | (MCP2551_read_data(MCP_RXB0SIDL) >> 5);
 214:	81 e6       	ldi	r24, 0x61	; 97
 216:	93 d0       	rcall	.+294    	; 0x33e <MCP2551_read_data>
 218:	a8 2e       	mov	r10, r24
 21a:	82 e6       	ldi	r24, 0x62	; 98
 21c:	90 d0       	rcall	.+288    	; 0x33e <MCP2551_read_data>
 21e:	82 95       	swap	r24
 220:	86 95       	lsr	r24
 222:	87 70       	andi	r24, 0x07	; 7
 224:	b1 2c       	mov	r11, r1
 226:	aa 0c       	add	r10, r10
 228:	bb 1c       	adc	r11, r11
 22a:	aa 0c       	add	r10, r10
 22c:	bb 1c       	adc	r11, r11
 22e:	aa 0c       	add	r10, r10
 230:	bb 1c       	adc	r11, r11
 232:	a8 2a       	or	r10, r24
		msg.length = (0x0F) & MCP2551_read_data(MCP_RXB0DLC);
 234:	85 e6       	ldi	r24, 0x65	; 101
 236:	83 d0       	rcall	.+262    	; 0x33e <MCP2551_read_data>
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	88 2e       	mov	r8, r24
		for(int i = 0; i < msg.length; i++) {
 23c:	99 f0       	breq	.+38     	; 0x264 <CAN_data_receive+0x82>
 23e:	8e 01       	movw	r16, r28
 240:	0c 5f       	subi	r16, 0xFC	; 252
 242:	1f 4f       	sbci	r17, 0xFF	; 255
 244:	78 01       	movw	r14, r16
 246:	e8 0e       	add	r14, r24
 248:	f1 1c       	adc	r15, r1
 24a:	0f 2e       	mov	r0, r31
 24c:	f6 e6       	ldi	r31, 0x66	; 102
 24e:	9f 2e       	mov	r9, r31
 250:	f0 2d       	mov	r31, r0
			msg.data[i] = MCP2551_read_data(MCP_RXB0D0 + i);
 252:	89 2d       	mov	r24, r9
 254:	74 d0       	rcall	.+232    	; 0x33e <MCP2551_read_data>
 256:	f8 01       	movw	r30, r16
 258:	81 93       	st	Z+, r24
 25a:	8f 01       	movw	r16, r30
 25c:	93 94       	inc	r9
	struct can_message_t msg;

	if(rx_flag) {
		msg.id = (MCP2551_read_data(MCP_RXB0SIDH) << 3) | (MCP2551_read_data(MCP_RXB0SIDL) >> 5);
		msg.length = (0x0F) & MCP2551_read_data(MCP_RXB0DLC);
		for(int i = 0; i < msg.length; i++) {
 25e:	ee 15       	cp	r30, r14
 260:	ff 05       	cpc	r31, r15
 262:	b9 f7       	brne	.-18     	; 0x252 <CAN_data_receive+0x70>
			msg.data[i] = MCP2551_read_data(MCP_RXB0D0 + i);
		} 
		rx_flag = 0;
 264:	10 92 00 03 	sts	0x0300, r1
 268:	03 c0       	rjmp	.+6      	; 0x270 <CAN_data_receive+0x8e>
	} else {
		printf("(W) can.c: Buffer empty. Returning empty message\n");
 26a:	85 e6       	ldi	r24, 0x65	; 101
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	3b d1       	rcall	.+630    	; 0x4e6 <puts>
	}
	return msg;
 270:	ba 82       	std	Y+2, r11	; 0x02
 272:	a9 82       	std	Y+1, r10	; 0x01
 274:	8b 82       	std	Y+3, r8	; 0x03
 276:	8b e0       	ldi	r24, 0x0B	; 11
 278:	fe 01       	movw	r30, r28
 27a:	31 96       	adiw	r30, 0x01	; 1
 27c:	d6 01       	movw	r26, r12
 27e:	01 90       	ld	r0, Z+
 280:	0d 92       	st	X+, r0
 282:	8a 95       	dec	r24
 284:	e1 f7       	brne	.-8      	; 0x27e <CAN_data_receive+0x9c>
}
 286:	c6 01       	movw	r24, r12
 288:	2b 96       	adiw	r28, 0x0b	; 11
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	bf 90       	pop	r11
 2a6:	af 90       	pop	r10
 2a8:	9f 90       	pop	r9
 2aa:	8f 90       	pop	r8
 2ac:	08 95       	ret

000002ae <CAN_error>:

void CAN_error() {
 2ae:	cf 93       	push	r28
	uint8_t error = MCP2551_read_data(MCP_EFLG);
 2b0:	8d e2       	ldi	r24, 0x2D	; 45
 2b2:	45 d0       	rcall	.+138    	; 0x33e <MCP2551_read_data>
 2b4:	c8 2f       	mov	r28, r24
	if(error & MCP_TXWAR) {
 2b6:	82 ff       	sbrs	r24, 2
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <CAN_error+0x12>
		printf("(E) can.c: Transmission error\n");
 2ba:	86 e9       	ldi	r24, 0x96	; 150
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	13 d1       	rcall	.+550    	; 0x4e6 <puts>
	}
	if(error & MCP_RXWAR) {
 2c0:	c1 ff       	sbrs	r28, 1
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <CAN_error+0x1c>
		printf("(E) can.c: Receive error\n");
 2c4:	84 eb       	ldi	r24, 0xB4	; 180
 2c6:	92 e0       	ldi	r25, 0x02	; 2
 2c8:	0e d1       	rcall	.+540    	; 0x4e6 <puts>
	}
}
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <CAN_int_vect>:

ISR(INT2_vect) {
	CAN_int_vect();
}

void CAN_int_vect() {
 2ce:	cf 93       	push	r28
	uint8_t interrupt = MCP2551_read_data(MCP_CANINTF);
 2d0:	8c e2       	ldi	r24, 0x2C	; 44
 2d2:	35 d0       	rcall	.+106    	; 0x33e <MCP2551_read_data>
 2d4:	c8 2f       	mov	r28, r24
	if(interrupt & MCP_ERRIF) {
 2d6:	85 fd       	sbrc	r24, 5
		CAN_error();
 2d8:	ea df       	rcall	.-44     	; 0x2ae <CAN_error>
	}
	if(interrupt & MCP_RX0IF) {
 2da:	c0 ff       	sbrs	r28, 0
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <CAN_int_vect+0x16>
		rx_flag = 1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 00 03 	sts	0x0300, r24
	}
	MCP2551_bit_modify(MCP_CANINTF, 0xFF, 0);
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	6f ef       	ldi	r22, 0xFF	; 255
 2e8:	8c e2       	ldi	r24, 0x2C	; 44
 2ea:	37 d0       	rcall	.+110    	; 0x35a <MCP2551_bit_modify>
}
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <__vector_3>:
	EICRA	|= (1 << ISC21);
	EIMSK	|= (1 << INT2);
	sei();
}

ISR(INT2_vect) {
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	0b b6       	in	r0, 0x3b	; 59
 2fc:	0f 92       	push	r0
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	CAN_int_vect();
 316:	db df       	rcall	.-74     	; 0x2ce <CAN_int_vect>
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0b be       	out	0x3b, r0	; 59
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <MCP2551_read_data>:
	SPI_transcieve(MCP_READ_STATUS);
	SPI_transcieve(address);
	result = SPI_transcieve(0);
	SPI_SS_high();
	return result;
}
 33e:	cf 93       	push	r28
 340:	c8 2f       	mov	r28, r24
 342:	4e d0       	rcall	.+156    	; 0x3e0 <SPI_SS_low>
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	46 d0       	rcall	.+140    	; 0x3d4 <SPI_transcieve>
 348:	8c 2f       	mov	r24, r28
 34a:	44 d0       	rcall	.+136    	; 0x3d4 <SPI_transcieve>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	42 d0       	rcall	.+132    	; 0x3d4 <SPI_transcieve>
 350:	c8 2f       	mov	r28, r24
 352:	48 d0       	rcall	.+144    	; 0x3e4 <SPI_SS_high>
 354:	8c 2f       	mov	r24, r28
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <MCP2551_bit_modify>:

void MCP2551_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	18 2f       	mov	r17, r24
 362:	d6 2f       	mov	r29, r22
 364:	c4 2f       	mov	r28, r20
	SPI_SS_low();
 366:	3c d0       	rcall	.+120    	; 0x3e0 <SPI_SS_low>
	SPI_transcieve(MCP_BITMOD);
 368:	85 e0       	ldi	r24, 0x05	; 5
 36a:	34 d0       	rcall	.+104    	; 0x3d4 <SPI_transcieve>
	SPI_transcieve(address);
 36c:	81 2f       	mov	r24, r17
 36e:	32 d0       	rcall	.+100    	; 0x3d4 <SPI_transcieve>
	SPI_transcieve(mask);
 370:	8d 2f       	mov	r24, r29
 372:	30 d0       	rcall	.+96     	; 0x3d4 <SPI_transcieve>
	SPI_transcieve(data);
 374:	8c 2f       	mov	r24, r28
 376:	2e d0       	rcall	.+92     	; 0x3d4 <SPI_transcieve>
	SPI_SS_high();
 378:	35 d0       	rcall	.+106    	; 0x3e4 <SPI_SS_high>
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	08 95       	ret

00000382 <MCP2551_reset>:

void MCP2551_reset() {
	SPI_SS_low(); // Select CAN controller
 382:	2e d0       	rcall	.+92     	; 0x3e0 <SPI_SS_low>
	SPI_transcieve(MCP_RESET);
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	26 d0       	rcall	.+76     	; 0x3d4 <SPI_transcieve>
	SPI_SS_high(); // Deselect CAN controller
 388:	2d c0       	rjmp	.+90     	; 0x3e4 <SPI_SS_high>
 38a:	08 95       	ret

0000038c <MCP2551_init>:
#include <util/delay.h>

#include "MCP2551.h"
#include "spi.h"

uint8_t MCP2551_init(){
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	1f 92       	push	r1
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	SPI_master_init();
 396:	18 d0       	rcall	.+48     	; 0x3c8 <SPI_master_init>
	
	MCP2551_reset();
 398:	f4 df       	rcall	.-24     	; 0x382 <MCP2551_reset>
 39a:	83 ec       	ldi	r24, 0xC3	; 195
 39c:	99 e0       	ldi	r25, 0x09	; 9
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <MCP2551_init+0x12>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <MCP2551_init+0x18>
 3a4:	00 00       	nop
	_delay_ms(10);
	
	// Self test
	value = MCP2551_read_data(MCP_CANSTAT);
 3a6:	8e e0       	ldi	r24, 0x0E	; 14
 3a8:	ca df       	rcall	.-108    	; 0x33e <MCP2551_read_data>
 3aa:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	80 7e       	andi	r24, 0xE0	; 224
 3b0:	80 38       	cpi	r24, 0x80	; 128
 3b2:	29 f0       	breq	.+10     	; 0x3be <MCP2551_init+0x32>
		printf("MCP2551 is NOT in configuration mode after reset!\n");
 3b4:	8d ec       	ldi	r24, 0xCD	; 205
 3b6:	92 e0       	ldi	r25, 0x02	; 2
 3b8:	96 d0       	rcall	.+300    	; 0x4e6 <puts>
		return 1;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <MCP2551_init+0x34>
	}
	return 0;
 3be:	80 e0       	ldi	r24, 0x00	; 0
}
 3c0:	0f 90       	pop	r0
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <SPI_master_init>:
#include "spi.h"
#include <avr/io.h>

void SPI_master_init() {
	// Set MOSI and SCK output. All others input.
	DDR_SPI	= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS) | (1 << DD_SS);
 3c8:	87 e8       	ldi	r24, 0x87	; 135
 3ca:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, set Master, set clock rate fck/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);	
 3cc:	8c b5       	in	r24, 0x2c	; 44
 3ce:	81 65       	ori	r24, 0x51	; 81
 3d0:	8c bd       	out	0x2c, r24	; 44
 3d2:	08 95       	ret

000003d4 <SPI_transcieve>:
}

uint8_t SPI_transcieve(uint8_t data) {
	// Start transmission
	SPDR = data;
 3d4:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission to complete
	while(!(SPSR & (1 << SPIF)));
 3d6:	0d b4       	in	r0, 0x2d	; 45
 3d8:	07 fe       	sbrs	r0, 7
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <SPI_transcieve+0x2>
	// Read data from slave
	return SPDR;
 3dc:	8e b5       	in	r24, 0x2e	; 46
}
 3de:	08 95       	ret

000003e0 <SPI_SS_low>:

void SPI_SS_low() {
	PORTB &= ~(1 << DD_SS);
 3e0:	2f 98       	cbi	0x05, 7	; 5
 3e2:	08 95       	ret

000003e4 <SPI_SS_high>:
}

void SPI_SS_high() {
	PORTB |= (1 << DD_SS);
 3e4:	2f 9a       	sbi	0x05, 7	; 5
 3e6:	08 95       	ret

000003e8 <UART_transmit>:
	
	return 0;
}

int UART_transmit(char data){
	while ( !( UCSR0A & (1 << UDRE0)));
 3e8:	e0 ec       	ldi	r30, 0xC0	; 192
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	90 81       	ld	r25, Z
 3ee:	95 ff       	sbrs	r25, 5
 3f0:	fd cf       	rjmp	.-6      	; 0x3ec <UART_transmit+0x4>
	UDR0 = data;
 3f2:	80 93 c6 00 	sts	0x00C6, r24
	
	return 0;
}
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	08 95       	ret

000003fc <UART_receive>:

unsigned char UART_receive(void){
	while(!(UCSR0A & (1 << RXC0)));
 3fc:	e0 ec       	ldi	r30, 0xC0	; 192
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	88 23       	and	r24, r24
 404:	ec f7       	brge	.-6      	; 0x400 <UART_receive+0x4>
	return UDR0;
 406:	80 91 c6 00 	lds	r24, 0x00C6
}
 40a:	08 95       	ret

0000040c <UART_init>:
#include <avr/io.h>
#include <util/delay.h>

int UART_init(unsigned int ubrr){
	/* Set Baud rate */
	UBRR0H = (unsigned char)(ubrr >> 8);
 40c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 410:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0)|(3 << UCSZ00);
 41a:	8e e0       	ldi	r24, 0x0E	; 14
 41c:	80 93 c2 00 	sts	0x00C2, r24
	//enable printf
	fdevopen(&UART_transmit, &UART_receive);
 420:	6e ef       	ldi	r22, 0xFE	; 254
 422:	71 e0       	ldi	r23, 0x01	; 1
 424:	84 ef       	ldi	r24, 0xF4	; 244
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	03 d0       	rcall	.+6      	; 0x430 <fdevopen>
	
	return 0;
}
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	08 95       	ret

00000430 <fdevopen>:
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	ec 01       	movw	r28, r24
 43a:	8b 01       	movw	r16, r22
 43c:	00 97       	sbiw	r24, 0x00	; 0
 43e:	31 f4       	brne	.+12     	; 0x44c <fdevopen+0x1c>
 440:	61 15       	cp	r22, r1
 442:	71 05       	cpc	r23, r1
 444:	19 f4       	brne	.+6      	; 0x44c <fdevopen+0x1c>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	37 c0       	rjmp	.+110    	; 0x4ba <fdevopen+0x8a>
 44c:	6e e0       	ldi	r22, 0x0E	; 14
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	63 d2       	rcall	.+1222   	; 0x91c <calloc>
 456:	fc 01       	movw	r30, r24
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	a9 f3       	breq	.-22     	; 0x446 <fdevopen+0x16>
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	83 83       	std	Z+3, r24	; 0x03
 460:	01 15       	cp	r16, r1
 462:	11 05       	cpc	r17, r1
 464:	71 f0       	breq	.+28     	; 0x482 <fdevopen+0x52>
 466:	13 87       	std	Z+11, r17	; 0x0b
 468:	02 87       	std	Z+10, r16	; 0x0a
 46a:	81 e8       	ldi	r24, 0x81	; 129
 46c:	83 83       	std	Z+3, r24	; 0x03
 46e:	80 91 01 03 	lds	r24, 0x0301
 472:	90 91 02 03 	lds	r25, 0x0302
 476:	89 2b       	or	r24, r25
 478:	21 f4       	brne	.+8      	; 0x482 <fdevopen+0x52>
 47a:	f0 93 02 03 	sts	0x0302, r31
 47e:	e0 93 01 03 	sts	0x0301, r30
 482:	20 97       	sbiw	r28, 0x00	; 0
 484:	c9 f0       	breq	.+50     	; 0x4b8 <fdevopen+0x88>
 486:	d1 87       	std	Z+9, r29	; 0x09
 488:	c0 87       	std	Z+8, r28	; 0x08
 48a:	83 81       	ldd	r24, Z+3	; 0x03
 48c:	82 60       	ori	r24, 0x02	; 2
 48e:	83 83       	std	Z+3, r24	; 0x03
 490:	80 91 03 03 	lds	r24, 0x0303
 494:	90 91 04 03 	lds	r25, 0x0304
 498:	89 2b       	or	r24, r25
 49a:	71 f4       	brne	.+28     	; 0x4b8 <fdevopen+0x88>
 49c:	f0 93 04 03 	sts	0x0304, r31
 4a0:	e0 93 03 03 	sts	0x0303, r30
 4a4:	80 91 05 03 	lds	r24, 0x0305
 4a8:	90 91 06 03 	lds	r25, 0x0306
 4ac:	89 2b       	or	r24, r25
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <fdevopen+0x88>
 4b0:	f0 93 06 03 	sts	0x0306, r31
 4b4:	e0 93 05 03 	sts	0x0305, r30
 4b8:	cf 01       	movw	r24, r30
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	08 95       	ret

000004c4 <printf>:
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	fe 01       	movw	r30, r28
 4ce:	36 96       	adiw	r30, 0x06	; 6
 4d0:	61 91       	ld	r22, Z+
 4d2:	71 91       	ld	r23, Z+
 4d4:	af 01       	movw	r20, r30
 4d6:	80 91 03 03 	lds	r24, 0x0303
 4da:	90 91 04 03 	lds	r25, 0x0304
 4de:	30 d0       	rcall	.+96     	; 0x540 <vfprintf>
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <puts>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	e0 91 03 03 	lds	r30, 0x0303
 4f2:	f0 91 04 03 	lds	r31, 0x0304
 4f6:	23 81       	ldd	r18, Z+3	; 0x03
 4f8:	21 ff       	sbrs	r18, 1
 4fa:	1b c0       	rjmp	.+54     	; 0x532 <puts+0x4c>
 4fc:	ec 01       	movw	r28, r24
 4fe:	00 e0       	ldi	r16, 0x00	; 0
 500:	10 e0       	ldi	r17, 0x00	; 0
 502:	89 91       	ld	r24, Y+
 504:	60 91 03 03 	lds	r22, 0x0303
 508:	70 91 04 03 	lds	r23, 0x0304
 50c:	db 01       	movw	r26, r22
 50e:	18 96       	adiw	r26, 0x08	; 8
 510:	ed 91       	ld	r30, X+
 512:	fc 91       	ld	r31, X
 514:	19 97       	sbiw	r26, 0x09	; 9
 516:	88 23       	and	r24, r24
 518:	31 f0       	breq	.+12     	; 0x526 <puts+0x40>
 51a:	19 95       	eicall
 51c:	89 2b       	or	r24, r25
 51e:	89 f3       	breq	.-30     	; 0x502 <puts+0x1c>
 520:	0f ef       	ldi	r16, 0xFF	; 255
 522:	1f ef       	ldi	r17, 0xFF	; 255
 524:	ee cf       	rjmp	.-36     	; 0x502 <puts+0x1c>
 526:	8a e0       	ldi	r24, 0x0A	; 10
 528:	19 95       	eicall
 52a:	89 2b       	or	r24, r25
 52c:	11 f4       	brne	.+4      	; 0x532 <puts+0x4c>
 52e:	c8 01       	movw	r24, r16
 530:	02 c0       	rjmp	.+4      	; 0x536 <puts+0x50>
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	9f ef       	ldi	r25, 0xFF	; 255
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	08 95       	ret

00000540 <vfprintf>:
 540:	2f 92       	push	r2
 542:	3f 92       	push	r3
 544:	4f 92       	push	r4
 546:	5f 92       	push	r5
 548:	6f 92       	push	r6
 54a:	7f 92       	push	r7
 54c:	8f 92       	push	r8
 54e:	9f 92       	push	r9
 550:	af 92       	push	r10
 552:	bf 92       	push	r11
 554:	cf 92       	push	r12
 556:	df 92       	push	r13
 558:	ef 92       	push	r14
 55a:	ff 92       	push	r15
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	2c 97       	sbiw	r28, 0x0c	; 12
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	7c 01       	movw	r14, r24
 576:	6b 01       	movw	r12, r22
 578:	8a 01       	movw	r16, r20
 57a:	fc 01       	movw	r30, r24
 57c:	17 82       	std	Z+7, r1	; 0x07
 57e:	16 82       	std	Z+6, r1	; 0x06
 580:	83 81       	ldd	r24, Z+3	; 0x03
 582:	81 ff       	sbrs	r24, 1
 584:	b0 c1       	rjmp	.+864    	; 0x8e6 <vfprintf+0x3a6>
 586:	ce 01       	movw	r24, r28
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	4c 01       	movw	r8, r24
 58c:	f7 01       	movw	r30, r14
 58e:	93 81       	ldd	r25, Z+3	; 0x03
 590:	f6 01       	movw	r30, r12
 592:	93 fd       	sbrc	r25, 3
 594:	85 91       	lpm	r24, Z+
 596:	93 ff       	sbrs	r25, 3
 598:	81 91       	ld	r24, Z+
 59a:	6f 01       	movw	r12, r30
 59c:	88 23       	and	r24, r24
 59e:	09 f4       	brne	.+2      	; 0x5a2 <vfprintf+0x62>
 5a0:	9e c1       	rjmp	.+828    	; 0x8de <vfprintf+0x39e>
 5a2:	85 32       	cpi	r24, 0x25	; 37
 5a4:	39 f4       	brne	.+14     	; 0x5b4 <vfprintf+0x74>
 5a6:	93 fd       	sbrc	r25, 3
 5a8:	85 91       	lpm	r24, Z+
 5aa:	93 ff       	sbrs	r25, 3
 5ac:	81 91       	ld	r24, Z+
 5ae:	6f 01       	movw	r12, r30
 5b0:	85 32       	cpi	r24, 0x25	; 37
 5b2:	21 f4       	brne	.+8      	; 0x5bc <vfprintf+0x7c>
 5b4:	b7 01       	movw	r22, r14
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0f d3       	rcall	.+1566   	; 0xbd8 <fputc>
 5ba:	e8 cf       	rjmp	.-48     	; 0x58c <vfprintf+0x4c>
 5bc:	51 2c       	mov	r5, r1
 5be:	31 2c       	mov	r3, r1
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	20 32       	cpi	r18, 0x20	; 32
 5c4:	a0 f4       	brcc	.+40     	; 0x5ee <vfprintf+0xae>
 5c6:	8b 32       	cpi	r24, 0x2B	; 43
 5c8:	69 f0       	breq	.+26     	; 0x5e4 <vfprintf+0xa4>
 5ca:	30 f4       	brcc	.+12     	; 0x5d8 <vfprintf+0x98>
 5cc:	80 32       	cpi	r24, 0x20	; 32
 5ce:	59 f0       	breq	.+22     	; 0x5e6 <vfprintf+0xa6>
 5d0:	83 32       	cpi	r24, 0x23	; 35
 5d2:	69 f4       	brne	.+26     	; 0x5ee <vfprintf+0xae>
 5d4:	20 61       	ori	r18, 0x10	; 16
 5d6:	2c c0       	rjmp	.+88     	; 0x630 <vfprintf+0xf0>
 5d8:	8d 32       	cpi	r24, 0x2D	; 45
 5da:	39 f0       	breq	.+14     	; 0x5ea <vfprintf+0xaa>
 5dc:	80 33       	cpi	r24, 0x30	; 48
 5de:	39 f4       	brne	.+14     	; 0x5ee <vfprintf+0xae>
 5e0:	21 60       	ori	r18, 0x01	; 1
 5e2:	26 c0       	rjmp	.+76     	; 0x630 <vfprintf+0xf0>
 5e4:	22 60       	ori	r18, 0x02	; 2
 5e6:	24 60       	ori	r18, 0x04	; 4
 5e8:	23 c0       	rjmp	.+70     	; 0x630 <vfprintf+0xf0>
 5ea:	28 60       	ori	r18, 0x08	; 8
 5ec:	21 c0       	rjmp	.+66     	; 0x630 <vfprintf+0xf0>
 5ee:	27 fd       	sbrc	r18, 7
 5f0:	27 c0       	rjmp	.+78     	; 0x640 <vfprintf+0x100>
 5f2:	30 ed       	ldi	r19, 0xD0	; 208
 5f4:	38 0f       	add	r19, r24
 5f6:	3a 30       	cpi	r19, 0x0A	; 10
 5f8:	78 f4       	brcc	.+30     	; 0x618 <vfprintf+0xd8>
 5fa:	26 ff       	sbrs	r18, 6
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <vfprintf+0xca>
 5fe:	fa e0       	ldi	r31, 0x0A	; 10
 600:	5f 9e       	mul	r5, r31
 602:	30 0d       	add	r19, r0
 604:	11 24       	eor	r1, r1
 606:	53 2e       	mov	r5, r19
 608:	13 c0       	rjmp	.+38     	; 0x630 <vfprintf+0xf0>
 60a:	8a e0       	ldi	r24, 0x0A	; 10
 60c:	38 9e       	mul	r3, r24
 60e:	30 0d       	add	r19, r0
 610:	11 24       	eor	r1, r1
 612:	33 2e       	mov	r3, r19
 614:	20 62       	ori	r18, 0x20	; 32
 616:	0c c0       	rjmp	.+24     	; 0x630 <vfprintf+0xf0>
 618:	8e 32       	cpi	r24, 0x2E	; 46
 61a:	21 f4       	brne	.+8      	; 0x624 <vfprintf+0xe4>
 61c:	26 fd       	sbrc	r18, 6
 61e:	5f c1       	rjmp	.+702    	; 0x8de <vfprintf+0x39e>
 620:	20 64       	ori	r18, 0x40	; 64
 622:	06 c0       	rjmp	.+12     	; 0x630 <vfprintf+0xf0>
 624:	8c 36       	cpi	r24, 0x6C	; 108
 626:	11 f4       	brne	.+4      	; 0x62c <vfprintf+0xec>
 628:	20 68       	ori	r18, 0x80	; 128
 62a:	02 c0       	rjmp	.+4      	; 0x630 <vfprintf+0xf0>
 62c:	88 36       	cpi	r24, 0x68	; 104
 62e:	41 f4       	brne	.+16     	; 0x640 <vfprintf+0x100>
 630:	f6 01       	movw	r30, r12
 632:	93 fd       	sbrc	r25, 3
 634:	85 91       	lpm	r24, Z+
 636:	93 ff       	sbrs	r25, 3
 638:	81 91       	ld	r24, Z+
 63a:	6f 01       	movw	r12, r30
 63c:	81 11       	cpse	r24, r1
 63e:	c1 cf       	rjmp	.-126    	; 0x5c2 <vfprintf+0x82>
 640:	98 2f       	mov	r25, r24
 642:	9f 7d       	andi	r25, 0xDF	; 223
 644:	95 54       	subi	r25, 0x45	; 69
 646:	93 30       	cpi	r25, 0x03	; 3
 648:	28 f4       	brcc	.+10     	; 0x654 <vfprintf+0x114>
 64a:	0c 5f       	subi	r16, 0xFC	; 252
 64c:	1f 4f       	sbci	r17, 0xFF	; 255
 64e:	ff e3       	ldi	r31, 0x3F	; 63
 650:	f9 83       	std	Y+1, r31	; 0x01
 652:	0d c0       	rjmp	.+26     	; 0x66e <vfprintf+0x12e>
 654:	83 36       	cpi	r24, 0x63	; 99
 656:	31 f0       	breq	.+12     	; 0x664 <vfprintf+0x124>
 658:	83 37       	cpi	r24, 0x73	; 115
 65a:	71 f0       	breq	.+28     	; 0x678 <vfprintf+0x138>
 65c:	83 35       	cpi	r24, 0x53	; 83
 65e:	09 f0       	breq	.+2      	; 0x662 <vfprintf+0x122>
 660:	57 c0       	rjmp	.+174    	; 0x710 <vfprintf+0x1d0>
 662:	21 c0       	rjmp	.+66     	; 0x6a6 <vfprintf+0x166>
 664:	f8 01       	movw	r30, r16
 666:	80 81       	ld	r24, Z
 668:	89 83       	std	Y+1, r24	; 0x01
 66a:	0e 5f       	subi	r16, 0xFE	; 254
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	44 24       	eor	r4, r4
 670:	43 94       	inc	r4
 672:	51 2c       	mov	r5, r1
 674:	54 01       	movw	r10, r8
 676:	14 c0       	rjmp	.+40     	; 0x6a0 <vfprintf+0x160>
 678:	38 01       	movw	r6, r16
 67a:	f2 e0       	ldi	r31, 0x02	; 2
 67c:	6f 0e       	add	r6, r31
 67e:	71 1c       	adc	r7, r1
 680:	f8 01       	movw	r30, r16
 682:	a0 80       	ld	r10, Z
 684:	b1 80       	ldd	r11, Z+1	; 0x01
 686:	26 ff       	sbrs	r18, 6
 688:	03 c0       	rjmp	.+6      	; 0x690 <vfprintf+0x150>
 68a:	65 2d       	mov	r22, r5
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <vfprintf+0x154>
 690:	6f ef       	ldi	r22, 0xFF	; 255
 692:	7f ef       	ldi	r23, 0xFF	; 255
 694:	c5 01       	movw	r24, r10
 696:	2c 87       	std	Y+12, r18	; 0x0c
 698:	94 d2       	rcall	.+1320   	; 0xbc2 <strnlen>
 69a:	2c 01       	movw	r4, r24
 69c:	83 01       	movw	r16, r6
 69e:	2c 85       	ldd	r18, Y+12	; 0x0c
 6a0:	2f 77       	andi	r18, 0x7F	; 127
 6a2:	22 2e       	mov	r2, r18
 6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <vfprintf+0x192>
 6a6:	38 01       	movw	r6, r16
 6a8:	f2 e0       	ldi	r31, 0x02	; 2
 6aa:	6f 0e       	add	r6, r31
 6ac:	71 1c       	adc	r7, r1
 6ae:	f8 01       	movw	r30, r16
 6b0:	a0 80       	ld	r10, Z
 6b2:	b1 80       	ldd	r11, Z+1	; 0x01
 6b4:	26 ff       	sbrs	r18, 6
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <vfprintf+0x17e>
 6b8:	65 2d       	mov	r22, r5
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <vfprintf+0x182>
 6be:	6f ef       	ldi	r22, 0xFF	; 255
 6c0:	7f ef       	ldi	r23, 0xFF	; 255
 6c2:	c5 01       	movw	r24, r10
 6c4:	2c 87       	std	Y+12, r18	; 0x0c
 6c6:	6b d2       	rcall	.+1238   	; 0xb9e <strnlen_P>
 6c8:	2c 01       	movw	r4, r24
 6ca:	2c 85       	ldd	r18, Y+12	; 0x0c
 6cc:	20 68       	ori	r18, 0x80	; 128
 6ce:	22 2e       	mov	r2, r18
 6d0:	83 01       	movw	r16, r6
 6d2:	23 fc       	sbrc	r2, 3
 6d4:	19 c0       	rjmp	.+50     	; 0x708 <vfprintf+0x1c8>
 6d6:	83 2d       	mov	r24, r3
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	48 16       	cp	r4, r24
 6dc:	59 06       	cpc	r5, r25
 6de:	a0 f4       	brcc	.+40     	; 0x708 <vfprintf+0x1c8>
 6e0:	b7 01       	movw	r22, r14
 6e2:	80 e2       	ldi	r24, 0x20	; 32
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	78 d2       	rcall	.+1264   	; 0xbd8 <fputc>
 6e8:	3a 94       	dec	r3
 6ea:	f5 cf       	rjmp	.-22     	; 0x6d6 <vfprintf+0x196>
 6ec:	f5 01       	movw	r30, r10
 6ee:	27 fc       	sbrc	r2, 7
 6f0:	85 91       	lpm	r24, Z+
 6f2:	27 fe       	sbrs	r2, 7
 6f4:	81 91       	ld	r24, Z+
 6f6:	5f 01       	movw	r10, r30
 6f8:	b7 01       	movw	r22, r14
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	6d d2       	rcall	.+1242   	; 0xbd8 <fputc>
 6fe:	31 10       	cpse	r3, r1
 700:	3a 94       	dec	r3
 702:	f1 e0       	ldi	r31, 0x01	; 1
 704:	4f 1a       	sub	r4, r31
 706:	51 08       	sbc	r5, r1
 708:	41 14       	cp	r4, r1
 70a:	51 04       	cpc	r5, r1
 70c:	79 f7       	brne	.-34     	; 0x6ec <vfprintf+0x1ac>
 70e:	de c0       	rjmp	.+444    	; 0x8cc <vfprintf+0x38c>
 710:	84 36       	cpi	r24, 0x64	; 100
 712:	11 f0       	breq	.+4      	; 0x718 <vfprintf+0x1d8>
 714:	89 36       	cpi	r24, 0x69	; 105
 716:	31 f5       	brne	.+76     	; 0x764 <vfprintf+0x224>
 718:	f8 01       	movw	r30, r16
 71a:	27 ff       	sbrs	r18, 7
 71c:	07 c0       	rjmp	.+14     	; 0x72c <vfprintf+0x1ec>
 71e:	60 81       	ld	r22, Z
 720:	71 81       	ldd	r23, Z+1	; 0x01
 722:	82 81       	ldd	r24, Z+2	; 0x02
 724:	93 81       	ldd	r25, Z+3	; 0x03
 726:	0c 5f       	subi	r16, 0xFC	; 252
 728:	1f 4f       	sbci	r17, 0xFF	; 255
 72a:	08 c0       	rjmp	.+16     	; 0x73c <vfprintf+0x1fc>
 72c:	60 81       	ld	r22, Z
 72e:	71 81       	ldd	r23, Z+1	; 0x01
 730:	88 27       	eor	r24, r24
 732:	77 fd       	sbrc	r23, 7
 734:	80 95       	com	r24
 736:	98 2f       	mov	r25, r24
 738:	0e 5f       	subi	r16, 0xFE	; 254
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	2f 76       	andi	r18, 0x6F	; 111
 73e:	b2 2e       	mov	r11, r18
 740:	97 ff       	sbrs	r25, 7
 742:	09 c0       	rjmp	.+18     	; 0x756 <vfprintf+0x216>
 744:	90 95       	com	r25
 746:	80 95       	com	r24
 748:	70 95       	com	r23
 74a:	61 95       	neg	r22
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	8f 4f       	sbci	r24, 0xFF	; 255
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	20 68       	ori	r18, 0x80	; 128
 754:	b2 2e       	mov	r11, r18
 756:	2a e0       	ldi	r18, 0x0A	; 10
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	a4 01       	movw	r20, r8
 75c:	6f d2       	rcall	.+1246   	; 0xc3c <__ultoa_invert>
 75e:	a8 2e       	mov	r10, r24
 760:	a8 18       	sub	r10, r8
 762:	43 c0       	rjmp	.+134    	; 0x7ea <vfprintf+0x2aa>
 764:	85 37       	cpi	r24, 0x75	; 117
 766:	29 f4       	brne	.+10     	; 0x772 <vfprintf+0x232>
 768:	2f 7e       	andi	r18, 0xEF	; 239
 76a:	b2 2e       	mov	r11, r18
 76c:	2a e0       	ldi	r18, 0x0A	; 10
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	25 c0       	rjmp	.+74     	; 0x7bc <vfprintf+0x27c>
 772:	f2 2f       	mov	r31, r18
 774:	f9 7f       	andi	r31, 0xF9	; 249
 776:	bf 2e       	mov	r11, r31
 778:	8f 36       	cpi	r24, 0x6F	; 111
 77a:	c1 f0       	breq	.+48     	; 0x7ac <vfprintf+0x26c>
 77c:	18 f4       	brcc	.+6      	; 0x784 <vfprintf+0x244>
 77e:	88 35       	cpi	r24, 0x58	; 88
 780:	79 f0       	breq	.+30     	; 0x7a0 <vfprintf+0x260>
 782:	ad c0       	rjmp	.+346    	; 0x8de <vfprintf+0x39e>
 784:	80 37       	cpi	r24, 0x70	; 112
 786:	19 f0       	breq	.+6      	; 0x78e <vfprintf+0x24e>
 788:	88 37       	cpi	r24, 0x78	; 120
 78a:	21 f0       	breq	.+8      	; 0x794 <vfprintf+0x254>
 78c:	a8 c0       	rjmp	.+336    	; 0x8de <vfprintf+0x39e>
 78e:	2f 2f       	mov	r18, r31
 790:	20 61       	ori	r18, 0x10	; 16
 792:	b2 2e       	mov	r11, r18
 794:	b4 fe       	sbrs	r11, 4
 796:	0d c0       	rjmp	.+26     	; 0x7b2 <vfprintf+0x272>
 798:	8b 2d       	mov	r24, r11
 79a:	84 60       	ori	r24, 0x04	; 4
 79c:	b8 2e       	mov	r11, r24
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <vfprintf+0x272>
 7a0:	24 ff       	sbrs	r18, 4
 7a2:	0a c0       	rjmp	.+20     	; 0x7b8 <vfprintf+0x278>
 7a4:	9f 2f       	mov	r25, r31
 7a6:	96 60       	ori	r25, 0x06	; 6
 7a8:	b9 2e       	mov	r11, r25
 7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <vfprintf+0x278>
 7ac:	28 e0       	ldi	r18, 0x08	; 8
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	05 c0       	rjmp	.+10     	; 0x7bc <vfprintf+0x27c>
 7b2:	20 e1       	ldi	r18, 0x10	; 16
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <vfprintf+0x27c>
 7b8:	20 e1       	ldi	r18, 0x10	; 16
 7ba:	32 e0       	ldi	r19, 0x02	; 2
 7bc:	f8 01       	movw	r30, r16
 7be:	b7 fe       	sbrs	r11, 7
 7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <vfprintf+0x290>
 7c2:	60 81       	ld	r22, Z
 7c4:	71 81       	ldd	r23, Z+1	; 0x01
 7c6:	82 81       	ldd	r24, Z+2	; 0x02
 7c8:	93 81       	ldd	r25, Z+3	; 0x03
 7ca:	0c 5f       	subi	r16, 0xFC	; 252
 7cc:	1f 4f       	sbci	r17, 0xFF	; 255
 7ce:	06 c0       	rjmp	.+12     	; 0x7dc <vfprintf+0x29c>
 7d0:	60 81       	ld	r22, Z
 7d2:	71 81       	ldd	r23, Z+1	; 0x01
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 5f       	subi	r16, 0xFE	; 254
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	a4 01       	movw	r20, r8
 7de:	2e d2       	rcall	.+1116   	; 0xc3c <__ultoa_invert>
 7e0:	a8 2e       	mov	r10, r24
 7e2:	a8 18       	sub	r10, r8
 7e4:	fb 2d       	mov	r31, r11
 7e6:	ff 77       	andi	r31, 0x7F	; 127
 7e8:	bf 2e       	mov	r11, r31
 7ea:	b6 fe       	sbrs	r11, 6
 7ec:	0b c0       	rjmp	.+22     	; 0x804 <vfprintf+0x2c4>
 7ee:	2b 2d       	mov	r18, r11
 7f0:	2e 7f       	andi	r18, 0xFE	; 254
 7f2:	a5 14       	cp	r10, r5
 7f4:	50 f4       	brcc	.+20     	; 0x80a <vfprintf+0x2ca>
 7f6:	b4 fe       	sbrs	r11, 4
 7f8:	0a c0       	rjmp	.+20     	; 0x80e <vfprintf+0x2ce>
 7fa:	b2 fc       	sbrc	r11, 2
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <vfprintf+0x2ce>
 7fe:	2b 2d       	mov	r18, r11
 800:	2e 7e       	andi	r18, 0xEE	; 238
 802:	05 c0       	rjmp	.+10     	; 0x80e <vfprintf+0x2ce>
 804:	7a 2c       	mov	r7, r10
 806:	2b 2d       	mov	r18, r11
 808:	03 c0       	rjmp	.+6      	; 0x810 <vfprintf+0x2d0>
 80a:	7a 2c       	mov	r7, r10
 80c:	01 c0       	rjmp	.+2      	; 0x810 <vfprintf+0x2d0>
 80e:	75 2c       	mov	r7, r5
 810:	24 ff       	sbrs	r18, 4
 812:	0d c0       	rjmp	.+26     	; 0x82e <vfprintf+0x2ee>
 814:	fe 01       	movw	r30, r28
 816:	ea 0d       	add	r30, r10
 818:	f1 1d       	adc	r31, r1
 81a:	80 81       	ld	r24, Z
 81c:	80 33       	cpi	r24, 0x30	; 48
 81e:	11 f4       	brne	.+4      	; 0x824 <vfprintf+0x2e4>
 820:	29 7e       	andi	r18, 0xE9	; 233
 822:	09 c0       	rjmp	.+18     	; 0x836 <vfprintf+0x2f6>
 824:	22 ff       	sbrs	r18, 2
 826:	06 c0       	rjmp	.+12     	; 0x834 <vfprintf+0x2f4>
 828:	73 94       	inc	r7
 82a:	73 94       	inc	r7
 82c:	04 c0       	rjmp	.+8      	; 0x836 <vfprintf+0x2f6>
 82e:	82 2f       	mov	r24, r18
 830:	86 78       	andi	r24, 0x86	; 134
 832:	09 f0       	breq	.+2      	; 0x836 <vfprintf+0x2f6>
 834:	73 94       	inc	r7
 836:	23 fd       	sbrc	r18, 3
 838:	12 c0       	rjmp	.+36     	; 0x85e <vfprintf+0x31e>
 83a:	20 ff       	sbrs	r18, 0
 83c:	06 c0       	rjmp	.+12     	; 0x84a <vfprintf+0x30a>
 83e:	5a 2c       	mov	r5, r10
 840:	73 14       	cp	r7, r3
 842:	18 f4       	brcc	.+6      	; 0x84a <vfprintf+0x30a>
 844:	53 0c       	add	r5, r3
 846:	57 18       	sub	r5, r7
 848:	73 2c       	mov	r7, r3
 84a:	73 14       	cp	r7, r3
 84c:	60 f4       	brcc	.+24     	; 0x866 <vfprintf+0x326>
 84e:	b7 01       	movw	r22, r14
 850:	80 e2       	ldi	r24, 0x20	; 32
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	2c 87       	std	Y+12, r18	; 0x0c
 856:	c0 d1       	rcall	.+896    	; 0xbd8 <fputc>
 858:	73 94       	inc	r7
 85a:	2c 85       	ldd	r18, Y+12	; 0x0c
 85c:	f6 cf       	rjmp	.-20     	; 0x84a <vfprintf+0x30a>
 85e:	73 14       	cp	r7, r3
 860:	10 f4       	brcc	.+4      	; 0x866 <vfprintf+0x326>
 862:	37 18       	sub	r3, r7
 864:	01 c0       	rjmp	.+2      	; 0x868 <vfprintf+0x328>
 866:	31 2c       	mov	r3, r1
 868:	24 ff       	sbrs	r18, 4
 86a:	11 c0       	rjmp	.+34     	; 0x88e <vfprintf+0x34e>
 86c:	b7 01       	movw	r22, r14
 86e:	80 e3       	ldi	r24, 0x30	; 48
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	2c 87       	std	Y+12, r18	; 0x0c
 874:	b1 d1       	rcall	.+866    	; 0xbd8 <fputc>
 876:	2c 85       	ldd	r18, Y+12	; 0x0c
 878:	22 ff       	sbrs	r18, 2
 87a:	16 c0       	rjmp	.+44     	; 0x8a8 <vfprintf+0x368>
 87c:	21 ff       	sbrs	r18, 1
 87e:	03 c0       	rjmp	.+6      	; 0x886 <vfprintf+0x346>
 880:	88 e5       	ldi	r24, 0x58	; 88
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <vfprintf+0x34a>
 886:	88 e7       	ldi	r24, 0x78	; 120
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	b7 01       	movw	r22, r14
 88c:	0c c0       	rjmp	.+24     	; 0x8a6 <vfprintf+0x366>
 88e:	82 2f       	mov	r24, r18
 890:	86 78       	andi	r24, 0x86	; 134
 892:	51 f0       	breq	.+20     	; 0x8a8 <vfprintf+0x368>
 894:	21 fd       	sbrc	r18, 1
 896:	02 c0       	rjmp	.+4      	; 0x89c <vfprintf+0x35c>
 898:	80 e2       	ldi	r24, 0x20	; 32
 89a:	01 c0       	rjmp	.+2      	; 0x89e <vfprintf+0x35e>
 89c:	8b e2       	ldi	r24, 0x2B	; 43
 89e:	27 fd       	sbrc	r18, 7
 8a0:	8d e2       	ldi	r24, 0x2D	; 45
 8a2:	b7 01       	movw	r22, r14
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	98 d1       	rcall	.+816    	; 0xbd8 <fputc>
 8a8:	a5 14       	cp	r10, r5
 8aa:	30 f4       	brcc	.+12     	; 0x8b8 <vfprintf+0x378>
 8ac:	b7 01       	movw	r22, r14
 8ae:	80 e3       	ldi	r24, 0x30	; 48
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	92 d1       	rcall	.+804    	; 0xbd8 <fputc>
 8b4:	5a 94       	dec	r5
 8b6:	f8 cf       	rjmp	.-16     	; 0x8a8 <vfprintf+0x368>
 8b8:	aa 94       	dec	r10
 8ba:	f4 01       	movw	r30, r8
 8bc:	ea 0d       	add	r30, r10
 8be:	f1 1d       	adc	r31, r1
 8c0:	80 81       	ld	r24, Z
 8c2:	b7 01       	movw	r22, r14
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	88 d1       	rcall	.+784    	; 0xbd8 <fputc>
 8c8:	a1 10       	cpse	r10, r1
 8ca:	f6 cf       	rjmp	.-20     	; 0x8b8 <vfprintf+0x378>
 8cc:	33 20       	and	r3, r3
 8ce:	09 f4       	brne	.+2      	; 0x8d2 <vfprintf+0x392>
 8d0:	5d ce       	rjmp	.-838    	; 0x58c <vfprintf+0x4c>
 8d2:	b7 01       	movw	r22, r14
 8d4:	80 e2       	ldi	r24, 0x20	; 32
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	7f d1       	rcall	.+766    	; 0xbd8 <fputc>
 8da:	3a 94       	dec	r3
 8dc:	f7 cf       	rjmp	.-18     	; 0x8cc <vfprintf+0x38c>
 8de:	f7 01       	movw	r30, r14
 8e0:	86 81       	ldd	r24, Z+6	; 0x06
 8e2:	97 81       	ldd	r25, Z+7	; 0x07
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x3aa>
 8e6:	8f ef       	ldi	r24, 0xFF	; 255
 8e8:	9f ef       	ldi	r25, 0xFF	; 255
 8ea:	2c 96       	adiw	r28, 0x0c	; 12
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	f8 94       	cli
 8f0:	de bf       	out	0x3e, r29	; 62
 8f2:	0f be       	out	0x3f, r0	; 63
 8f4:	cd bf       	out	0x3d, r28	; 61
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	1f 91       	pop	r17
 8fc:	0f 91       	pop	r16
 8fe:	ff 90       	pop	r15
 900:	ef 90       	pop	r14
 902:	df 90       	pop	r13
 904:	cf 90       	pop	r12
 906:	bf 90       	pop	r11
 908:	af 90       	pop	r10
 90a:	9f 90       	pop	r9
 90c:	8f 90       	pop	r8
 90e:	7f 90       	pop	r7
 910:	6f 90       	pop	r6
 912:	5f 90       	pop	r5
 914:	4f 90       	pop	r4
 916:	3f 90       	pop	r3
 918:	2f 90       	pop	r2
 91a:	08 95       	ret

0000091c <calloc>:
 91c:	0f 93       	push	r16
 91e:	1f 93       	push	r17
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	86 9f       	mul	r24, r22
 926:	80 01       	movw	r16, r0
 928:	87 9f       	mul	r24, r23
 92a:	10 0d       	add	r17, r0
 92c:	96 9f       	mul	r25, r22
 92e:	10 0d       	add	r17, r0
 930:	11 24       	eor	r1, r1
 932:	c8 01       	movw	r24, r16
 934:	0d d0       	rcall	.+26     	; 0x950 <malloc>
 936:	ec 01       	movw	r28, r24
 938:	00 97       	sbiw	r24, 0x00	; 0
 93a:	21 f0       	breq	.+8      	; 0x944 <calloc+0x28>
 93c:	a8 01       	movw	r20, r16
 93e:	60 e0       	ldi	r22, 0x00	; 0
 940:	70 e0       	ldi	r23, 0x00	; 0
 942:	38 d1       	rcall	.+624    	; 0xbb4 <memset>
 944:	ce 01       	movw	r24, r28
 946:	df 91       	pop	r29
 948:	cf 91       	pop	r28
 94a:	1f 91       	pop	r17
 94c:	0f 91       	pop	r16
 94e:	08 95       	ret

00000950 <malloc>:
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
 954:	82 30       	cpi	r24, 0x02	; 2
 956:	91 05       	cpc	r25, r1
 958:	10 f4       	brcc	.+4      	; 0x95e <malloc+0xe>
 95a:	82 e0       	ldi	r24, 0x02	; 2
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	e0 91 09 03 	lds	r30, 0x0309
 962:	f0 91 0a 03 	lds	r31, 0x030A
 966:	20 e0       	ldi	r18, 0x00	; 0
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	a0 e0       	ldi	r26, 0x00	; 0
 96c:	b0 e0       	ldi	r27, 0x00	; 0
 96e:	30 97       	sbiw	r30, 0x00	; 0
 970:	39 f1       	breq	.+78     	; 0x9c0 <malloc+0x70>
 972:	40 81       	ld	r20, Z
 974:	51 81       	ldd	r21, Z+1	; 0x01
 976:	48 17       	cp	r20, r24
 978:	59 07       	cpc	r21, r25
 97a:	b8 f0       	brcs	.+46     	; 0x9aa <malloc+0x5a>
 97c:	48 17       	cp	r20, r24
 97e:	59 07       	cpc	r21, r25
 980:	71 f4       	brne	.+28     	; 0x99e <malloc+0x4e>
 982:	82 81       	ldd	r24, Z+2	; 0x02
 984:	93 81       	ldd	r25, Z+3	; 0x03
 986:	10 97       	sbiw	r26, 0x00	; 0
 988:	29 f0       	breq	.+10     	; 0x994 <malloc+0x44>
 98a:	13 96       	adiw	r26, 0x03	; 3
 98c:	9c 93       	st	X, r25
 98e:	8e 93       	st	-X, r24
 990:	12 97       	sbiw	r26, 0x02	; 2
 992:	2c c0       	rjmp	.+88     	; 0x9ec <malloc+0x9c>
 994:	90 93 0a 03 	sts	0x030A, r25
 998:	80 93 09 03 	sts	0x0309, r24
 99c:	27 c0       	rjmp	.+78     	; 0x9ec <malloc+0x9c>
 99e:	21 15       	cp	r18, r1
 9a0:	31 05       	cpc	r19, r1
 9a2:	31 f0       	breq	.+12     	; 0x9b0 <malloc+0x60>
 9a4:	42 17       	cp	r20, r18
 9a6:	53 07       	cpc	r21, r19
 9a8:	18 f0       	brcs	.+6      	; 0x9b0 <malloc+0x60>
 9aa:	a9 01       	movw	r20, r18
 9ac:	db 01       	movw	r26, r22
 9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <malloc+0x62>
 9b0:	ef 01       	movw	r28, r30
 9b2:	9a 01       	movw	r18, r20
 9b4:	bd 01       	movw	r22, r26
 9b6:	df 01       	movw	r26, r30
 9b8:	02 80       	ldd	r0, Z+2	; 0x02
 9ba:	f3 81       	ldd	r31, Z+3	; 0x03
 9bc:	e0 2d       	mov	r30, r0
 9be:	d7 cf       	rjmp	.-82     	; 0x96e <malloc+0x1e>
 9c0:	21 15       	cp	r18, r1
 9c2:	31 05       	cpc	r19, r1
 9c4:	f9 f0       	breq	.+62     	; 0xa04 <malloc+0xb4>
 9c6:	28 1b       	sub	r18, r24
 9c8:	39 0b       	sbc	r19, r25
 9ca:	24 30       	cpi	r18, 0x04	; 4
 9cc:	31 05       	cpc	r19, r1
 9ce:	80 f4       	brcc	.+32     	; 0x9f0 <malloc+0xa0>
 9d0:	8a 81       	ldd	r24, Y+2	; 0x02
 9d2:	9b 81       	ldd	r25, Y+3	; 0x03
 9d4:	61 15       	cp	r22, r1
 9d6:	71 05       	cpc	r23, r1
 9d8:	21 f0       	breq	.+8      	; 0x9e2 <malloc+0x92>
 9da:	fb 01       	movw	r30, r22
 9dc:	93 83       	std	Z+3, r25	; 0x03
 9de:	82 83       	std	Z+2, r24	; 0x02
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <malloc+0x9a>
 9e2:	90 93 0a 03 	sts	0x030A, r25
 9e6:	80 93 09 03 	sts	0x0309, r24
 9ea:	fe 01       	movw	r30, r28
 9ec:	32 96       	adiw	r30, 0x02	; 2
 9ee:	44 c0       	rjmp	.+136    	; 0xa78 <malloc+0x128>
 9f0:	fe 01       	movw	r30, r28
 9f2:	e2 0f       	add	r30, r18
 9f4:	f3 1f       	adc	r31, r19
 9f6:	81 93       	st	Z+, r24
 9f8:	91 93       	st	Z+, r25
 9fa:	22 50       	subi	r18, 0x02	; 2
 9fc:	31 09       	sbc	r19, r1
 9fe:	39 83       	std	Y+1, r19	; 0x01
 a00:	28 83       	st	Y, r18
 a02:	3a c0       	rjmp	.+116    	; 0xa78 <malloc+0x128>
 a04:	20 91 07 03 	lds	r18, 0x0307
 a08:	30 91 08 03 	lds	r19, 0x0308
 a0c:	23 2b       	or	r18, r19
 a0e:	41 f4       	brne	.+16     	; 0xa20 <malloc+0xd0>
 a10:	20 91 02 02 	lds	r18, 0x0202
 a14:	30 91 03 02 	lds	r19, 0x0203
 a18:	30 93 08 03 	sts	0x0308, r19
 a1c:	20 93 07 03 	sts	0x0307, r18
 a20:	20 91 00 02 	lds	r18, 0x0200
 a24:	30 91 01 02 	lds	r19, 0x0201
 a28:	21 15       	cp	r18, r1
 a2a:	31 05       	cpc	r19, r1
 a2c:	41 f4       	brne	.+16     	; 0xa3e <malloc+0xee>
 a2e:	2d b7       	in	r18, 0x3d	; 61
 a30:	3e b7       	in	r19, 0x3e	; 62
 a32:	40 91 04 02 	lds	r20, 0x0204
 a36:	50 91 05 02 	lds	r21, 0x0205
 a3a:	24 1b       	sub	r18, r20
 a3c:	35 0b       	sbc	r19, r21
 a3e:	e0 91 07 03 	lds	r30, 0x0307
 a42:	f0 91 08 03 	lds	r31, 0x0308
 a46:	e2 17       	cp	r30, r18
 a48:	f3 07       	cpc	r31, r19
 a4a:	a0 f4       	brcc	.+40     	; 0xa74 <malloc+0x124>
 a4c:	2e 1b       	sub	r18, r30
 a4e:	3f 0b       	sbc	r19, r31
 a50:	28 17       	cp	r18, r24
 a52:	39 07       	cpc	r19, r25
 a54:	78 f0       	brcs	.+30     	; 0xa74 <malloc+0x124>
 a56:	ac 01       	movw	r20, r24
 a58:	4e 5f       	subi	r20, 0xFE	; 254
 a5a:	5f 4f       	sbci	r21, 0xFF	; 255
 a5c:	24 17       	cp	r18, r20
 a5e:	35 07       	cpc	r19, r21
 a60:	48 f0       	brcs	.+18     	; 0xa74 <malloc+0x124>
 a62:	4e 0f       	add	r20, r30
 a64:	5f 1f       	adc	r21, r31
 a66:	50 93 08 03 	sts	0x0308, r21
 a6a:	40 93 07 03 	sts	0x0307, r20
 a6e:	81 93       	st	Z+, r24
 a70:	91 93       	st	Z+, r25
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <malloc+0x128>
 a74:	e0 e0       	ldi	r30, 0x00	; 0
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	cf 01       	movw	r24, r30
 a7a:	df 91       	pop	r29
 a7c:	cf 91       	pop	r28
 a7e:	08 95       	ret

00000a80 <free>:
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	00 97       	sbiw	r24, 0x00	; 0
 a86:	09 f4       	brne	.+2      	; 0xa8a <free+0xa>
 a88:	87 c0       	rjmp	.+270    	; 0xb98 <free+0x118>
 a8a:	fc 01       	movw	r30, r24
 a8c:	32 97       	sbiw	r30, 0x02	; 2
 a8e:	13 82       	std	Z+3, r1	; 0x03
 a90:	12 82       	std	Z+2, r1	; 0x02
 a92:	c0 91 09 03 	lds	r28, 0x0309
 a96:	d0 91 0a 03 	lds	r29, 0x030A
 a9a:	20 97       	sbiw	r28, 0x00	; 0
 a9c:	81 f4       	brne	.+32     	; 0xabe <free+0x3e>
 a9e:	20 81       	ld	r18, Z
 aa0:	31 81       	ldd	r19, Z+1	; 0x01
 aa2:	28 0f       	add	r18, r24
 aa4:	39 1f       	adc	r19, r25
 aa6:	80 91 07 03 	lds	r24, 0x0307
 aaa:	90 91 08 03 	lds	r25, 0x0308
 aae:	82 17       	cp	r24, r18
 ab0:	93 07       	cpc	r25, r19
 ab2:	79 f5       	brne	.+94     	; 0xb12 <free+0x92>
 ab4:	f0 93 08 03 	sts	0x0308, r31
 ab8:	e0 93 07 03 	sts	0x0307, r30
 abc:	6d c0       	rjmp	.+218    	; 0xb98 <free+0x118>
 abe:	de 01       	movw	r26, r28
 ac0:	20 e0       	ldi	r18, 0x00	; 0
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	ae 17       	cp	r26, r30
 ac6:	bf 07       	cpc	r27, r31
 ac8:	50 f4       	brcc	.+20     	; 0xade <free+0x5e>
 aca:	12 96       	adiw	r26, 0x02	; 2
 acc:	4d 91       	ld	r20, X+
 ace:	5c 91       	ld	r21, X
 ad0:	13 97       	sbiw	r26, 0x03	; 3
 ad2:	9d 01       	movw	r18, r26
 ad4:	41 15       	cp	r20, r1
 ad6:	51 05       	cpc	r21, r1
 ad8:	09 f1       	breq	.+66     	; 0xb1c <free+0x9c>
 ada:	da 01       	movw	r26, r20
 adc:	f3 cf       	rjmp	.-26     	; 0xac4 <free+0x44>
 ade:	b3 83       	std	Z+3, r27	; 0x03
 ae0:	a2 83       	std	Z+2, r26	; 0x02
 ae2:	40 81       	ld	r20, Z
 ae4:	51 81       	ldd	r21, Z+1	; 0x01
 ae6:	84 0f       	add	r24, r20
 ae8:	95 1f       	adc	r25, r21
 aea:	8a 17       	cp	r24, r26
 aec:	9b 07       	cpc	r25, r27
 aee:	71 f4       	brne	.+28     	; 0xb0c <free+0x8c>
 af0:	8d 91       	ld	r24, X+
 af2:	9c 91       	ld	r25, X
 af4:	11 97       	sbiw	r26, 0x01	; 1
 af6:	84 0f       	add	r24, r20
 af8:	95 1f       	adc	r25, r21
 afa:	02 96       	adiw	r24, 0x02	; 2
 afc:	91 83       	std	Z+1, r25	; 0x01
 afe:	80 83       	st	Z, r24
 b00:	12 96       	adiw	r26, 0x02	; 2
 b02:	8d 91       	ld	r24, X+
 b04:	9c 91       	ld	r25, X
 b06:	13 97       	sbiw	r26, 0x03	; 3
 b08:	93 83       	std	Z+3, r25	; 0x03
 b0a:	82 83       	std	Z+2, r24	; 0x02
 b0c:	21 15       	cp	r18, r1
 b0e:	31 05       	cpc	r19, r1
 b10:	29 f4       	brne	.+10     	; 0xb1c <free+0x9c>
 b12:	f0 93 0a 03 	sts	0x030A, r31
 b16:	e0 93 09 03 	sts	0x0309, r30
 b1a:	3e c0       	rjmp	.+124    	; 0xb98 <free+0x118>
 b1c:	d9 01       	movw	r26, r18
 b1e:	13 96       	adiw	r26, 0x03	; 3
 b20:	fc 93       	st	X, r31
 b22:	ee 93       	st	-X, r30
 b24:	12 97       	sbiw	r26, 0x02	; 2
 b26:	4d 91       	ld	r20, X+
 b28:	5d 91       	ld	r21, X+
 b2a:	a4 0f       	add	r26, r20
 b2c:	b5 1f       	adc	r27, r21
 b2e:	ea 17       	cp	r30, r26
 b30:	fb 07       	cpc	r31, r27
 b32:	79 f4       	brne	.+30     	; 0xb52 <free+0xd2>
 b34:	80 81       	ld	r24, Z
 b36:	91 81       	ldd	r25, Z+1	; 0x01
 b38:	84 0f       	add	r24, r20
 b3a:	95 1f       	adc	r25, r21
 b3c:	02 96       	adiw	r24, 0x02	; 2
 b3e:	d9 01       	movw	r26, r18
 b40:	11 96       	adiw	r26, 0x01	; 1
 b42:	9c 93       	st	X, r25
 b44:	8e 93       	st	-X, r24
 b46:	82 81       	ldd	r24, Z+2	; 0x02
 b48:	93 81       	ldd	r25, Z+3	; 0x03
 b4a:	13 96       	adiw	r26, 0x03	; 3
 b4c:	9c 93       	st	X, r25
 b4e:	8e 93       	st	-X, r24
 b50:	12 97       	sbiw	r26, 0x02	; 2
 b52:	e0 e0       	ldi	r30, 0x00	; 0
 b54:	f0 e0       	ldi	r31, 0x00	; 0
 b56:	8a 81       	ldd	r24, Y+2	; 0x02
 b58:	9b 81       	ldd	r25, Y+3	; 0x03
 b5a:	00 97       	sbiw	r24, 0x00	; 0
 b5c:	19 f0       	breq	.+6      	; 0xb64 <free+0xe4>
 b5e:	fe 01       	movw	r30, r28
 b60:	ec 01       	movw	r28, r24
 b62:	f9 cf       	rjmp	.-14     	; 0xb56 <free+0xd6>
 b64:	ce 01       	movw	r24, r28
 b66:	02 96       	adiw	r24, 0x02	; 2
 b68:	28 81       	ld	r18, Y
 b6a:	39 81       	ldd	r19, Y+1	; 0x01
 b6c:	82 0f       	add	r24, r18
 b6e:	93 1f       	adc	r25, r19
 b70:	20 91 07 03 	lds	r18, 0x0307
 b74:	30 91 08 03 	lds	r19, 0x0308
 b78:	28 17       	cp	r18, r24
 b7a:	39 07       	cpc	r19, r25
 b7c:	69 f4       	brne	.+26     	; 0xb98 <free+0x118>
 b7e:	30 97       	sbiw	r30, 0x00	; 0
 b80:	29 f4       	brne	.+10     	; 0xb8c <free+0x10c>
 b82:	10 92 0a 03 	sts	0x030A, r1
 b86:	10 92 09 03 	sts	0x0309, r1
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <free+0x110>
 b8c:	13 82       	std	Z+3, r1	; 0x03
 b8e:	12 82       	std	Z+2, r1	; 0x02
 b90:	d0 93 08 03 	sts	0x0308, r29
 b94:	c0 93 07 03 	sts	0x0307, r28
 b98:	df 91       	pop	r29
 b9a:	cf 91       	pop	r28
 b9c:	08 95       	ret

00000b9e <strnlen_P>:
 b9e:	fc 01       	movw	r30, r24
 ba0:	05 90       	lpm	r0, Z+
 ba2:	61 50       	subi	r22, 0x01	; 1
 ba4:	70 40       	sbci	r23, 0x00	; 0
 ba6:	01 10       	cpse	r0, r1
 ba8:	d8 f7       	brcc	.-10     	; 0xba0 <strnlen_P+0x2>
 baa:	80 95       	com	r24
 bac:	90 95       	com	r25
 bae:	8e 0f       	add	r24, r30
 bb0:	9f 1f       	adc	r25, r31
 bb2:	08 95       	ret

00000bb4 <memset>:
 bb4:	dc 01       	movw	r26, r24
 bb6:	01 c0       	rjmp	.+2      	; 0xbba <memset+0x6>
 bb8:	6d 93       	st	X+, r22
 bba:	41 50       	subi	r20, 0x01	; 1
 bbc:	50 40       	sbci	r21, 0x00	; 0
 bbe:	e0 f7       	brcc	.-8      	; 0xbb8 <memset+0x4>
 bc0:	08 95       	ret

00000bc2 <strnlen>:
 bc2:	fc 01       	movw	r30, r24
 bc4:	61 50       	subi	r22, 0x01	; 1
 bc6:	70 40       	sbci	r23, 0x00	; 0
 bc8:	01 90       	ld	r0, Z+
 bca:	01 10       	cpse	r0, r1
 bcc:	d8 f7       	brcc	.-10     	; 0xbc4 <strnlen+0x2>
 bce:	80 95       	com	r24
 bd0:	90 95       	com	r25
 bd2:	8e 0f       	add	r24, r30
 bd4:	9f 1f       	adc	r25, r31
 bd6:	08 95       	ret

00000bd8 <fputc>:
 bd8:	0f 93       	push	r16
 bda:	1f 93       	push	r17
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
 be0:	18 2f       	mov	r17, r24
 be2:	09 2f       	mov	r16, r25
 be4:	eb 01       	movw	r28, r22
 be6:	8b 81       	ldd	r24, Y+3	; 0x03
 be8:	81 fd       	sbrc	r24, 1
 bea:	03 c0       	rjmp	.+6      	; 0xbf2 <fputc+0x1a>
 bec:	8f ef       	ldi	r24, 0xFF	; 255
 bee:	9f ef       	ldi	r25, 0xFF	; 255
 bf0:	20 c0       	rjmp	.+64     	; 0xc32 <fputc+0x5a>
 bf2:	82 ff       	sbrs	r24, 2
 bf4:	10 c0       	rjmp	.+32     	; 0xc16 <fputc+0x3e>
 bf6:	4e 81       	ldd	r20, Y+6	; 0x06
 bf8:	5f 81       	ldd	r21, Y+7	; 0x07
 bfa:	2c 81       	ldd	r18, Y+4	; 0x04
 bfc:	3d 81       	ldd	r19, Y+5	; 0x05
 bfe:	42 17       	cp	r20, r18
 c00:	53 07       	cpc	r21, r19
 c02:	7c f4       	brge	.+30     	; 0xc22 <fputc+0x4a>
 c04:	e8 81       	ld	r30, Y
 c06:	f9 81       	ldd	r31, Y+1	; 0x01
 c08:	9f 01       	movw	r18, r30
 c0a:	2f 5f       	subi	r18, 0xFF	; 255
 c0c:	3f 4f       	sbci	r19, 0xFF	; 255
 c0e:	39 83       	std	Y+1, r19	; 0x01
 c10:	28 83       	st	Y, r18
 c12:	10 83       	st	Z, r17
 c14:	06 c0       	rjmp	.+12     	; 0xc22 <fputc+0x4a>
 c16:	e8 85       	ldd	r30, Y+8	; 0x08
 c18:	f9 85       	ldd	r31, Y+9	; 0x09
 c1a:	81 2f       	mov	r24, r17
 c1c:	19 95       	eicall
 c1e:	89 2b       	or	r24, r25
 c20:	29 f7       	brne	.-54     	; 0xbec <fputc+0x14>
 c22:	2e 81       	ldd	r18, Y+6	; 0x06
 c24:	3f 81       	ldd	r19, Y+7	; 0x07
 c26:	2f 5f       	subi	r18, 0xFF	; 255
 c28:	3f 4f       	sbci	r19, 0xFF	; 255
 c2a:	3f 83       	std	Y+7, r19	; 0x07
 c2c:	2e 83       	std	Y+6, r18	; 0x06
 c2e:	81 2f       	mov	r24, r17
 c30:	90 2f       	mov	r25, r16
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
 c36:	1f 91       	pop	r17
 c38:	0f 91       	pop	r16
 c3a:	08 95       	ret

00000c3c <__ultoa_invert>:
 c3c:	fa 01       	movw	r30, r20
 c3e:	aa 27       	eor	r26, r26
 c40:	28 30       	cpi	r18, 0x08	; 8
 c42:	51 f1       	breq	.+84     	; 0xc98 <__ultoa_invert+0x5c>
 c44:	20 31       	cpi	r18, 0x10	; 16
 c46:	81 f1       	breq	.+96     	; 0xca8 <__ultoa_invert+0x6c>
 c48:	e8 94       	clt
 c4a:	6f 93       	push	r22
 c4c:	6e 7f       	andi	r22, 0xFE	; 254
 c4e:	6e 5f       	subi	r22, 0xFE	; 254
 c50:	7f 4f       	sbci	r23, 0xFF	; 255
 c52:	8f 4f       	sbci	r24, 0xFF	; 255
 c54:	9f 4f       	sbci	r25, 0xFF	; 255
 c56:	af 4f       	sbci	r26, 0xFF	; 255
 c58:	b1 e0       	ldi	r27, 0x01	; 1
 c5a:	3e d0       	rcall	.+124    	; 0xcd8 <__ultoa_invert+0x9c>
 c5c:	b4 e0       	ldi	r27, 0x04	; 4
 c5e:	3c d0       	rcall	.+120    	; 0xcd8 <__ultoa_invert+0x9c>
 c60:	67 0f       	add	r22, r23
 c62:	78 1f       	adc	r23, r24
 c64:	89 1f       	adc	r24, r25
 c66:	9a 1f       	adc	r25, r26
 c68:	a1 1d       	adc	r26, r1
 c6a:	68 0f       	add	r22, r24
 c6c:	79 1f       	adc	r23, r25
 c6e:	8a 1f       	adc	r24, r26
 c70:	91 1d       	adc	r25, r1
 c72:	a1 1d       	adc	r26, r1
 c74:	6a 0f       	add	r22, r26
 c76:	71 1d       	adc	r23, r1
 c78:	81 1d       	adc	r24, r1
 c7a:	91 1d       	adc	r25, r1
 c7c:	a1 1d       	adc	r26, r1
 c7e:	20 d0       	rcall	.+64     	; 0xcc0 <__ultoa_invert+0x84>
 c80:	09 f4       	brne	.+2      	; 0xc84 <__ultoa_invert+0x48>
 c82:	68 94       	set
 c84:	3f 91       	pop	r19
 c86:	2a e0       	ldi	r18, 0x0A	; 10
 c88:	26 9f       	mul	r18, r22
 c8a:	11 24       	eor	r1, r1
 c8c:	30 19       	sub	r19, r0
 c8e:	30 5d       	subi	r19, 0xD0	; 208
 c90:	31 93       	st	Z+, r19
 c92:	de f6       	brtc	.-74     	; 0xc4a <__ultoa_invert+0xe>
 c94:	cf 01       	movw	r24, r30
 c96:	08 95       	ret
 c98:	46 2f       	mov	r20, r22
 c9a:	47 70       	andi	r20, 0x07	; 7
 c9c:	40 5d       	subi	r20, 0xD0	; 208
 c9e:	41 93       	st	Z+, r20
 ca0:	b3 e0       	ldi	r27, 0x03	; 3
 ca2:	0f d0       	rcall	.+30     	; 0xcc2 <__ultoa_invert+0x86>
 ca4:	c9 f7       	brne	.-14     	; 0xc98 <__ultoa_invert+0x5c>
 ca6:	f6 cf       	rjmp	.-20     	; 0xc94 <__ultoa_invert+0x58>
 ca8:	46 2f       	mov	r20, r22
 caa:	4f 70       	andi	r20, 0x0F	; 15
 cac:	40 5d       	subi	r20, 0xD0	; 208
 cae:	4a 33       	cpi	r20, 0x3A	; 58
 cb0:	18 f0       	brcs	.+6      	; 0xcb8 <__ultoa_invert+0x7c>
 cb2:	49 5d       	subi	r20, 0xD9	; 217
 cb4:	31 fd       	sbrc	r19, 1
 cb6:	40 52       	subi	r20, 0x20	; 32
 cb8:	41 93       	st	Z+, r20
 cba:	02 d0       	rcall	.+4      	; 0xcc0 <__ultoa_invert+0x84>
 cbc:	a9 f7       	brne	.-22     	; 0xca8 <__ultoa_invert+0x6c>
 cbe:	ea cf       	rjmp	.-44     	; 0xc94 <__ultoa_invert+0x58>
 cc0:	b4 e0       	ldi	r27, 0x04	; 4
 cc2:	a6 95       	lsr	r26
 cc4:	97 95       	ror	r25
 cc6:	87 95       	ror	r24
 cc8:	77 95       	ror	r23
 cca:	67 95       	ror	r22
 ccc:	ba 95       	dec	r27
 cce:	c9 f7       	brne	.-14     	; 0xcc2 <__ultoa_invert+0x86>
 cd0:	00 97       	sbiw	r24, 0x00	; 0
 cd2:	61 05       	cpc	r22, r1
 cd4:	71 05       	cpc	r23, r1
 cd6:	08 95       	ret
 cd8:	9b 01       	movw	r18, r22
 cda:	ac 01       	movw	r20, r24
 cdc:	0a 2e       	mov	r0, r26
 cde:	06 94       	lsr	r0
 ce0:	57 95       	ror	r21
 ce2:	47 95       	ror	r20
 ce4:	37 95       	ror	r19
 ce6:	27 95       	ror	r18
 ce8:	ba 95       	dec	r27
 cea:	c9 f7       	brne	.-14     	; 0xcde <__ultoa_invert+0xa2>
 cec:	62 0f       	add	r22, r18
 cee:	73 1f       	adc	r23, r19
 cf0:	84 1f       	adc	r24, r20
 cf2:	95 1f       	adc	r25, r21
 cf4:	a0 1d       	adc	r26, r0
 cf6:	08 95       	ret

00000cf8 <_exit>:
 cf8:	f8 94       	cli

00000cfa <__stop_program>:
 cfa:	ff cf       	rjmp	.-2      	; 0xcfa <__stop_program>
