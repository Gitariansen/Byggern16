
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800200  00000c7c  00000d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008002bc  008002bc  00000dcc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010de  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a4  00000000  00000000  0000204a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b52  00000000  00000000  000028ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000358  00000000  00000000  00003440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047c  00000000  00000000  00003798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008e3  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000044f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c1       	rjmp	.+654    	; 0x29c <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 3b       	cpi	r26, 0xBC	; 188
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac eb       	ldi	r26, 0xBC	; 188
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 3c       	cpi	r26, 0xC7	; 199
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	ab c5       	rjmp	.+2902   	; 0xc78 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "drivers/can.h"
#include "drivers/servo.h"
#include "drivers/MCP2551.h"

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	2b 97       	sbiw	r28, 0x0b	; 11
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
 138:	87 e6       	ldi	r24, 0x67	; 103
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	b6 d1       	rcall	.+876    	; 0x4aa <UART_init>
	CAN_init();
 13e:	13 d0       	rcall	.+38     	; 0x166 <CAN_init>

	printf("Hello world!\n");
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	24 d4       	rcall	.+2120   	; 0x98e <puts>

	SERVO_init();
 146:	41 d1       	rcall	.+642    	; 0x3ca <SERVO_init>
	SERVO_write(100);
 148:	84 e6       	ldi	r24, 0x64	; 100
 14a:	45 d1       	rcall	.+650    	; 0x3d6 <SERVO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	8f e9       	ldi	r24, 0x9F	; 159
 14e:	9f e0       	ldi	r25, 0x0F	; 15
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x2c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x32>
 156:	00 00       	nop
	
	//printf("CANSTAT: 0x%0X\n", MCP2551_read_data(MCP_CANSTAT));
	
	while(1) {
		_delay_ms(1);
		receive_msg = CAN_data_receive();
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	1d d0       	rcall	.+58     	; 0x198 <CAN_data_receive>
	
		/*printf("Message received\n");
		printf("ID: %d\n", receive_msg.id);
		printf("x: %d y: %d\n\n", receive_msg.data[0], receive_msg.data[1]);*/

		SERVO_write(-receive_msg.data[0]);
 15e:	8c 81       	ldd	r24, Y+4	; 0x04
 160:	81 95       	neg	r24
 162:	39 d1       	rcall	.+626    	; 0x3d6 <SERVO_write>
 164:	f3 cf       	rjmp	.-26     	; 0x14c <main+0x28>

00000166 <CAN_init>:
	}
	// Write starting from TXB0SIDH
	MCP2551_write_data(MCP_TXB0SIDH, data, data_length); 
	// Request to send from buffer TX0
	MCP2551_request_to_send(1);
}
 166:	ee d0       	rcall	.+476    	; 0x344 <MCP2551_init>
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	60 ee       	ldi	r22, 0xE0	; 224
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	cd d0       	rcall	.+410    	; 0x30a <MCP2551_bit_modify>
 170:	8e e0       	ldi	r24, 0x0E	; 14
 172:	bb d0       	rcall	.+374    	; 0x2ea <MCP2551_read_data>
 174:	80 7e       	andi	r24, 0xE0	; 224
 176:	21 f0       	breq	.+8      	; 0x180 <CAN_init+0x1a>
 178:	83 e1       	ldi	r24, 0x13	; 19
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	08 c4       	rjmp	.+2064   	; 0x98e <puts>
 17e:	08 95       	ret
 180:	43 e2       	ldi	r20, 0x23	; 35
 182:	6f ef       	ldi	r22, 0xFF	; 255
 184:	8b e2       	ldi	r24, 0x2B	; 43
 186:	c1 d0       	rcall	.+386    	; 0x30a <MCP2551_bit_modify>
 188:	e9 e6       	ldi	r30, 0x69	; 105
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 62       	ori	r24, 0x20	; 32
 190:	80 83       	st	Z, r24
 192:	ea 9a       	sbi	0x1d, 2	; 29
 194:	78 94       	sei
 196:	08 95       	ret

00000198 <CAN_data_receive>:

struct can_message_t CAN_data_receive() {
 198:	8f 92       	push	r8
 19a:	9f 92       	push	r9
 19c:	af 92       	push	r10
 19e:	bf 92       	push	r11
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	2b 97       	sbiw	r28, 0x0b	; 11
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
 1c0:	6c 01       	movw	r12, r24
	// TODO: enable interrupts to use rx_flag
	struct can_message_t msg;
	rx_flag = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 bc 02 	sts	0x02BC, r24
	if(rx_flag) {
		msg.id = (MCP2551_read_data(MCP_RXB0SIDH) << 3) | (MCP2551_read_data(MCP_RXB0SIDL) >> 5);
 1c8:	81 e6       	ldi	r24, 0x61	; 97
 1ca:	8f d0       	rcall	.+286    	; 0x2ea <MCP2551_read_data>
 1cc:	a8 2e       	mov	r10, r24
 1ce:	82 e6       	ldi	r24, 0x62	; 98
 1d0:	8c d0       	rcall	.+280    	; 0x2ea <MCP2551_read_data>
 1d2:	82 95       	swap	r24
 1d4:	86 95       	lsr	r24
 1d6:	87 70       	andi	r24, 0x07	; 7
 1d8:	b1 2c       	mov	r11, r1
 1da:	aa 0c       	add	r10, r10
 1dc:	bb 1c       	adc	r11, r11
 1de:	aa 0c       	add	r10, r10
 1e0:	bb 1c       	adc	r11, r11
 1e2:	aa 0c       	add	r10, r10
 1e4:	bb 1c       	adc	r11, r11
 1e6:	a8 2a       	or	r10, r24
		msg.length = (0x0F) & MCP2551_read_data(MCP_RXB0DLC);
 1e8:	85 e6       	ldi	r24, 0x65	; 101
 1ea:	7f d0       	rcall	.+254    	; 0x2ea <MCP2551_read_data>
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	88 2e       	mov	r8, r24
		for(int i = 0; i < msg.length; i++) {
 1f0:	99 f0       	breq	.+38     	; 0x218 <CAN_data_receive+0x80>
 1f2:	8e 01       	movw	r16, r28
 1f4:	0c 5f       	subi	r16, 0xFC	; 252
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
 1f8:	78 01       	movw	r14, r16
 1fa:	e8 0e       	add	r14, r24
 1fc:	f1 1c       	adc	r15, r1
 1fe:	0f 2e       	mov	r0, r31
 200:	f6 e6       	ldi	r31, 0x66	; 102
 202:	9f 2e       	mov	r9, r31
 204:	f0 2d       	mov	r31, r0
			msg.data[i] = MCP2551_read_data(MCP_RXB0D0 + i);
 206:	89 2d       	mov	r24, r9
 208:	70 d0       	rcall	.+224    	; 0x2ea <MCP2551_read_data>
 20a:	f8 01       	movw	r30, r16
 20c:	81 93       	st	Z+, r24
 20e:	8f 01       	movw	r16, r30
 210:	93 94       	inc	r9
	struct can_message_t msg;
	rx_flag = 1;
	if(rx_flag) {
		msg.id = (MCP2551_read_data(MCP_RXB0SIDH) << 3) | (MCP2551_read_data(MCP_RXB0SIDL) >> 5);
		msg.length = (0x0F) & MCP2551_read_data(MCP_RXB0DLC);
		for(int i = 0; i < msg.length; i++) {
 212:	ee 15       	cp	r30, r14
 214:	ff 05       	cpc	r31, r15
 216:	b9 f7       	brne	.-18     	; 0x206 <CAN_data_receive+0x6e>
			msg.data[i] = MCP2551_read_data(MCP_RXB0D0 + i);
		}
		rx_flag = 0;
 218:	10 92 bc 02 	sts	0x02BC, r1
	} else {
		printf("(W) can.c: Buffer empty. Returning empty message\n");
	}
	return msg;
 21c:	ba 82       	std	Y+2, r11	; 0x02
 21e:	a9 82       	std	Y+1, r10	; 0x01
 220:	8b 82       	std	Y+3, r8	; 0x03
 222:	8b e0       	ldi	r24, 0x0B	; 11
 224:	fe 01       	movw	r30, r28
 226:	31 96       	adiw	r30, 0x01	; 1
 228:	d6 01       	movw	r26, r12
 22a:	01 90       	ld	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	8a 95       	dec	r24
 230:	e1 f7       	brne	.-8      	; 0x22a <CAN_data_receive+0x92>
}
 232:	c6 01       	movw	r24, r12
 234:	2b 96       	adiw	r28, 0x0b	; 11
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	9f 90       	pop	r9
 256:	8f 90       	pop	r8
 258:	08 95       	ret

0000025a <CAN_error>:

void CAN_error() {
 25a:	cf 93       	push	r28
	uint8_t error = MCP2551_read_data(MCP_EFLG);
 25c:	8d e2       	ldi	r24, 0x2D	; 45
 25e:	45 d0       	rcall	.+138    	; 0x2ea <MCP2551_read_data>
 260:	c8 2f       	mov	r28, r24
	if(error & MCP_TXWAR) {
 262:	82 ff       	sbrs	r24, 2
 264:	03 c0       	rjmp	.+6      	; 0x26c <CAN_error+0x12>
		printf("(E) can.c: Transmission error\n");
 266:	82 e5       	ldi	r24, 0x52	; 82
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	91 d3       	rcall	.+1826   	; 0x98e <puts>
	}
	if(error & MCP_RXWAR) {
 26c:	c1 ff       	sbrs	r28, 1
 26e:	03 c0       	rjmp	.+6      	; 0x276 <CAN_error+0x1c>
		printf("(E) can.c: Receive error\n");
 270:	80 e7       	ldi	r24, 0x70	; 112
 272:	92 e0       	ldi	r25, 0x02	; 2
 274:	8c d3       	rcall	.+1816   	; 0x98e <puts>
	}
}
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <CAN_int_vect>:

ISR(INT2_vect) {
	CAN_int_vect();
}

void CAN_int_vect() {
 27a:	cf 93       	push	r28
	uint8_t interrupt = MCP2551_read_data(MCP_CANINTF);
 27c:	8c e2       	ldi	r24, 0x2C	; 44
 27e:	35 d0       	rcall	.+106    	; 0x2ea <MCP2551_read_data>
 280:	c8 2f       	mov	r28, r24
	if(interrupt & MCP_ERRIF) {
 282:	85 fd       	sbrc	r24, 5
		CAN_error();
 284:	ea df       	rcall	.-44     	; 0x25a <CAN_error>
	}
	if(interrupt & MCP_RX0IF) {
 286:	c0 ff       	sbrs	r28, 0
 288:	03 c0       	rjmp	.+6      	; 0x290 <CAN_int_vect+0x16>
		rx_flag = 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 bc 02 	sts	0x02BC, r24
	}
	MCP2551_bit_modify(MCP_CANINTF, 0xFF, 0);
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	6f ef       	ldi	r22, 0xFF	; 255
 294:	8c e2       	ldi	r24, 0x2C	; 44
 296:	39 d0       	rcall	.+114    	; 0x30a <MCP2551_bit_modify>
}
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <__vector_3>:
	EICRA	|= (1 << ISC21);
	EIMSK	|= (1 << INT2);
	sei();
}

ISR(INT2_vect) {
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	0b b6       	in	r0, 0x3b	; 59
 2a8:	0f 92       	push	r0
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	CAN_int_vect();
 2c2:	db df       	rcall	.-74     	; 0x27a <CAN_int_vect>
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0b be       	out	0x3b, r0	; 59
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <MCP2551_read_data>:
	SPI_transcieve(address);
	result = SPI_transcieve(0);
	SPI_SS_high();
	sei();
	return result;
}
 2ea:	cf 93       	push	r28
 2ec:	c8 2f       	mov	r28, r24
 2ee:	f8 94       	cli
 2f0:	c6 d0       	rcall	.+396    	; 0x47e <SPI_SS_low>
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	be d0       	rcall	.+380    	; 0x472 <SPI_transcieve>
 2f6:	8c 2f       	mov	r24, r28
 2f8:	bc d0       	rcall	.+376    	; 0x472 <SPI_transcieve>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	ba d0       	rcall	.+372    	; 0x472 <SPI_transcieve>
 2fe:	c8 2f       	mov	r28, r24
 300:	c0 d0       	rcall	.+384    	; 0x482 <SPI_SS_high>
 302:	78 94       	sei
 304:	8c 2f       	mov	r24, r28
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <MCP2551_bit_modify>:

void MCP2551_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	18 2f       	mov	r17, r24
 312:	d6 2f       	mov	r29, r22
 314:	c4 2f       	mov	r28, r20
	cli();
 316:	f8 94       	cli
	SPI_SS_low();
 318:	b2 d0       	rcall	.+356    	; 0x47e <SPI_SS_low>
	SPI_transcieve(MCP_BITMOD);
 31a:	85 e0       	ldi	r24, 0x05	; 5
 31c:	aa d0       	rcall	.+340    	; 0x472 <SPI_transcieve>
	SPI_transcieve(address);
 31e:	81 2f       	mov	r24, r17
 320:	a8 d0       	rcall	.+336    	; 0x472 <SPI_transcieve>
	SPI_transcieve(mask);
 322:	8d 2f       	mov	r24, r29
 324:	a6 d0       	rcall	.+332    	; 0x472 <SPI_transcieve>
	SPI_transcieve(data);
 326:	8c 2f       	mov	r24, r28
 328:	a4 d0       	rcall	.+328    	; 0x472 <SPI_transcieve>
	SPI_SS_high();
 32a:	ab d0       	rcall	.+342    	; 0x482 <SPI_SS_high>
	sei();
 32c:	78 94       	sei
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	08 95       	ret

00000336 <MCP2551_reset>:

void MCP2551_reset() {
	cli();
 336:	f8 94       	cli
	SPI_SS_low(); // Select CAN controller
 338:	a2 d0       	rcall	.+324    	; 0x47e <SPI_SS_low>
	SPI_transcieve(MCP_RESET);
 33a:	80 ec       	ldi	r24, 0xC0	; 192
 33c:	9a d0       	rcall	.+308    	; 0x472 <SPI_transcieve>
	SPI_SS_high(); // Deselect CAN controller
 33e:	a1 d0       	rcall	.+322    	; 0x482 <SPI_SS_high>
	sei();
 340:	78 94       	sei
 342:	08 95       	ret

00000344 <MCP2551_init>:
#include <avr/interrupt.h>

#include "MCP2551.h"
#include "spi.h"

uint8_t MCP2551_init(){
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	1f 92       	push	r1
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	SPI_master_init();
 34e:	8a d0       	rcall	.+276    	; 0x464 <SPI_master_init>
	
	MCP2551_reset();
 350:	f2 df       	rcall	.-28     	; 0x336 <MCP2551_reset>
 352:	8f e3       	ldi	r24, 0x3F	; 63
 354:	9c e9       	ldi	r25, 0x9C	; 156
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <MCP2551_init+0x12>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <MCP2551_init+0x18>
 35c:	00 00       	nop
	_delay_ms(10);
	
	// Self test
	value = MCP2551_read_data(MCP_CANSTAT);
 35e:	8e e0       	ldi	r24, 0x0E	; 14
 360:	c4 df       	rcall	.-120    	; 0x2ea <MCP2551_read_data>
 362:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	80 7e       	andi	r24, 0xE0	; 224
 368:	80 38       	cpi	r24, 0x80	; 128
 36a:	29 f0       	breq	.+10     	; 0x376 <MCP2551_init+0x32>
		printf("MCP2551 is NOT in configuration mode after reset!\n");
 36c:	89 e8       	ldi	r24, 0x89	; 137
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	0e d3       	rcall	.+1564   	; 0x98e <puts>
		return 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	01 c0       	rjmp	.+2      	; 0x378 <MCP2551_init+0x34>
	}
	return 0;
 376:	80 e0       	ldi	r24, 0x00	; 0
}
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <PWM_set_period>:
#include "../ATmega2560.h"
#include <avr/io.h>

void PWM_set_period(float period_ms) {
	// Set fast PWM mode 14
	TCCR1A = (1 << WGM11);
 380:	a0 e8       	ldi	r26, 0x80	; 128
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	22 e0       	ldi	r18, 0x02	; 2
 386:	2c 93       	st	X, r18
	TCCR1B = (1 << WGM12) | (1 << WGM13);
 388:	e1 e8       	ldi	r30, 0x81	; 129
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	28 e1       	ldi	r18, 0x18	; 24
 38e:	20 83       	st	Z, r18
	
	// Clear OC1A on compare match, set OC1A at BOTTOM (non-inverting mode)
	TCCR1A |= (1 << COM1A1);
 390:	2c 91       	ld	r18, X
 392:	20 68       	ori	r18, 0x80	; 128
 394:	2c 93       	st	X, r18
	
	// Set prescalar to 1/64
	TCCR1B |= (1 << CS11) | (1 << CS10);
 396:	20 81       	ld	r18, Z
 398:	23 60       	ori	r18, 0x03	; 3
 39a:	20 83       	st	Z, r18
	
	// Set TOP
	ICR1 = F_CPU/64/1000 * period_ms;
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	4a e7       	ldi	r20, 0x7A	; 122
 3a2:	53 e4       	ldi	r21, 0x43	; 67
 3a4:	47 d2       	rcall	.+1166   	; 0x834 <__mulsf3>
 3a6:	64 d1       	rcall	.+712    	; 0x670 <__fixunssfsi>
 3a8:	70 93 87 00 	sts	0x0087, r23
 3ac:	60 93 86 00 	sts	0x0086, r22
	
	// Set OC1A as output
	DDRB |= (1 << DDB5);
 3b0:	25 9a       	sbi	0x04, 5	; 4
 3b2:	08 95       	ret

000003b4 <PWM_set_pulse_width>:
}

void PWM_set_pulse_width(float pulse_width_ms) {
	OCR1A = F_CPU/64/1000 * pulse_width_ms;
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	4a e7       	ldi	r20, 0x7A	; 122
 3ba:	53 e4       	ldi	r21, 0x43	; 67
 3bc:	3b d2       	rcall	.+1142   	; 0x834 <__mulsf3>
 3be:	58 d1       	rcall	.+688    	; 0x670 <__fixunssfsi>
 3c0:	70 93 89 00 	sts	0x0089, r23
 3c4:	60 93 88 00 	sts	0x0088, r22
 3c8:	08 95       	ret

000003ca <SERVO_init>:

const float min = 0.9;
const float max = 2.1;

void SERVO_init() {
	PWM_set_period(20.0f);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	80 ea       	ldi	r24, 0xA0	; 160
 3d0:	91 e4       	ldi	r25, 0x41	; 65
 3d2:	d6 cf       	rjmp	.-84     	; 0x380 <PWM_set_period>
 3d4:	08 95       	ret

000003d6 <SERVO_write>:
}

void SERVO_write(int8_t value) {
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
	float pulse_width = value/100.0f * 0.5f + (max + min)/2;
 3de:	68 2f       	mov	r22, r24
 3e0:	77 27       	eor	r23, r23
 3e2:	67 fd       	sbrc	r22, 7
 3e4:	70 95       	com	r23
 3e6:	87 2f       	mov	r24, r23
 3e8:	97 2f       	mov	r25, r23
 3ea:	70 d1       	rcall	.+736    	; 0x6cc <__floatsisf>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	48 ec       	ldi	r20, 0xC8	; 200
 3f2:	52 e4       	ldi	r21, 0x42	; 66
 3f4:	d5 d0       	rcall	.+426    	; 0x5a0 <__divsf3>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	5f e3       	ldi	r21, 0x3F	; 63
 3fe:	1a d2       	rcall	.+1076   	; 0x834 <__mulsf3>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	40 ec       	ldi	r20, 0xC0	; 192
 406:	5f e3       	ldi	r21, 0x3F	; 63
 408:	63 d0       	rcall	.+198    	; 0x4d0 <__addsf3>
 40a:	6b 01       	movw	r12, r22
 40c:	7c 01       	movw	r14, r24
	if(pulse_width > max) {
 40e:	26 e6       	ldi	r18, 0x66	; 102
 410:	36 e6       	ldi	r19, 0x66	; 102
 412:	46 e0       	ldi	r20, 0x06	; 6
 414:	50 e4       	ldi	r21, 0x40	; 64
 416:	0a d2       	rcall	.+1044   	; 0x82c <__gesf2>
 418:	18 16       	cp	r1, r24
 41a:	54 f0       	brlt	.+20     	; 0x430 <SERVO_write+0x5a>
		pulse_width = max;
	}
	if(pulse_width < min) {
 41c:	26 e6       	ldi	r18, 0x66	; 102
 41e:	36 e6       	ldi	r19, 0x66	; 102
 420:	46 e6       	ldi	r20, 0x66	; 102
 422:	5f e3       	ldi	r21, 0x3F	; 63
 424:	c7 01       	movw	r24, r14
 426:	b6 01       	movw	r22, r12
 428:	b7 d0       	rcall	.+366    	; 0x598 <__cmpsf2>
 42a:	88 23       	and	r24, r24
 42c:	5c f0       	brlt	.+22     	; 0x444 <SERVO_write+0x6e>
 42e:	12 c0       	rjmp	.+36     	; 0x454 <SERVO_write+0x7e>
}

void SERVO_write(int8_t value) {
	float pulse_width = value/100.0f * 0.5f + (max + min)/2;
	if(pulse_width > max) {
		pulse_width = max;
 430:	0f 2e       	mov	r0, r31
 432:	f6 e6       	ldi	r31, 0x66	; 102
 434:	cf 2e       	mov	r12, r31
 436:	dc 2c       	mov	r13, r12
 438:	f6 e0       	ldi	r31, 0x06	; 6
 43a:	ef 2e       	mov	r14, r31
 43c:	f0 e4       	ldi	r31, 0x40	; 64
 43e:	ff 2e       	mov	r15, r31
 440:	f0 2d       	mov	r31, r0
 442:	08 c0       	rjmp	.+16     	; 0x454 <SERVO_write+0x7e>
	}
	if(pulse_width < min) {
		pulse_width = min;
 444:	0f 2e       	mov	r0, r31
 446:	f6 e6       	ldi	r31, 0x66	; 102
 448:	cf 2e       	mov	r12, r31
 44a:	dc 2c       	mov	r13, r12
 44c:	ec 2c       	mov	r14, r12
 44e:	ff e3       	ldi	r31, 0x3F	; 63
 450:	ff 2e       	mov	r15, r31
 452:	f0 2d       	mov	r31, r0
	}
	PWM_set_pulse_width(pulse_width);
 454:	c7 01       	movw	r24, r14
 456:	b6 01       	movw	r22, r12
 458:	ad df       	rcall	.-166    	; 0x3b4 <PWM_set_pulse_width>
 45a:	ff 90       	pop	r15
 45c:	ef 90       	pop	r14
 45e:	df 90       	pop	r13
 460:	cf 90       	pop	r12
 462:	08 95       	ret

00000464 <SPI_master_init>:
#include "spi.h"
#include <avr/io.h>

void SPI_master_init() {
	// Set MOSI and SCK output. All others input.
	DDR_SPI	= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS) | (1 << DD_SS);
 464:	87 e8       	ldi	r24, 0x87	; 135
 466:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DD_CS);
 468:	28 9a       	sbi	0x05, 0	; 5
	// Enable SPI, set Master, set clock rate fck/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);	
 46a:	8c b5       	in	r24, 0x2c	; 44
 46c:	81 65       	ori	r24, 0x51	; 81
 46e:	8c bd       	out	0x2c, r24	; 44
 470:	08 95       	ret

00000472 <SPI_transcieve>:
}

uint8_t SPI_transcieve(uint8_t data) {
	// Start transmission
	SPDR = data;
 472:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission to complete
	while(!(SPSR & (1 << SPIF)));
 474:	0d b4       	in	r0, 0x2d	; 45
 476:	07 fe       	sbrs	r0, 7
 478:	fd cf       	rjmp	.-6      	; 0x474 <SPI_transcieve+0x2>
	// Read data from slave
	return SPDR;
 47a:	8e b5       	in	r24, 0x2e	; 46
}
 47c:	08 95       	ret

0000047e <SPI_SS_low>:

void SPI_SS_low() {
	PORTB &= ~(1 << DD_SS);
 47e:	2f 98       	cbi	0x05, 7	; 5
 480:	08 95       	ret

00000482 <SPI_SS_high>:
}

void SPI_SS_high() {
	PORTB |= (1 << DD_SS);
 482:	2f 9a       	sbi	0x05, 7	; 5
 484:	08 95       	ret

00000486 <UART_transmit>:
 486:	e0 ec       	ldi	r30, 0xC0	; 192
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	90 81       	ld	r25, Z
 48c:	95 ff       	sbrs	r25, 5
 48e:	fd cf       	rjmp	.-6      	; 0x48a <UART_transmit+0x4>
 490:	80 93 c6 00 	sts	0x00C6, r24
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	08 95       	ret

0000049a <UART_receive>:
 49a:	e0 ec       	ldi	r30, 0xC0	; 192
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	88 23       	and	r24, r24
 4a2:	ec f7       	brge	.-6      	; 0x49e <UART_receive+0x4>
 4a4:	80 91 c6 00 	lds	r24, 0x00C6
 4a8:	08 95       	ret

000004aa <UART_init>:
 4aa:	90 93 c5 00 	sts	0x00C5, r25
 4ae:	80 93 c4 00 	sts	0x00C4, r24
 4b2:	88 e1       	ldi	r24, 0x18	; 24
 4b4:	80 93 c1 00 	sts	0x00C1, r24
 4b8:	8e e0       	ldi	r24, 0x0E	; 14
 4ba:	80 93 c2 00 	sts	0x00C2, r24
 4be:	6d e4       	ldi	r22, 0x4D	; 77
 4c0:	72 e0       	ldi	r23, 0x02	; 2
 4c2:	83 e4       	ldi	r24, 0x43	; 67
 4c4:	92 e0       	ldi	r25, 0x02	; 2
 4c6:	19 d2       	rcall	.+1074   	; 0x8fa <fdevopen>
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	08 95       	ret

000004ce <__subsf3>:
 4ce:	50 58       	subi	r21, 0x80	; 128

000004d0 <__addsf3>:
 4d0:	bb 27       	eor	r27, r27
 4d2:	aa 27       	eor	r26, r26
 4d4:	0e d0       	rcall	.+28     	; 0x4f2 <__addsf3x>
 4d6:	70 c1       	rjmp	.+736    	; 0x7b8 <__fp_round>
 4d8:	61 d1       	rcall	.+706    	; 0x79c <__fp_pscA>
 4da:	30 f0       	brcs	.+12     	; 0x4e8 <__addsf3+0x18>
 4dc:	66 d1       	rcall	.+716    	; 0x7aa <__fp_pscB>
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <__addsf3+0x18>
 4e0:	31 f4       	brne	.+12     	; 0x4ee <__addsf3+0x1e>
 4e2:	9f 3f       	cpi	r25, 0xFF	; 255
 4e4:	11 f4       	brne	.+4      	; 0x4ea <__addsf3+0x1a>
 4e6:	1e f4       	brtc	.+6      	; 0x4ee <__addsf3+0x1e>
 4e8:	56 c1       	rjmp	.+684    	; 0x796 <__fp_nan>
 4ea:	0e f4       	brtc	.+2      	; 0x4ee <__addsf3+0x1e>
 4ec:	e0 95       	com	r30
 4ee:	e7 fb       	bst	r30, 7
 4f0:	4c c1       	rjmp	.+664    	; 0x78a <__fp_inf>

000004f2 <__addsf3x>:
 4f2:	e9 2f       	mov	r30, r25
 4f4:	72 d1       	rcall	.+740    	; 0x7da <__fp_split3>
 4f6:	80 f3       	brcs	.-32     	; 0x4d8 <__addsf3+0x8>
 4f8:	ba 17       	cp	r27, r26
 4fa:	62 07       	cpc	r22, r18
 4fc:	73 07       	cpc	r23, r19
 4fe:	84 07       	cpc	r24, r20
 500:	95 07       	cpc	r25, r21
 502:	18 f0       	brcs	.+6      	; 0x50a <__addsf3x+0x18>
 504:	71 f4       	brne	.+28     	; 0x522 <__addsf3x+0x30>
 506:	9e f5       	brtc	.+102    	; 0x56e <__addsf3x+0x7c>
 508:	8a c1       	rjmp	.+788    	; 0x81e <__fp_zero>
 50a:	0e f4       	brtc	.+2      	; 0x50e <__addsf3x+0x1c>
 50c:	e0 95       	com	r30
 50e:	0b 2e       	mov	r0, r27
 510:	ba 2f       	mov	r27, r26
 512:	a0 2d       	mov	r26, r0
 514:	0b 01       	movw	r0, r22
 516:	b9 01       	movw	r22, r18
 518:	90 01       	movw	r18, r0
 51a:	0c 01       	movw	r0, r24
 51c:	ca 01       	movw	r24, r20
 51e:	a0 01       	movw	r20, r0
 520:	11 24       	eor	r1, r1
 522:	ff 27       	eor	r31, r31
 524:	59 1b       	sub	r21, r25
 526:	99 f0       	breq	.+38     	; 0x54e <__addsf3x+0x5c>
 528:	59 3f       	cpi	r21, 0xF9	; 249
 52a:	50 f4       	brcc	.+20     	; 0x540 <__addsf3x+0x4e>
 52c:	50 3e       	cpi	r21, 0xE0	; 224
 52e:	68 f1       	brcs	.+90     	; 0x58a <__addsf3x+0x98>
 530:	1a 16       	cp	r1, r26
 532:	f0 40       	sbci	r31, 0x00	; 0
 534:	a2 2f       	mov	r26, r18
 536:	23 2f       	mov	r18, r19
 538:	34 2f       	mov	r19, r20
 53a:	44 27       	eor	r20, r20
 53c:	58 5f       	subi	r21, 0xF8	; 248
 53e:	f3 cf       	rjmp	.-26     	; 0x526 <__addsf3x+0x34>
 540:	46 95       	lsr	r20
 542:	37 95       	ror	r19
 544:	27 95       	ror	r18
 546:	a7 95       	ror	r26
 548:	f0 40       	sbci	r31, 0x00	; 0
 54a:	53 95       	inc	r21
 54c:	c9 f7       	brne	.-14     	; 0x540 <__addsf3x+0x4e>
 54e:	7e f4       	brtc	.+30     	; 0x56e <__addsf3x+0x7c>
 550:	1f 16       	cp	r1, r31
 552:	ba 0b       	sbc	r27, r26
 554:	62 0b       	sbc	r22, r18
 556:	73 0b       	sbc	r23, r19
 558:	84 0b       	sbc	r24, r20
 55a:	ba f0       	brmi	.+46     	; 0x58a <__addsf3x+0x98>
 55c:	91 50       	subi	r25, 0x01	; 1
 55e:	a1 f0       	breq	.+40     	; 0x588 <__addsf3x+0x96>
 560:	ff 0f       	add	r31, r31
 562:	bb 1f       	adc	r27, r27
 564:	66 1f       	adc	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	88 1f       	adc	r24, r24
 56a:	c2 f7       	brpl	.-16     	; 0x55c <__addsf3x+0x6a>
 56c:	0e c0       	rjmp	.+28     	; 0x58a <__addsf3x+0x98>
 56e:	ba 0f       	add	r27, r26
 570:	62 1f       	adc	r22, r18
 572:	73 1f       	adc	r23, r19
 574:	84 1f       	adc	r24, r20
 576:	48 f4       	brcc	.+18     	; 0x58a <__addsf3x+0x98>
 578:	87 95       	ror	r24
 57a:	77 95       	ror	r23
 57c:	67 95       	ror	r22
 57e:	b7 95       	ror	r27
 580:	f7 95       	ror	r31
 582:	9e 3f       	cpi	r25, 0xFE	; 254
 584:	08 f0       	brcs	.+2      	; 0x588 <__addsf3x+0x96>
 586:	b3 cf       	rjmp	.-154    	; 0x4ee <__addsf3+0x1e>
 588:	93 95       	inc	r25
 58a:	88 0f       	add	r24, r24
 58c:	08 f0       	brcs	.+2      	; 0x590 <__addsf3x+0x9e>
 58e:	99 27       	eor	r25, r25
 590:	ee 0f       	add	r30, r30
 592:	97 95       	ror	r25
 594:	87 95       	ror	r24
 596:	08 95       	ret

00000598 <__cmpsf2>:
 598:	d4 d0       	rcall	.+424    	; 0x742 <__fp_cmp>
 59a:	08 f4       	brcc	.+2      	; 0x59e <__cmpsf2+0x6>
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	08 95       	ret

000005a0 <__divsf3>:
 5a0:	0c d0       	rcall	.+24     	; 0x5ba <__divsf3x>
 5a2:	0a c1       	rjmp	.+532    	; 0x7b8 <__fp_round>
 5a4:	02 d1       	rcall	.+516    	; 0x7aa <__fp_pscB>
 5a6:	40 f0       	brcs	.+16     	; 0x5b8 <__divsf3+0x18>
 5a8:	f9 d0       	rcall	.+498    	; 0x79c <__fp_pscA>
 5aa:	30 f0       	brcs	.+12     	; 0x5b8 <__divsf3+0x18>
 5ac:	21 f4       	brne	.+8      	; 0x5b6 <__divsf3+0x16>
 5ae:	5f 3f       	cpi	r21, 0xFF	; 255
 5b0:	19 f0       	breq	.+6      	; 0x5b8 <__divsf3+0x18>
 5b2:	eb c0       	rjmp	.+470    	; 0x78a <__fp_inf>
 5b4:	51 11       	cpse	r21, r1
 5b6:	34 c1       	rjmp	.+616    	; 0x820 <__fp_szero>
 5b8:	ee c0       	rjmp	.+476    	; 0x796 <__fp_nan>

000005ba <__divsf3x>:
 5ba:	0f d1       	rcall	.+542    	; 0x7da <__fp_split3>
 5bc:	98 f3       	brcs	.-26     	; 0x5a4 <__divsf3+0x4>

000005be <__divsf3_pse>:
 5be:	99 23       	and	r25, r25
 5c0:	c9 f3       	breq	.-14     	; 0x5b4 <__divsf3+0x14>
 5c2:	55 23       	and	r21, r21
 5c4:	b1 f3       	breq	.-20     	; 0x5b2 <__divsf3+0x12>
 5c6:	95 1b       	sub	r25, r21
 5c8:	55 0b       	sbc	r21, r21
 5ca:	bb 27       	eor	r27, r27
 5cc:	aa 27       	eor	r26, r26
 5ce:	62 17       	cp	r22, r18
 5d0:	73 07       	cpc	r23, r19
 5d2:	84 07       	cpc	r24, r20
 5d4:	38 f0       	brcs	.+14     	; 0x5e4 <__divsf3_pse+0x26>
 5d6:	9f 5f       	subi	r25, 0xFF	; 255
 5d8:	5f 4f       	sbci	r21, 0xFF	; 255
 5da:	22 0f       	add	r18, r18
 5dc:	33 1f       	adc	r19, r19
 5de:	44 1f       	adc	r20, r20
 5e0:	aa 1f       	adc	r26, r26
 5e2:	a9 f3       	breq	.-22     	; 0x5ce <__divsf3_pse+0x10>
 5e4:	33 d0       	rcall	.+102    	; 0x64c <__divsf3_pse+0x8e>
 5e6:	0e 2e       	mov	r0, r30
 5e8:	3a f0       	brmi	.+14     	; 0x5f8 <__divsf3_pse+0x3a>
 5ea:	e0 e8       	ldi	r30, 0x80	; 128
 5ec:	30 d0       	rcall	.+96     	; 0x64e <__divsf3_pse+0x90>
 5ee:	91 50       	subi	r25, 0x01	; 1
 5f0:	50 40       	sbci	r21, 0x00	; 0
 5f2:	e6 95       	lsr	r30
 5f4:	00 1c       	adc	r0, r0
 5f6:	ca f7       	brpl	.-14     	; 0x5ea <__divsf3_pse+0x2c>
 5f8:	29 d0       	rcall	.+82     	; 0x64c <__divsf3_pse+0x8e>
 5fa:	fe 2f       	mov	r31, r30
 5fc:	27 d0       	rcall	.+78     	; 0x64c <__divsf3_pse+0x8e>
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	88 1f       	adc	r24, r24
 604:	bb 1f       	adc	r27, r27
 606:	26 17       	cp	r18, r22
 608:	37 07       	cpc	r19, r23
 60a:	48 07       	cpc	r20, r24
 60c:	ab 07       	cpc	r26, r27
 60e:	b0 e8       	ldi	r27, 0x80	; 128
 610:	09 f0       	breq	.+2      	; 0x614 <__divsf3_pse+0x56>
 612:	bb 0b       	sbc	r27, r27
 614:	80 2d       	mov	r24, r0
 616:	bf 01       	movw	r22, r30
 618:	ff 27       	eor	r31, r31
 61a:	93 58       	subi	r25, 0x83	; 131
 61c:	5f 4f       	sbci	r21, 0xFF	; 255
 61e:	2a f0       	brmi	.+10     	; 0x62a <__divsf3_pse+0x6c>
 620:	9e 3f       	cpi	r25, 0xFE	; 254
 622:	51 05       	cpc	r21, r1
 624:	68 f0       	brcs	.+26     	; 0x640 <__divsf3_pse+0x82>
 626:	b1 c0       	rjmp	.+354    	; 0x78a <__fp_inf>
 628:	fb c0       	rjmp	.+502    	; 0x820 <__fp_szero>
 62a:	5f 3f       	cpi	r21, 0xFF	; 255
 62c:	ec f3       	brlt	.-6      	; 0x628 <__divsf3_pse+0x6a>
 62e:	98 3e       	cpi	r25, 0xE8	; 232
 630:	dc f3       	brlt	.-10     	; 0x628 <__divsf3_pse+0x6a>
 632:	86 95       	lsr	r24
 634:	77 95       	ror	r23
 636:	67 95       	ror	r22
 638:	b7 95       	ror	r27
 63a:	f7 95       	ror	r31
 63c:	9f 5f       	subi	r25, 0xFF	; 255
 63e:	c9 f7       	brne	.-14     	; 0x632 <__divsf3_pse+0x74>
 640:	88 0f       	add	r24, r24
 642:	91 1d       	adc	r25, r1
 644:	96 95       	lsr	r25
 646:	87 95       	ror	r24
 648:	97 f9       	bld	r25, 7
 64a:	08 95       	ret
 64c:	e1 e0       	ldi	r30, 0x01	; 1
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	88 1f       	adc	r24, r24
 654:	bb 1f       	adc	r27, r27
 656:	62 17       	cp	r22, r18
 658:	73 07       	cpc	r23, r19
 65a:	84 07       	cpc	r24, r20
 65c:	ba 07       	cpc	r27, r26
 65e:	20 f0       	brcs	.+8      	; 0x668 <__divsf3_pse+0xaa>
 660:	62 1b       	sub	r22, r18
 662:	73 0b       	sbc	r23, r19
 664:	84 0b       	sbc	r24, r20
 666:	ba 0b       	sbc	r27, r26
 668:	ee 1f       	adc	r30, r30
 66a:	88 f7       	brcc	.-30     	; 0x64e <__divsf3_pse+0x90>
 66c:	e0 95       	com	r30
 66e:	08 95       	ret

00000670 <__fixunssfsi>:
 670:	bc d0       	rcall	.+376    	; 0x7ea <__fp_splitA>
 672:	88 f0       	brcs	.+34     	; 0x696 <__fixunssfsi+0x26>
 674:	9f 57       	subi	r25, 0x7F	; 127
 676:	90 f0       	brcs	.+36     	; 0x69c <__fixunssfsi+0x2c>
 678:	b9 2f       	mov	r27, r25
 67a:	99 27       	eor	r25, r25
 67c:	b7 51       	subi	r27, 0x17	; 23
 67e:	a0 f0       	brcs	.+40     	; 0x6a8 <__fixunssfsi+0x38>
 680:	d1 f0       	breq	.+52     	; 0x6b6 <__fixunssfsi+0x46>
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	1a f0       	brmi	.+6      	; 0x692 <__fixunssfsi+0x22>
 68c:	ba 95       	dec	r27
 68e:	c9 f7       	brne	.-14     	; 0x682 <__fixunssfsi+0x12>
 690:	12 c0       	rjmp	.+36     	; 0x6b6 <__fixunssfsi+0x46>
 692:	b1 30       	cpi	r27, 0x01	; 1
 694:	81 f0       	breq	.+32     	; 0x6b6 <__fixunssfsi+0x46>
 696:	c3 d0       	rcall	.+390    	; 0x81e <__fp_zero>
 698:	b1 e0       	ldi	r27, 0x01	; 1
 69a:	08 95       	ret
 69c:	c0 c0       	rjmp	.+384    	; 0x81e <__fp_zero>
 69e:	67 2f       	mov	r22, r23
 6a0:	78 2f       	mov	r23, r24
 6a2:	88 27       	eor	r24, r24
 6a4:	b8 5f       	subi	r27, 0xF8	; 248
 6a6:	39 f0       	breq	.+14     	; 0x6b6 <__fixunssfsi+0x46>
 6a8:	b9 3f       	cpi	r27, 0xF9	; 249
 6aa:	cc f3       	brlt	.-14     	; 0x69e <__fixunssfsi+0x2e>
 6ac:	86 95       	lsr	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b3 95       	inc	r27
 6b4:	d9 f7       	brne	.-10     	; 0x6ac <__fixunssfsi+0x3c>
 6b6:	3e f4       	brtc	.+14     	; 0x6c6 <__fixunssfsi+0x56>
 6b8:	90 95       	com	r25
 6ba:	80 95       	com	r24
 6bc:	70 95       	com	r23
 6be:	61 95       	neg	r22
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	8f 4f       	sbci	r24, 0xFF	; 255
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	08 95       	ret

000006c8 <__floatunsisf>:
 6c8:	e8 94       	clt
 6ca:	09 c0       	rjmp	.+18     	; 0x6de <__floatsisf+0x12>

000006cc <__floatsisf>:
 6cc:	97 fb       	bst	r25, 7
 6ce:	3e f4       	brtc	.+14     	; 0x6de <__floatsisf+0x12>
 6d0:	90 95       	com	r25
 6d2:	80 95       	com	r24
 6d4:	70 95       	com	r23
 6d6:	61 95       	neg	r22
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	99 23       	and	r25, r25
 6e0:	a9 f0       	breq	.+42     	; 0x70c <__floatsisf+0x40>
 6e2:	f9 2f       	mov	r31, r25
 6e4:	96 e9       	ldi	r25, 0x96	; 150
 6e6:	bb 27       	eor	r27, r27
 6e8:	93 95       	inc	r25
 6ea:	f6 95       	lsr	r31
 6ec:	87 95       	ror	r24
 6ee:	77 95       	ror	r23
 6f0:	67 95       	ror	r22
 6f2:	b7 95       	ror	r27
 6f4:	f1 11       	cpse	r31, r1
 6f6:	f8 cf       	rjmp	.-16     	; 0x6e8 <__floatsisf+0x1c>
 6f8:	fa f4       	brpl	.+62     	; 0x738 <__floatsisf+0x6c>
 6fa:	bb 0f       	add	r27, r27
 6fc:	11 f4       	brne	.+4      	; 0x702 <__floatsisf+0x36>
 6fe:	60 ff       	sbrs	r22, 0
 700:	1b c0       	rjmp	.+54     	; 0x738 <__floatsisf+0x6c>
 702:	6f 5f       	subi	r22, 0xFF	; 255
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	16 c0       	rjmp	.+44     	; 0x738 <__floatsisf+0x6c>
 70c:	88 23       	and	r24, r24
 70e:	11 f0       	breq	.+4      	; 0x714 <__floatsisf+0x48>
 710:	96 e9       	ldi	r25, 0x96	; 150
 712:	11 c0       	rjmp	.+34     	; 0x736 <__floatsisf+0x6a>
 714:	77 23       	and	r23, r23
 716:	21 f0       	breq	.+8      	; 0x720 <__floatsisf+0x54>
 718:	9e e8       	ldi	r25, 0x8E	; 142
 71a:	87 2f       	mov	r24, r23
 71c:	76 2f       	mov	r23, r22
 71e:	05 c0       	rjmp	.+10     	; 0x72a <__floatsisf+0x5e>
 720:	66 23       	and	r22, r22
 722:	71 f0       	breq	.+28     	; 0x740 <__floatsisf+0x74>
 724:	96 e8       	ldi	r25, 0x86	; 134
 726:	86 2f       	mov	r24, r22
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	2a f0       	brmi	.+10     	; 0x738 <__floatsisf+0x6c>
 72e:	9a 95       	dec	r25
 730:	66 0f       	add	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	da f7       	brpl	.-10     	; 0x72e <__floatsisf+0x62>
 738:	88 0f       	add	r24, r24
 73a:	96 95       	lsr	r25
 73c:	87 95       	ror	r24
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

00000742 <__fp_cmp>:
 742:	99 0f       	add	r25, r25
 744:	00 08       	sbc	r0, r0
 746:	55 0f       	add	r21, r21
 748:	aa 0b       	sbc	r26, r26
 74a:	e0 e8       	ldi	r30, 0x80	; 128
 74c:	fe ef       	ldi	r31, 0xFE	; 254
 74e:	16 16       	cp	r1, r22
 750:	17 06       	cpc	r1, r23
 752:	e8 07       	cpc	r30, r24
 754:	f9 07       	cpc	r31, r25
 756:	c0 f0       	brcs	.+48     	; 0x788 <__fp_cmp+0x46>
 758:	12 16       	cp	r1, r18
 75a:	13 06       	cpc	r1, r19
 75c:	e4 07       	cpc	r30, r20
 75e:	f5 07       	cpc	r31, r21
 760:	98 f0       	brcs	.+38     	; 0x788 <__fp_cmp+0x46>
 762:	62 1b       	sub	r22, r18
 764:	73 0b       	sbc	r23, r19
 766:	84 0b       	sbc	r24, r20
 768:	95 0b       	sbc	r25, r21
 76a:	39 f4       	brne	.+14     	; 0x77a <__fp_cmp+0x38>
 76c:	0a 26       	eor	r0, r26
 76e:	61 f0       	breq	.+24     	; 0x788 <__fp_cmp+0x46>
 770:	23 2b       	or	r18, r19
 772:	24 2b       	or	r18, r20
 774:	25 2b       	or	r18, r21
 776:	21 f4       	brne	.+8      	; 0x780 <__fp_cmp+0x3e>
 778:	08 95       	ret
 77a:	0a 26       	eor	r0, r26
 77c:	09 f4       	brne	.+2      	; 0x780 <__fp_cmp+0x3e>
 77e:	a1 40       	sbci	r26, 0x01	; 1
 780:	a6 95       	lsr	r26
 782:	8f ef       	ldi	r24, 0xFF	; 255
 784:	81 1d       	adc	r24, r1
 786:	81 1d       	adc	r24, r1
 788:	08 95       	ret

0000078a <__fp_inf>:
 78a:	97 f9       	bld	r25, 7
 78c:	9f 67       	ori	r25, 0x7F	; 127
 78e:	80 e8       	ldi	r24, 0x80	; 128
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	08 95       	ret

00000796 <__fp_nan>:
 796:	9f ef       	ldi	r25, 0xFF	; 255
 798:	80 ec       	ldi	r24, 0xC0	; 192
 79a:	08 95       	ret

0000079c <__fp_pscA>:
 79c:	00 24       	eor	r0, r0
 79e:	0a 94       	dec	r0
 7a0:	16 16       	cp	r1, r22
 7a2:	17 06       	cpc	r1, r23
 7a4:	18 06       	cpc	r1, r24
 7a6:	09 06       	cpc	r0, r25
 7a8:	08 95       	ret

000007aa <__fp_pscB>:
 7aa:	00 24       	eor	r0, r0
 7ac:	0a 94       	dec	r0
 7ae:	12 16       	cp	r1, r18
 7b0:	13 06       	cpc	r1, r19
 7b2:	14 06       	cpc	r1, r20
 7b4:	05 06       	cpc	r0, r21
 7b6:	08 95       	ret

000007b8 <__fp_round>:
 7b8:	09 2e       	mov	r0, r25
 7ba:	03 94       	inc	r0
 7bc:	00 0c       	add	r0, r0
 7be:	11 f4       	brne	.+4      	; 0x7c4 <__fp_round+0xc>
 7c0:	88 23       	and	r24, r24
 7c2:	52 f0       	brmi	.+20     	; 0x7d8 <__fp_round+0x20>
 7c4:	bb 0f       	add	r27, r27
 7c6:	40 f4       	brcc	.+16     	; 0x7d8 <__fp_round+0x20>
 7c8:	bf 2b       	or	r27, r31
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <__fp_round+0x18>
 7cc:	60 ff       	sbrs	r22, 0
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__fp_round+0x20>
 7d0:	6f 5f       	subi	r22, 0xFF	; 255
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	8f 4f       	sbci	r24, 0xFF	; 255
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	08 95       	ret

000007da <__fp_split3>:
 7da:	57 fd       	sbrc	r21, 7
 7dc:	90 58       	subi	r25, 0x80	; 128
 7de:	44 0f       	add	r20, r20
 7e0:	55 1f       	adc	r21, r21
 7e2:	59 f0       	breq	.+22     	; 0x7fa <__fp_splitA+0x10>
 7e4:	5f 3f       	cpi	r21, 0xFF	; 255
 7e6:	71 f0       	breq	.+28     	; 0x804 <__fp_splitA+0x1a>
 7e8:	47 95       	ror	r20

000007ea <__fp_splitA>:
 7ea:	88 0f       	add	r24, r24
 7ec:	97 fb       	bst	r25, 7
 7ee:	99 1f       	adc	r25, r25
 7f0:	61 f0       	breq	.+24     	; 0x80a <__fp_splitA+0x20>
 7f2:	9f 3f       	cpi	r25, 0xFF	; 255
 7f4:	79 f0       	breq	.+30     	; 0x814 <__fp_splitA+0x2a>
 7f6:	87 95       	ror	r24
 7f8:	08 95       	ret
 7fa:	12 16       	cp	r1, r18
 7fc:	13 06       	cpc	r1, r19
 7fe:	14 06       	cpc	r1, r20
 800:	55 1f       	adc	r21, r21
 802:	f2 cf       	rjmp	.-28     	; 0x7e8 <__fp_split3+0xe>
 804:	46 95       	lsr	r20
 806:	f1 df       	rcall	.-30     	; 0x7ea <__fp_splitA>
 808:	08 c0       	rjmp	.+16     	; 0x81a <__fp_splitA+0x30>
 80a:	16 16       	cp	r1, r22
 80c:	17 06       	cpc	r1, r23
 80e:	18 06       	cpc	r1, r24
 810:	99 1f       	adc	r25, r25
 812:	f1 cf       	rjmp	.-30     	; 0x7f6 <__fp_splitA+0xc>
 814:	86 95       	lsr	r24
 816:	71 05       	cpc	r23, r1
 818:	61 05       	cpc	r22, r1
 81a:	08 94       	sec
 81c:	08 95       	ret

0000081e <__fp_zero>:
 81e:	e8 94       	clt

00000820 <__fp_szero>:
 820:	bb 27       	eor	r27, r27
 822:	66 27       	eor	r22, r22
 824:	77 27       	eor	r23, r23
 826:	cb 01       	movw	r24, r22
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret

0000082c <__gesf2>:
 82c:	8a df       	rcall	.-236    	; 0x742 <__fp_cmp>
 82e:	08 f4       	brcc	.+2      	; 0x832 <__gesf2+0x6>
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	08 95       	ret

00000834 <__mulsf3>:
 834:	0b d0       	rcall	.+22     	; 0x84c <__mulsf3x>
 836:	c0 cf       	rjmp	.-128    	; 0x7b8 <__fp_round>
 838:	b1 df       	rcall	.-158    	; 0x79c <__fp_pscA>
 83a:	28 f0       	brcs	.+10     	; 0x846 <__mulsf3+0x12>
 83c:	b6 df       	rcall	.-148    	; 0x7aa <__fp_pscB>
 83e:	18 f0       	brcs	.+6      	; 0x846 <__mulsf3+0x12>
 840:	95 23       	and	r25, r21
 842:	09 f0       	breq	.+2      	; 0x846 <__mulsf3+0x12>
 844:	a2 cf       	rjmp	.-188    	; 0x78a <__fp_inf>
 846:	a7 cf       	rjmp	.-178    	; 0x796 <__fp_nan>
 848:	11 24       	eor	r1, r1
 84a:	ea cf       	rjmp	.-44     	; 0x820 <__fp_szero>

0000084c <__mulsf3x>:
 84c:	c6 df       	rcall	.-116    	; 0x7da <__fp_split3>
 84e:	a0 f3       	brcs	.-24     	; 0x838 <__mulsf3+0x4>

00000850 <__mulsf3_pse>:
 850:	95 9f       	mul	r25, r21
 852:	d1 f3       	breq	.-12     	; 0x848 <__mulsf3+0x14>
 854:	95 0f       	add	r25, r21
 856:	50 e0       	ldi	r21, 0x00	; 0
 858:	55 1f       	adc	r21, r21
 85a:	62 9f       	mul	r22, r18
 85c:	f0 01       	movw	r30, r0
 85e:	72 9f       	mul	r23, r18
 860:	bb 27       	eor	r27, r27
 862:	f0 0d       	add	r31, r0
 864:	b1 1d       	adc	r27, r1
 866:	63 9f       	mul	r22, r19
 868:	aa 27       	eor	r26, r26
 86a:	f0 0d       	add	r31, r0
 86c:	b1 1d       	adc	r27, r1
 86e:	aa 1f       	adc	r26, r26
 870:	64 9f       	mul	r22, r20
 872:	66 27       	eor	r22, r22
 874:	b0 0d       	add	r27, r0
 876:	a1 1d       	adc	r26, r1
 878:	66 1f       	adc	r22, r22
 87a:	82 9f       	mul	r24, r18
 87c:	22 27       	eor	r18, r18
 87e:	b0 0d       	add	r27, r0
 880:	a1 1d       	adc	r26, r1
 882:	62 1f       	adc	r22, r18
 884:	73 9f       	mul	r23, r19
 886:	b0 0d       	add	r27, r0
 888:	a1 1d       	adc	r26, r1
 88a:	62 1f       	adc	r22, r18
 88c:	83 9f       	mul	r24, r19
 88e:	a0 0d       	add	r26, r0
 890:	61 1d       	adc	r22, r1
 892:	22 1f       	adc	r18, r18
 894:	74 9f       	mul	r23, r20
 896:	33 27       	eor	r19, r19
 898:	a0 0d       	add	r26, r0
 89a:	61 1d       	adc	r22, r1
 89c:	23 1f       	adc	r18, r19
 89e:	84 9f       	mul	r24, r20
 8a0:	60 0d       	add	r22, r0
 8a2:	21 1d       	adc	r18, r1
 8a4:	82 2f       	mov	r24, r18
 8a6:	76 2f       	mov	r23, r22
 8a8:	6a 2f       	mov	r22, r26
 8aa:	11 24       	eor	r1, r1
 8ac:	9f 57       	subi	r25, 0x7F	; 127
 8ae:	50 40       	sbci	r21, 0x00	; 0
 8b0:	8a f0       	brmi	.+34     	; 0x8d4 <__mulsf3_pse+0x84>
 8b2:	e1 f0       	breq	.+56     	; 0x8ec <__mulsf3_pse+0x9c>
 8b4:	88 23       	and	r24, r24
 8b6:	4a f0       	brmi	.+18     	; 0x8ca <__mulsf3_pse+0x7a>
 8b8:	ee 0f       	add	r30, r30
 8ba:	ff 1f       	adc	r31, r31
 8bc:	bb 1f       	adc	r27, r27
 8be:	66 1f       	adc	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	91 50       	subi	r25, 0x01	; 1
 8c6:	50 40       	sbci	r21, 0x00	; 0
 8c8:	a9 f7       	brne	.-22     	; 0x8b4 <__mulsf3_pse+0x64>
 8ca:	9e 3f       	cpi	r25, 0xFE	; 254
 8cc:	51 05       	cpc	r21, r1
 8ce:	70 f0       	brcs	.+28     	; 0x8ec <__mulsf3_pse+0x9c>
 8d0:	5c cf       	rjmp	.-328    	; 0x78a <__fp_inf>
 8d2:	a6 cf       	rjmp	.-180    	; 0x820 <__fp_szero>
 8d4:	5f 3f       	cpi	r21, 0xFF	; 255
 8d6:	ec f3       	brlt	.-6      	; 0x8d2 <__mulsf3_pse+0x82>
 8d8:	98 3e       	cpi	r25, 0xE8	; 232
 8da:	dc f3       	brlt	.-10     	; 0x8d2 <__mulsf3_pse+0x82>
 8dc:	86 95       	lsr	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b7 95       	ror	r27
 8e4:	f7 95       	ror	r31
 8e6:	e7 95       	ror	r30
 8e8:	9f 5f       	subi	r25, 0xFF	; 255
 8ea:	c1 f7       	brne	.-16     	; 0x8dc <__mulsf3_pse+0x8c>
 8ec:	fe 2b       	or	r31, r30
 8ee:	88 0f       	add	r24, r24
 8f0:	91 1d       	adc	r25, r1
 8f2:	96 95       	lsr	r25
 8f4:	87 95       	ror	r24
 8f6:	97 f9       	bld	r25, 7
 8f8:	08 95       	ret

000008fa <fdevopen>:
 8fa:	0f 93       	push	r16
 8fc:	1f 93       	push	r17
 8fe:	cf 93       	push	r28
 900:	df 93       	push	r29
 902:	ec 01       	movw	r28, r24
 904:	8b 01       	movw	r16, r22
 906:	00 97       	sbiw	r24, 0x00	; 0
 908:	31 f4       	brne	.+12     	; 0x916 <fdevopen+0x1c>
 90a:	61 15       	cp	r22, r1
 90c:	71 05       	cpc	r23, r1
 90e:	19 f4       	brne	.+6      	; 0x916 <fdevopen+0x1c>
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	37 c0       	rjmp	.+110    	; 0x984 <fdevopen+0x8a>
 916:	6e e0       	ldi	r22, 0x0E	; 14
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	64 d0       	rcall	.+200    	; 0x9e8 <calloc>
 920:	fc 01       	movw	r30, r24
 922:	00 97       	sbiw	r24, 0x00	; 0
 924:	a9 f3       	breq	.-22     	; 0x910 <fdevopen+0x16>
 926:	80 e8       	ldi	r24, 0x80	; 128
 928:	83 83       	std	Z+3, r24	; 0x03
 92a:	01 15       	cp	r16, r1
 92c:	11 05       	cpc	r17, r1
 92e:	71 f0       	breq	.+28     	; 0x94c <fdevopen+0x52>
 930:	13 87       	std	Z+11, r17	; 0x0b
 932:	02 87       	std	Z+10, r16	; 0x0a
 934:	81 e8       	ldi	r24, 0x81	; 129
 936:	83 83       	std	Z+3, r24	; 0x03
 938:	80 91 bd 02 	lds	r24, 0x02BD
 93c:	90 91 be 02 	lds	r25, 0x02BE
 940:	89 2b       	or	r24, r25
 942:	21 f4       	brne	.+8      	; 0x94c <fdevopen+0x52>
 944:	f0 93 be 02 	sts	0x02BE, r31
 948:	e0 93 bd 02 	sts	0x02BD, r30
 94c:	20 97       	sbiw	r28, 0x00	; 0
 94e:	c9 f0       	breq	.+50     	; 0x982 <fdevopen+0x88>
 950:	d1 87       	std	Z+9, r29	; 0x09
 952:	c0 87       	std	Z+8, r28	; 0x08
 954:	83 81       	ldd	r24, Z+3	; 0x03
 956:	82 60       	ori	r24, 0x02	; 2
 958:	83 83       	std	Z+3, r24	; 0x03
 95a:	80 91 bf 02 	lds	r24, 0x02BF
 95e:	90 91 c0 02 	lds	r25, 0x02C0
 962:	89 2b       	or	r24, r25
 964:	71 f4       	brne	.+28     	; 0x982 <fdevopen+0x88>
 966:	f0 93 c0 02 	sts	0x02C0, r31
 96a:	e0 93 bf 02 	sts	0x02BF, r30
 96e:	80 91 c1 02 	lds	r24, 0x02C1
 972:	90 91 c2 02 	lds	r25, 0x02C2
 976:	89 2b       	or	r24, r25
 978:	21 f4       	brne	.+8      	; 0x982 <fdevopen+0x88>
 97a:	f0 93 c2 02 	sts	0x02C2, r31
 97e:	e0 93 c1 02 	sts	0x02C1, r30
 982:	cf 01       	movw	r24, r30
 984:	df 91       	pop	r29
 986:	cf 91       	pop	r28
 988:	1f 91       	pop	r17
 98a:	0f 91       	pop	r16
 98c:	08 95       	ret

0000098e <puts>:
 98e:	0f 93       	push	r16
 990:	1f 93       	push	r17
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	e0 91 bf 02 	lds	r30, 0x02BF
 99a:	f0 91 c0 02 	lds	r31, 0x02C0
 99e:	23 81       	ldd	r18, Z+3	; 0x03
 9a0:	21 ff       	sbrs	r18, 1
 9a2:	1b c0       	rjmp	.+54     	; 0x9da <puts+0x4c>
 9a4:	ec 01       	movw	r28, r24
 9a6:	00 e0       	ldi	r16, 0x00	; 0
 9a8:	10 e0       	ldi	r17, 0x00	; 0
 9aa:	89 91       	ld	r24, Y+
 9ac:	60 91 bf 02 	lds	r22, 0x02BF
 9b0:	70 91 c0 02 	lds	r23, 0x02C0
 9b4:	db 01       	movw	r26, r22
 9b6:	18 96       	adiw	r26, 0x08	; 8
 9b8:	ed 91       	ld	r30, X+
 9ba:	fc 91       	ld	r31, X
 9bc:	19 97       	sbiw	r26, 0x09	; 9
 9be:	88 23       	and	r24, r24
 9c0:	31 f0       	breq	.+12     	; 0x9ce <puts+0x40>
 9c2:	19 95       	eicall
 9c4:	89 2b       	or	r24, r25
 9c6:	89 f3       	breq	.-30     	; 0x9aa <puts+0x1c>
 9c8:	0f ef       	ldi	r16, 0xFF	; 255
 9ca:	1f ef       	ldi	r17, 0xFF	; 255
 9cc:	ee cf       	rjmp	.-36     	; 0x9aa <puts+0x1c>
 9ce:	8a e0       	ldi	r24, 0x0A	; 10
 9d0:	19 95       	eicall
 9d2:	89 2b       	or	r24, r25
 9d4:	11 f4       	brne	.+4      	; 0x9da <puts+0x4c>
 9d6:	c8 01       	movw	r24, r16
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <puts+0x50>
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	9f ef       	ldi	r25, 0xFF	; 255
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	1f 91       	pop	r17
 9e4:	0f 91       	pop	r16
 9e6:	08 95       	ret

000009e8 <calloc>:
 9e8:	0f 93       	push	r16
 9ea:	1f 93       	push	r17
 9ec:	cf 93       	push	r28
 9ee:	df 93       	push	r29
 9f0:	86 9f       	mul	r24, r22
 9f2:	80 01       	movw	r16, r0
 9f4:	87 9f       	mul	r24, r23
 9f6:	10 0d       	add	r17, r0
 9f8:	96 9f       	mul	r25, r22
 9fa:	10 0d       	add	r17, r0
 9fc:	11 24       	eor	r1, r1
 9fe:	c8 01       	movw	r24, r16
 a00:	0d d0       	rcall	.+26     	; 0xa1c <malloc>
 a02:	ec 01       	movw	r28, r24
 a04:	00 97       	sbiw	r24, 0x00	; 0
 a06:	21 f0       	breq	.+8      	; 0xa10 <calloc+0x28>
 a08:	a8 01       	movw	r20, r16
 a0a:	60 e0       	ldi	r22, 0x00	; 0
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	2d d1       	rcall	.+602    	; 0xc6a <memset>
 a10:	ce 01       	movw	r24, r28
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	1f 91       	pop	r17
 a18:	0f 91       	pop	r16
 a1a:	08 95       	ret

00000a1c <malloc>:
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	82 30       	cpi	r24, 0x02	; 2
 a22:	91 05       	cpc	r25, r1
 a24:	10 f4       	brcc	.+4      	; 0xa2a <malloc+0xe>
 a26:	82 e0       	ldi	r24, 0x02	; 2
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	e0 91 c5 02 	lds	r30, 0x02C5
 a2e:	f0 91 c6 02 	lds	r31, 0x02C6
 a32:	20 e0       	ldi	r18, 0x00	; 0
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	a0 e0       	ldi	r26, 0x00	; 0
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	30 97       	sbiw	r30, 0x00	; 0
 a3c:	39 f1       	breq	.+78     	; 0xa8c <malloc+0x70>
 a3e:	40 81       	ld	r20, Z
 a40:	51 81       	ldd	r21, Z+1	; 0x01
 a42:	48 17       	cp	r20, r24
 a44:	59 07       	cpc	r21, r25
 a46:	b8 f0       	brcs	.+46     	; 0xa76 <malloc+0x5a>
 a48:	48 17       	cp	r20, r24
 a4a:	59 07       	cpc	r21, r25
 a4c:	71 f4       	brne	.+28     	; 0xa6a <malloc+0x4e>
 a4e:	82 81       	ldd	r24, Z+2	; 0x02
 a50:	93 81       	ldd	r25, Z+3	; 0x03
 a52:	10 97       	sbiw	r26, 0x00	; 0
 a54:	29 f0       	breq	.+10     	; 0xa60 <malloc+0x44>
 a56:	13 96       	adiw	r26, 0x03	; 3
 a58:	9c 93       	st	X, r25
 a5a:	8e 93       	st	-X, r24
 a5c:	12 97       	sbiw	r26, 0x02	; 2
 a5e:	2c c0       	rjmp	.+88     	; 0xab8 <malloc+0x9c>
 a60:	90 93 c6 02 	sts	0x02C6, r25
 a64:	80 93 c5 02 	sts	0x02C5, r24
 a68:	27 c0       	rjmp	.+78     	; 0xab8 <malloc+0x9c>
 a6a:	21 15       	cp	r18, r1
 a6c:	31 05       	cpc	r19, r1
 a6e:	31 f0       	breq	.+12     	; 0xa7c <malloc+0x60>
 a70:	42 17       	cp	r20, r18
 a72:	53 07       	cpc	r21, r19
 a74:	18 f0       	brcs	.+6      	; 0xa7c <malloc+0x60>
 a76:	a9 01       	movw	r20, r18
 a78:	db 01       	movw	r26, r22
 a7a:	01 c0       	rjmp	.+2      	; 0xa7e <malloc+0x62>
 a7c:	ef 01       	movw	r28, r30
 a7e:	9a 01       	movw	r18, r20
 a80:	bd 01       	movw	r22, r26
 a82:	df 01       	movw	r26, r30
 a84:	02 80       	ldd	r0, Z+2	; 0x02
 a86:	f3 81       	ldd	r31, Z+3	; 0x03
 a88:	e0 2d       	mov	r30, r0
 a8a:	d7 cf       	rjmp	.-82     	; 0xa3a <malloc+0x1e>
 a8c:	21 15       	cp	r18, r1
 a8e:	31 05       	cpc	r19, r1
 a90:	f9 f0       	breq	.+62     	; 0xad0 <malloc+0xb4>
 a92:	28 1b       	sub	r18, r24
 a94:	39 0b       	sbc	r19, r25
 a96:	24 30       	cpi	r18, 0x04	; 4
 a98:	31 05       	cpc	r19, r1
 a9a:	80 f4       	brcc	.+32     	; 0xabc <malloc+0xa0>
 a9c:	8a 81       	ldd	r24, Y+2	; 0x02
 a9e:	9b 81       	ldd	r25, Y+3	; 0x03
 aa0:	61 15       	cp	r22, r1
 aa2:	71 05       	cpc	r23, r1
 aa4:	21 f0       	breq	.+8      	; 0xaae <malloc+0x92>
 aa6:	fb 01       	movw	r30, r22
 aa8:	93 83       	std	Z+3, r25	; 0x03
 aaa:	82 83       	std	Z+2, r24	; 0x02
 aac:	04 c0       	rjmp	.+8      	; 0xab6 <malloc+0x9a>
 aae:	90 93 c6 02 	sts	0x02C6, r25
 ab2:	80 93 c5 02 	sts	0x02C5, r24
 ab6:	fe 01       	movw	r30, r28
 ab8:	32 96       	adiw	r30, 0x02	; 2
 aba:	44 c0       	rjmp	.+136    	; 0xb44 <malloc+0x128>
 abc:	fe 01       	movw	r30, r28
 abe:	e2 0f       	add	r30, r18
 ac0:	f3 1f       	adc	r31, r19
 ac2:	81 93       	st	Z+, r24
 ac4:	91 93       	st	Z+, r25
 ac6:	22 50       	subi	r18, 0x02	; 2
 ac8:	31 09       	sbc	r19, r1
 aca:	39 83       	std	Y+1, r19	; 0x01
 acc:	28 83       	st	Y, r18
 ace:	3a c0       	rjmp	.+116    	; 0xb44 <malloc+0x128>
 ad0:	20 91 c3 02 	lds	r18, 0x02C3
 ad4:	30 91 c4 02 	lds	r19, 0x02C4
 ad8:	23 2b       	or	r18, r19
 ada:	41 f4       	brne	.+16     	; 0xaec <malloc+0xd0>
 adc:	20 91 02 02 	lds	r18, 0x0202
 ae0:	30 91 03 02 	lds	r19, 0x0203
 ae4:	30 93 c4 02 	sts	0x02C4, r19
 ae8:	20 93 c3 02 	sts	0x02C3, r18
 aec:	20 91 00 02 	lds	r18, 0x0200
 af0:	30 91 01 02 	lds	r19, 0x0201
 af4:	21 15       	cp	r18, r1
 af6:	31 05       	cpc	r19, r1
 af8:	41 f4       	brne	.+16     	; 0xb0a <malloc+0xee>
 afa:	2d b7       	in	r18, 0x3d	; 61
 afc:	3e b7       	in	r19, 0x3e	; 62
 afe:	40 91 04 02 	lds	r20, 0x0204
 b02:	50 91 05 02 	lds	r21, 0x0205
 b06:	24 1b       	sub	r18, r20
 b08:	35 0b       	sbc	r19, r21
 b0a:	e0 91 c3 02 	lds	r30, 0x02C3
 b0e:	f0 91 c4 02 	lds	r31, 0x02C4
 b12:	e2 17       	cp	r30, r18
 b14:	f3 07       	cpc	r31, r19
 b16:	a0 f4       	brcc	.+40     	; 0xb40 <malloc+0x124>
 b18:	2e 1b       	sub	r18, r30
 b1a:	3f 0b       	sbc	r19, r31
 b1c:	28 17       	cp	r18, r24
 b1e:	39 07       	cpc	r19, r25
 b20:	78 f0       	brcs	.+30     	; 0xb40 <malloc+0x124>
 b22:	ac 01       	movw	r20, r24
 b24:	4e 5f       	subi	r20, 0xFE	; 254
 b26:	5f 4f       	sbci	r21, 0xFF	; 255
 b28:	24 17       	cp	r18, r20
 b2a:	35 07       	cpc	r19, r21
 b2c:	48 f0       	brcs	.+18     	; 0xb40 <malloc+0x124>
 b2e:	4e 0f       	add	r20, r30
 b30:	5f 1f       	adc	r21, r31
 b32:	50 93 c4 02 	sts	0x02C4, r21
 b36:	40 93 c3 02 	sts	0x02C3, r20
 b3a:	81 93       	st	Z+, r24
 b3c:	91 93       	st	Z+, r25
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <malloc+0x128>
 b40:	e0 e0       	ldi	r30, 0x00	; 0
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	cf 01       	movw	r24, r30
 b46:	df 91       	pop	r29
 b48:	cf 91       	pop	r28
 b4a:	08 95       	ret

00000b4c <free>:
 b4c:	cf 93       	push	r28
 b4e:	df 93       	push	r29
 b50:	00 97       	sbiw	r24, 0x00	; 0
 b52:	09 f4       	brne	.+2      	; 0xb56 <free+0xa>
 b54:	87 c0       	rjmp	.+270    	; 0xc64 <free+0x118>
 b56:	fc 01       	movw	r30, r24
 b58:	32 97       	sbiw	r30, 0x02	; 2
 b5a:	13 82       	std	Z+3, r1	; 0x03
 b5c:	12 82       	std	Z+2, r1	; 0x02
 b5e:	c0 91 c5 02 	lds	r28, 0x02C5
 b62:	d0 91 c6 02 	lds	r29, 0x02C6
 b66:	20 97       	sbiw	r28, 0x00	; 0
 b68:	81 f4       	brne	.+32     	; 0xb8a <free+0x3e>
 b6a:	20 81       	ld	r18, Z
 b6c:	31 81       	ldd	r19, Z+1	; 0x01
 b6e:	28 0f       	add	r18, r24
 b70:	39 1f       	adc	r19, r25
 b72:	80 91 c3 02 	lds	r24, 0x02C3
 b76:	90 91 c4 02 	lds	r25, 0x02C4
 b7a:	82 17       	cp	r24, r18
 b7c:	93 07       	cpc	r25, r19
 b7e:	79 f5       	brne	.+94     	; 0xbde <free+0x92>
 b80:	f0 93 c4 02 	sts	0x02C4, r31
 b84:	e0 93 c3 02 	sts	0x02C3, r30
 b88:	6d c0       	rjmp	.+218    	; 0xc64 <free+0x118>
 b8a:	de 01       	movw	r26, r28
 b8c:	20 e0       	ldi	r18, 0x00	; 0
 b8e:	30 e0       	ldi	r19, 0x00	; 0
 b90:	ae 17       	cp	r26, r30
 b92:	bf 07       	cpc	r27, r31
 b94:	50 f4       	brcc	.+20     	; 0xbaa <free+0x5e>
 b96:	12 96       	adiw	r26, 0x02	; 2
 b98:	4d 91       	ld	r20, X+
 b9a:	5c 91       	ld	r21, X
 b9c:	13 97       	sbiw	r26, 0x03	; 3
 b9e:	9d 01       	movw	r18, r26
 ba0:	41 15       	cp	r20, r1
 ba2:	51 05       	cpc	r21, r1
 ba4:	09 f1       	breq	.+66     	; 0xbe8 <free+0x9c>
 ba6:	da 01       	movw	r26, r20
 ba8:	f3 cf       	rjmp	.-26     	; 0xb90 <free+0x44>
 baa:	b3 83       	std	Z+3, r27	; 0x03
 bac:	a2 83       	std	Z+2, r26	; 0x02
 bae:	40 81       	ld	r20, Z
 bb0:	51 81       	ldd	r21, Z+1	; 0x01
 bb2:	84 0f       	add	r24, r20
 bb4:	95 1f       	adc	r25, r21
 bb6:	8a 17       	cp	r24, r26
 bb8:	9b 07       	cpc	r25, r27
 bba:	71 f4       	brne	.+28     	; 0xbd8 <free+0x8c>
 bbc:	8d 91       	ld	r24, X+
 bbe:	9c 91       	ld	r25, X
 bc0:	11 97       	sbiw	r26, 0x01	; 1
 bc2:	84 0f       	add	r24, r20
 bc4:	95 1f       	adc	r25, r21
 bc6:	02 96       	adiw	r24, 0x02	; 2
 bc8:	91 83       	std	Z+1, r25	; 0x01
 bca:	80 83       	st	Z, r24
 bcc:	12 96       	adiw	r26, 0x02	; 2
 bce:	8d 91       	ld	r24, X+
 bd0:	9c 91       	ld	r25, X
 bd2:	13 97       	sbiw	r26, 0x03	; 3
 bd4:	93 83       	std	Z+3, r25	; 0x03
 bd6:	82 83       	std	Z+2, r24	; 0x02
 bd8:	21 15       	cp	r18, r1
 bda:	31 05       	cpc	r19, r1
 bdc:	29 f4       	brne	.+10     	; 0xbe8 <free+0x9c>
 bde:	f0 93 c6 02 	sts	0x02C6, r31
 be2:	e0 93 c5 02 	sts	0x02C5, r30
 be6:	3e c0       	rjmp	.+124    	; 0xc64 <free+0x118>
 be8:	d9 01       	movw	r26, r18
 bea:	13 96       	adiw	r26, 0x03	; 3
 bec:	fc 93       	st	X, r31
 bee:	ee 93       	st	-X, r30
 bf0:	12 97       	sbiw	r26, 0x02	; 2
 bf2:	4d 91       	ld	r20, X+
 bf4:	5d 91       	ld	r21, X+
 bf6:	a4 0f       	add	r26, r20
 bf8:	b5 1f       	adc	r27, r21
 bfa:	ea 17       	cp	r30, r26
 bfc:	fb 07       	cpc	r31, r27
 bfe:	79 f4       	brne	.+30     	; 0xc1e <free+0xd2>
 c00:	80 81       	ld	r24, Z
 c02:	91 81       	ldd	r25, Z+1	; 0x01
 c04:	84 0f       	add	r24, r20
 c06:	95 1f       	adc	r25, r21
 c08:	02 96       	adiw	r24, 0x02	; 2
 c0a:	d9 01       	movw	r26, r18
 c0c:	11 96       	adiw	r26, 0x01	; 1
 c0e:	9c 93       	st	X, r25
 c10:	8e 93       	st	-X, r24
 c12:	82 81       	ldd	r24, Z+2	; 0x02
 c14:	93 81       	ldd	r25, Z+3	; 0x03
 c16:	13 96       	adiw	r26, 0x03	; 3
 c18:	9c 93       	st	X, r25
 c1a:	8e 93       	st	-X, r24
 c1c:	12 97       	sbiw	r26, 0x02	; 2
 c1e:	e0 e0       	ldi	r30, 0x00	; 0
 c20:	f0 e0       	ldi	r31, 0x00	; 0
 c22:	8a 81       	ldd	r24, Y+2	; 0x02
 c24:	9b 81       	ldd	r25, Y+3	; 0x03
 c26:	00 97       	sbiw	r24, 0x00	; 0
 c28:	19 f0       	breq	.+6      	; 0xc30 <free+0xe4>
 c2a:	fe 01       	movw	r30, r28
 c2c:	ec 01       	movw	r28, r24
 c2e:	f9 cf       	rjmp	.-14     	; 0xc22 <free+0xd6>
 c30:	ce 01       	movw	r24, r28
 c32:	02 96       	adiw	r24, 0x02	; 2
 c34:	28 81       	ld	r18, Y
 c36:	39 81       	ldd	r19, Y+1	; 0x01
 c38:	82 0f       	add	r24, r18
 c3a:	93 1f       	adc	r25, r19
 c3c:	20 91 c3 02 	lds	r18, 0x02C3
 c40:	30 91 c4 02 	lds	r19, 0x02C4
 c44:	28 17       	cp	r18, r24
 c46:	39 07       	cpc	r19, r25
 c48:	69 f4       	brne	.+26     	; 0xc64 <free+0x118>
 c4a:	30 97       	sbiw	r30, 0x00	; 0
 c4c:	29 f4       	brne	.+10     	; 0xc58 <free+0x10c>
 c4e:	10 92 c6 02 	sts	0x02C6, r1
 c52:	10 92 c5 02 	sts	0x02C5, r1
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <free+0x110>
 c58:	13 82       	std	Z+3, r1	; 0x03
 c5a:	12 82       	std	Z+2, r1	; 0x02
 c5c:	d0 93 c4 02 	sts	0x02C4, r29
 c60:	c0 93 c3 02 	sts	0x02C3, r28
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	08 95       	ret

00000c6a <memset>:
 c6a:	dc 01       	movw	r26, r24
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <memset+0x6>
 c6e:	6d 93       	st	X+, r22
 c70:	41 50       	subi	r20, 0x01	; 1
 c72:	50 40       	sbci	r21, 0x00	; 0
 c74:	e0 f7       	brcc	.-8      	; 0xc6e <memset+0x4>
 c76:	08 95       	ret

00000c78 <_exit>:
 c78:	f8 94       	cli

00000c7a <__stop_program>:
 c7a:	ff cf       	rjmp	.-2      	; 0xc7a <__stop_program>
