
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800200  00001bee  00001c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  008002de  008002de  00001d60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000328  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000257a  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001364  00000000  00000000  0000465e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a43  00000000  00000000  000059c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000754  00000000  00000000  00007408  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000944  00000000  00000000  00007b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001460  00000000  00000000  000084a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000280  00000000  00000000  00009900  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c3       	rjmp	.+1584   	; 0x63e <__vector_3>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	91 c6       	rjmp	.+3362   	; 0xd3c <__vector_6>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0e c7       	rjmp	.+3612   	; 0xeaa <__vector_35>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	41 c5       	rjmp	.+2690   	; 0xb20 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ab 05       	cpc	r26, r11
      e6:	fd 05       	cpc	r31, r13
      e8:	fd 05       	cpc	r31, r13
      ea:	fd 05       	cpc	r31, r13
      ec:	fd 05       	cpc	r31, r13
      ee:	fd 05       	cpc	r31, r13
      f0:	fd 05       	cpc	r31, r13
      f2:	fd 05       	cpc	r31, r13
      f4:	ab 05       	cpc	r26, r11
      f6:	fd 05       	cpc	r31, r13
      f8:	fd 05       	cpc	r31, r13
      fa:	fd 05       	cpc	r31, r13
      fc:	fd 05       	cpc	r31, r13
      fe:	fd 05       	cpc	r31, r13
     100:	fd 05       	cpc	r31, r13
     102:	fd 05       	cpc	r31, r13
     104:	ad 05       	cpc	r26, r13
     106:	fd 05       	cpc	r31, r13
     108:	fd 05       	cpc	r31, r13
     10a:	fd 05       	cpc	r31, r13
     10c:	fd 05       	cpc	r31, r13
     10e:	fd 05       	cpc	r31, r13
     110:	fd 05       	cpc	r31, r13
     112:	fd 05       	cpc	r31, r13
     114:	fd 05       	cpc	r31, r13
     116:	fd 05       	cpc	r31, r13
     118:	fd 05       	cpc	r31, r13
     11a:	fd 05       	cpc	r31, r13
     11c:	fd 05       	cpc	r31, r13
     11e:	fd 05       	cpc	r31, r13
     120:	fd 05       	cpc	r31, r13
     122:	fd 05       	cpc	r31, r13
     124:	ad 05       	cpc	r26, r13
     126:	fd 05       	cpc	r31, r13
     128:	fd 05       	cpc	r31, r13
     12a:	fd 05       	cpc	r31, r13
     12c:	fd 05       	cpc	r31, r13
     12e:	fd 05       	cpc	r31, r13
     130:	fd 05       	cpc	r31, r13
     132:	fd 05       	cpc	r31, r13
     134:	fd 05       	cpc	r31, r13
     136:	fd 05       	cpc	r31, r13
     138:	fd 05       	cpc	r31, r13
     13a:	fd 05       	cpc	r31, r13
     13c:	fd 05       	cpc	r31, r13
     13e:	fd 05       	cpc	r31, r13
     140:	fd 05       	cpc	r31, r13
     142:	fd 05       	cpc	r31, r13
     144:	f9 05       	cpc	r31, r9
     146:	fd 05       	cpc	r31, r13
     148:	fd 05       	cpc	r31, r13
     14a:	fd 05       	cpc	r31, r13
     14c:	fd 05       	cpc	r31, r13
     14e:	fd 05       	cpc	r31, r13
     150:	fd 05       	cpc	r31, r13
     152:	fd 05       	cpc	r31, r13
     154:	d6 05       	cpc	r29, r6
     156:	fd 05       	cpc	r31, r13
     158:	fd 05       	cpc	r31, r13
     15a:	fd 05       	cpc	r31, r13
     15c:	fd 05       	cpc	r31, r13
     15e:	fd 05       	cpc	r31, r13
     160:	fd 05       	cpc	r31, r13
     162:	fd 05       	cpc	r31, r13
     164:	fd 05       	cpc	r31, r13
     166:	fd 05       	cpc	r31, r13
     168:	fd 05       	cpc	r31, r13
     16a:	fd 05       	cpc	r31, r13
     16c:	fd 05       	cpc	r31, r13
     16e:	fd 05       	cpc	r31, r13
     170:	fd 05       	cpc	r31, r13
     172:	fd 05       	cpc	r31, r13
     174:	ca 05       	cpc	r28, r10
     176:	fd 05       	cpc	r31, r13
     178:	fd 05       	cpc	r31, r13
     17a:	fd 05       	cpc	r31, r13
     17c:	fd 05       	cpc	r31, r13
     17e:	fd 05       	cpc	r31, r13
     180:	fd 05       	cpc	r31, r13
     182:	fd 05       	cpc	r31, r13
     184:	e8 05       	cpc	r30, r8

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ee ee       	ldi	r30, 0xEE	; 238
     19e:	fb e1       	ldi	r31, 0x1B	; 27
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ae 3d       	cpi	r26, 0xDE	; 222
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	ae ed       	ldi	r26, 0xDE	; 222
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a2 31       	cpi	r26, 0x12	; 18
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	03 d0       	rcall	.+6      	; 0x1c8 <main>
     1c2:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <main>:
#include "controller.h"
#include "../../../can_protocol.h"


int main(void)
{
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	66 97       	sbiw	r28, 0x16	; 22
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
     1dc:	87 e6       	ldi	r24, 0x67	; 103
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	34 d5       	rcall	.+2664   	; 0xc4a <UART_init>
	CAN_init();
     1e2:	38 d1       	rcall	.+624    	; 0x454 <CAN_init>
	IR_init();
     1e4:	68 d2       	rcall	.+1232   	; 0x6b6 <IR_init>
	SERVO_init();
     1e6:	f9 d3       	rcall	.+2034   	; 0x9da <SERVO_init>
	MOTOR_init();
     1e8:	b5 d3       	rcall	.+1898   	; 0x954 <MOTOR_init>
	SOLENOID_init();
     1ea:	49 d4       	rcall	.+2194   	; 0xa7e <SOLENOID_init>
	US_init();
     1ec:	88 d5       	rcall	.+2832   	; 0xcfe <US_init>

	struct can_message_t send_msg;
	struct can_message_t receive_msg;

	uint8_t ir_value = IR_read();
     1ee:	65 d2       	rcall	.+1226   	; 0x6ba <IR_read>
     1f0:	68 2e       	mov	r6, r24
	uint8_t old_ir_value = ir_value;

	int use_ultrasound = 0;
     1f2:	00 e0       	ldi	r16, 0x00	; 0
     1f4:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		ir_value = IR_read();
		if(ir_value != old_ir_value) {
			// Send score to node 1
			send_msg.id = NODE_2_ID;
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f3 e0       	ldi	r31, 0x03	; 3
     1fa:	af 2e       	mov	r10, r31
     1fc:	b1 2c       	mov	r11, r1
     1fe:	f0 2d       	mov	r31, r0
			send_msg.length = 1;
     200:	88 24       	eor	r8, r8
     202:	83 94       	inc	r8
	uint8_t old_ir_value = ir_value;

	int use_ultrasound = 0;

	while(1) {
		receive_msg = CAN_data_receive();
     204:	ce 01       	movw	r24, r28
     206:	0c 96       	adiw	r24, 0x0c	; 12
     208:	8e d1       	rcall	.+796    	; 0x526 <CAN_data_receive>
     20a:	2c 85       	ldd	r18, Y+12	; 0x0c
     20c:	3d 85       	ldd	r19, Y+13	; 0x0d
     20e:	8f 85       	ldd	r24, Y+15	; 0x0f

		if(receive_msg.id == GAME_MSG_ID) {
     210:	21 30       	cpi	r18, 0x01	; 1
     212:	31 05       	cpc	r19, r1
     214:	71 f4       	brne	.+28     	; 0x232 <main+0x6a>
			// Message is joystick data
			int8_t x = receive_msg.data[X_INDEX];
			int8_t click = receive_msg.data[CLICK_INDEX];
     216:	f9 88       	ldd	r15, Y+17	; 0x11
			SERVO_write(x);
     218:	eb d3       	rcall	.+2006   	; 0x9f0 <SERVO_write>
			SOLENOID_shoot(click);
     21a:	8f 2d       	mov	r24, r15
     21c:	32 d4       	rcall	.+2148   	; 0xa82 <SOLENOID_shoot>
			if(use_ultrasound == 0) {
     21e:	01 15       	cp	r16, r1
     220:	11 05       	cpc	r17, r1
     222:	89 f4       	brne	.+34     	; 0x246 <main+0x7e>
				uint8_t ref = receive_msg.data[RIGHT_INDEX]; // Use right slider position as reference
				CONTROLLER_set_reference(ref);
     224:	6b 89       	ldd	r22, Y+19	; 0x13
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	5b d7       	rcall	.+3766   	; 0x10e4 <__floatunsisf>
     22e:	6e d0       	rcall	.+220    	; 0x30c <CONTROLLER_set_reference>
     230:	2c c0       	rjmp	.+88     	; 0x28a <main+0xc2>
			}
		} else if(receive_msg.id == OPTIONS_MSG_ID) {
     232:	25 30       	cpi	r18, 0x05	; 5
     234:	31 05       	cpc	r19, r1
     236:	21 f4       	brne	.+8      	; 0x240 <main+0x78>
			use_ultrasound = receive_msg.data[ULTRASOUND_INDEX];
     238:	08 2f       	mov	r16, r24
     23a:	11 27       	eor	r17, r17
     23c:	07 fd       	sbrc	r16, 7
     23e:	10 95       	com	r17
		}
		
		if(use_ultrasound) {
     240:	01 15       	cp	r16, r1
     242:	11 05       	cpc	r17, r1
     244:	11 f1       	breq	.+68     	; 0x28a <main+0xc2>
			uint8_t ref = 0xFF * ((float)US_get_distance())/((float)US_max_distance());
     246:	34 d5       	rcall	.+2664   	; 0xcb0 <US_get_distance>
     248:	6c 01       	movw	r12, r24
     24a:	73 d5       	rcall	.+2790   	; 0xd32 <US_max_distance>
     24c:	7c 01       	movw	r14, r24
     24e:	b6 01       	movw	r22, r12
     250:	88 27       	eor	r24, r24
     252:	77 fd       	sbrc	r23, 7
     254:	80 95       	com	r24
     256:	98 2f       	mov	r25, r24
     258:	47 d7       	rcall	.+3726   	; 0x10e8 <__floatsisf>
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	4f e7       	ldi	r20, 0x7F	; 127
     260:	53 e4       	ldi	r21, 0x43	; 67
     262:	f6 d7       	rcall	.+4076   	; 0x1250 <__mulsf3>
     264:	1b 01       	movw	r2, r22
     266:	2c 01       	movw	r4, r24
     268:	b7 01       	movw	r22, r14
     26a:	88 27       	eor	r24, r24
     26c:	77 fd       	sbrc	r23, 7
     26e:	80 95       	com	r24
     270:	98 2f       	mov	r25, r24
     272:	3a d7       	rcall	.+3700   	; 0x10e8 <__floatsisf>
     274:	9b 01       	movw	r18, r22
     276:	ac 01       	movw	r20, r24
     278:	c2 01       	movw	r24, r4
     27a:	b1 01       	movw	r22, r2
     27c:	9a d6       	rcall	.+3380   	; 0xfb2 <__divsf3>
     27e:	06 d7       	rcall	.+3596   	; 0x108c <__fixunssfsi>
			CONTROLLER_set_reference(ref);
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	2e d7       	rcall	.+3676   	; 0x10e4 <__floatunsisf>
     288:	41 d0       	rcall	.+130    	; 0x30c <CONTROLLER_set_reference>
		}
		
		ir_value = IR_read();
     28a:	17 d2       	rcall	.+1070   	; 0x6ba <IR_read>
     28c:	98 2e       	mov	r9, r24
		if(ir_value != old_ir_value) {
     28e:	86 15       	cp	r24, r6
     290:	39 f0       	breq	.+14     	; 0x2a0 <main+0xd8>
			// Send score to node 1
			send_msg.id = NODE_2_ID;
     292:	ba 82       	std	Y+2, r11	; 0x02
     294:	a9 82       	std	Y+1, r10	; 0x01
			send_msg.length = 1;
     296:	8b 82       	std	Y+3, r8	; 0x03
			send_msg.data[IR_INDEX] = ir_value;
     298:	8c 83       	std	Y+4, r24	; 0x04
			CAN_message_send(&send_msg);
     29a:	ce 01       	movw	r24, r28
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	f3 d0       	rcall	.+486    	; 0x486 <CAN_message_send>
			old_ir_value = ir_value;
		}

		// Apply controller
		float encoder_value = 0xFF * ((float)MOTOR_read_encoder())/((float)MOTOR_max_encoder_value());
     2a0:	bd d2       	rcall	.+1402   	; 0x81c <MOTOR_read_encoder>
     2a2:	7c 01       	movw	r14, r24
     2a4:	a1 d2       	rcall	.+1346   	; 0x7e8 <MOTOR_max_encoder_value>
     2a6:	6c 01       	movw	r12, r24
     2a8:	b7 01       	movw	r22, r14
     2aa:	88 27       	eor	r24, r24
     2ac:	77 fd       	sbrc	r23, 7
     2ae:	80 95       	com	r24
     2b0:	98 2f       	mov	r25, r24
     2b2:	1a d7       	rcall	.+3636   	; 0x10e8 <__floatsisf>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	4f e7       	ldi	r20, 0x7F	; 127
     2ba:	53 e4       	ldi	r21, 0x43	; 67
     2bc:	c9 d7       	rcall	.+3986   	; 0x1250 <__mulsf3>
     2be:	2b 01       	movw	r4, r22
     2c0:	3c 01       	movw	r6, r24
     2c2:	b6 01       	movw	r22, r12
     2c4:	88 27       	eor	r24, r24
     2c6:	77 fd       	sbrc	r23, 7
     2c8:	80 95       	com	r24
     2ca:	98 2f       	mov	r25, r24
     2cc:	0d d7       	rcall	.+3610   	; 0x10e8 <__floatsisf>
     2ce:	9b 01       	movw	r18, r22
     2d0:	ac 01       	movw	r20, r24
     2d2:	c3 01       	movw	r24, r6
     2d4:	b2 01       	movw	r22, r4
     2d6:	6d d6       	rcall	.+3290   	; 0xfb2 <__divsf3>
		float vel = CONTROLLER_actuate(encoder_value);
     2d8:	22 d0       	rcall	.+68     	; 0x31e <CONTROLLER_actuate>
     2da:	6b 01       	movw	r12, r22
     2dc:	7c 01       	movw	r14, r24
		MOTOR_set_dir_right(vel > 0);
     2de:	68 2c       	mov	r6, r8
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	a9 01       	movw	r20, r18
     2e6:	b0 d7       	rcall	.+3936   	; 0x1248 <__gesf2>
     2e8:	18 16       	cp	r1, r24
     2ea:	0c f0       	brlt	.+2      	; 0x2ee <main+0x126>
     2ec:	61 2c       	mov	r6, r1
     2ee:	86 2d       	mov	r24, r6
     2f0:	87 d2       	rcall	.+1294   	; 0x800 <MOTOR_set_dir_right>
		MOTOR_set_velocity(vel);
     2f2:	c7 01       	movw	r24, r14
     2f4:	b6 01       	movw	r22, r12
     2f6:	ca d6       	rcall	.+3476   	; 0x108c <__fixunssfsi>
     2f8:	86 2f       	mov	r24, r22
     2fa:	7b d2       	rcall	.+1270   	; 0x7f2 <MOTOR_set_velocity>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fc:	8f e3       	ldi	r24, 0x3F	; 63
     2fe:	9c e9       	ldi	r25, 0x9C	; 156
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <main+0x138>
     304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x13e>
     306:	00 00       	nop
     308:	69 2c       	mov	r6, r9
     30a:	7c cf       	rjmp	.-264    	; 0x204 <main+0x3c>

0000030c <CONTROLLER_set_reference>:
float integral = 0.0;

volatile uint16_t* timer_source = &TCNT1;

void CONTROLLER_set_reference(float ref) {
	reference = ref;
     30c:	60 93 e6 02 	sts	0x02E6, r22
     310:	70 93 e7 02 	sts	0x02E7, r23
     314:	80 93 e8 02 	sts	0x02E8, r24
     318:	90 93 e9 02 	sts	0x02E9, r25
     31c:	08 95       	ret

0000031e <CONTROLLER_actuate>:
}

float CONTROLLER_actuate(float y) {
     31e:	4f 92       	push	r4
     320:	5f 92       	push	r5
     322:	6f 92       	push	r6
     324:	7f 92       	push	r7
     326:	8f 92       	push	r8
     328:	9f 92       	push	r9
     32a:	af 92       	push	r10
     32c:	bf 92       	push	r11
     32e:	cf 92       	push	r12
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	6b 01       	movw	r12, r22
     33c:	7c 01       	movw	r14, r24
	float dt = ((float)*timer_source)/(F_CPU);
     33e:	c0 91 06 02 	lds	r28, 0x0206
     342:	d0 91 07 02 	lds	r29, 0x0207
     346:	68 81       	ld	r22, Y
     348:	79 81       	ldd	r23, Y+1	; 0x01
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	ca d6       	rcall	.+3476   	; 0x10e4 <__floatunsisf>
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	34 e2       	ldi	r19, 0x24	; 36
     354:	44 e7       	ldi	r20, 0x74	; 116
     356:	5b e4       	ldi	r21, 0x4B	; 75
     358:	2c d6       	rcall	.+3160   	; 0xfb2 <__divsf3>
     35a:	2b 01       	movw	r4, r22
     35c:	3c 01       	movw	r6, r24
	*timer_source = 0;
     35e:	19 82       	std	Y+1, r1	; 0x01
     360:	18 82       	st	Y, r1
	
	float err = reference - y;
     362:	a7 01       	movw	r20, r14
     364:	96 01       	movw	r18, r12
     366:	60 91 e6 02 	lds	r22, 0x02E6
     36a:	70 91 e7 02 	lds	r23, 0x02E7
     36e:	80 91 e8 02 	lds	r24, 0x02E8
     372:	90 91 e9 02 	lds	r25, 0x02E9
     376:	b4 d5       	rcall	.+2920   	; 0xee0 <__subsf3>
     378:	6b 01       	movw	r12, r22
     37a:	7c 01       	movw	r14, r24
	
	integral += err * dt;
     37c:	a3 01       	movw	r20, r6
     37e:	92 01       	movw	r18, r4
     380:	67 d7       	rcall	.+3790   	; 0x1250 <__mulsf3>
     382:	20 91 de 02 	lds	r18, 0x02DE
     386:	30 91 df 02 	lds	r19, 0x02DF
     38a:	40 91 e0 02 	lds	r20, 0x02E0
     38e:	50 91 e1 02 	lds	r21, 0x02E1
     392:	a7 d5       	rcall	.+2894   	; 0xee2 <__addsf3>
     394:	4b 01       	movw	r8, r22
     396:	5c 01       	movw	r10, r24
     398:	60 93 de 02 	sts	0x02DE, r22
     39c:	70 93 df 02 	sts	0x02DF, r23
     3a0:	80 93 e0 02 	sts	0x02E0, r24
     3a4:	90 93 e1 02 	sts	0x02E1, r25

	float derivative = (err - prev_err)/dt;
     3a8:	20 91 e2 02 	lds	r18, 0x02E2
     3ac:	30 91 e3 02 	lds	r19, 0x02E3
     3b0:	40 91 e4 02 	lds	r20, 0x02E4
     3b4:	50 91 e5 02 	lds	r21, 0x02E5
     3b8:	c7 01       	movw	r24, r14
     3ba:	b6 01       	movw	r22, r12
     3bc:	91 d5       	rcall	.+2850   	; 0xee0 <__subsf3>
     3be:	a3 01       	movw	r20, r6
     3c0:	92 01       	movw	r18, r4
     3c2:	f7 d5       	rcall	.+3054   	; 0xfb2 <__divsf3>
     3c4:	2b 01       	movw	r4, r22
     3c6:	3c 01       	movw	r6, r24
	prev_err = err;	
     3c8:	c0 92 e2 02 	sts	0x02E2, r12
     3cc:	d0 92 e3 02 	sts	0x02E3, r13
     3d0:	e0 92 e4 02 	sts	0x02E4, r14
     3d4:	f0 92 e5 02 	sts	0x02E5, r15
	
	return Kp*err + Ki*integral + Kd*derivative;
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	5f e3       	ldi	r21, 0x3F	; 63
     3e0:	c5 01       	movw	r24, r10
     3e2:	b4 01       	movw	r22, r8
     3e4:	35 d7       	rcall	.+3690   	; 0x1250 <__mulsf3>
     3e6:	a7 01       	movw	r20, r14
     3e8:	96 01       	movw	r18, r12
     3ea:	7b d5       	rcall	.+2806   	; 0xee2 <__addsf3>
     3ec:	6b 01       	movw	r12, r22
     3ee:	7c 01       	movw	r14, r24
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	a9 01       	movw	r20, r18
     3f6:	c3 01       	movw	r24, r6
     3f8:	b2 01       	movw	r22, r4
     3fa:	2a d7       	rcall	.+3668   	; 0x1250 <__mulsf3>
     3fc:	9b 01       	movw	r18, r22
     3fe:	ac 01       	movw	r20, r24
     400:	c7 01       	movw	r24, r14
     402:	b6 01       	movw	r22, r12
     404:	6e d5       	rcall	.+2780   	; 0xee2 <__addsf3>
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	bf 90       	pop	r11
     414:	af 90       	pop	r10
     416:	9f 90       	pop	r9
     418:	8f 90       	pop	r8
     41a:	7f 90       	pop	r7
     41c:	6f 90       	pop	r6
     41e:	5f 90       	pop	r5
     420:	4f 90       	pop	r4
     422:	08 95       	ret

00000424 <ADC_init>:
     424:	ea e7       	ldi	r30, 0x7A	; 122
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	80 68       	ori	r24, 0x80	; 128
     42c:	80 83       	st	Z, r24
     42e:	80 81       	ld	r24, Z
     430:	87 60       	ori	r24, 0x07	; 7
     432:	80 83       	st	Z, r24
     434:	08 95       	ret

00000436 <ADC_read>:
     436:	8f 71       	andi	r24, 0x1F	; 31
     438:	80 66       	ori	r24, 0x60	; 96
     43a:	80 93 7c 00 	sts	0x007C, r24
     43e:	ea e7       	ldi	r30, 0x7A	; 122
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 83       	st	Z, r24
     448:	80 81       	ld	r24, Z
     44a:	86 fd       	sbrc	r24, 6
     44c:	fd cf       	rjmp	.-6      	; 0x448 <ADC_read+0x12>
     44e:	80 91 79 00 	lds	r24, 0x0079
     452:	08 95       	ret

00000454 <CAN_init>:
     454:	ab d1       	rcall	.+854    	; 0x7ac <MCP2515_init>
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	60 ee       	ldi	r22, 0xE0	; 224
     45a:	8f e0       	ldi	r24, 0x0F	; 15
     45c:	8a d1       	rcall	.+788    	; 0x772 <MCP2515_bit_modify>
     45e:	8e e0       	ldi	r24, 0x0E	; 14
     460:	49 d1       	rcall	.+658    	; 0x6f4 <MCP2515_read_data>
     462:	80 7e       	andi	r24, 0xE0	; 224
     464:	21 f0       	breq	.+8      	; 0x46e <CAN_init+0x1a>
     466:	84 e1       	ldi	r24, 0x14	; 20
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	b6 c7       	rjmp	.+3948   	; 0x13d8 <puts>
     46c:	08 95       	ret
     46e:	43 e2       	ldi	r20, 0x23	; 35
     470:	6f ef       	ldi	r22, 0xFF	; 255
     472:	8b e2       	ldi	r24, 0x2B	; 43
     474:	7e d1       	rcall	.+764    	; 0x772 <MCP2515_bit_modify>
     476:	e9 e6       	ldi	r30, 0x69	; 105
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	80 62       	ori	r24, 0x20	; 32
     47e:	80 83       	st	Z, r24
     480:	ea 9a       	sbi	0x1d, 2	; 29
     482:	78 94       	sei
     484:	08 95       	ret

00000486 <CAN_message_send>:
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	dc 01       	movw	r26, r24
     494:	0d b7       	in	r16, 0x3d	; 61
     496:	1e b7       	in	r17, 0x3e	; 62
     498:	12 96       	adiw	r26, 0x02	; 2
     49a:	4c 91       	ld	r20, X
     49c:	12 97       	sbiw	r26, 0x02	; 2
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	4b 5f       	subi	r20, 0xFB	; 251
     4a2:	5f 4f       	sbci	r21, 0xFF	; 255
     4a4:	8d b7       	in	r24, 0x3d	; 61
     4a6:	9e b7       	in	r25, 0x3e	; 62
     4a8:	84 1b       	sub	r24, r20
     4aa:	95 0b       	sbc	r25, r21
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	9e bf       	out	0x3e, r25	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	8d bf       	out	0x3d, r24	; 61
     4b6:	6d b7       	in	r22, 0x3d	; 61
     4b8:	7e b7       	in	r23, 0x3e	; 62
     4ba:	6f 5f       	subi	r22, 0xFF	; 255
     4bc:	7f 4f       	sbci	r23, 0xFF	; 255
     4be:	8d 91       	ld	r24, X+
     4c0:	9c 91       	ld	r25, X
     4c2:	11 97       	sbiw	r26, 0x01	; 1
     4c4:	96 95       	lsr	r25
     4c6:	87 95       	ror	r24
     4c8:	96 95       	lsr	r25
     4ca:	87 95       	ror	r24
     4cc:	96 95       	lsr	r25
     4ce:	87 95       	ror	r24
     4d0:	ed b7       	in	r30, 0x3d	; 61
     4d2:	fe b7       	in	r31, 0x3e	; 62
     4d4:	81 83       	std	Z+1, r24	; 0x01
     4d6:	8c 91       	ld	r24, X
     4d8:	82 95       	swap	r24
     4da:	88 0f       	add	r24, r24
     4dc:	80 7e       	andi	r24, 0xE0	; 224
     4de:	fb 01       	movw	r30, r22
     4e0:	81 83       	std	Z+1, r24	; 0x01
     4e2:	12 82       	std	Z+2, r1	; 0x02
     4e4:	13 82       	std	Z+3, r1	; 0x03
     4e6:	12 96       	adiw	r26, 0x02	; 2
     4e8:	8c 91       	ld	r24, X
     4ea:	12 97       	sbiw	r26, 0x02	; 2
     4ec:	84 83       	std	Z+4, r24	; 0x04
     4ee:	46 30       	cpi	r20, 0x06	; 6
     4f0:	51 05       	cpc	r21, r1
     4f2:	5c f0       	brlt	.+22     	; 0x50a <CAN_message_send+0x84>
     4f4:	13 96       	adiw	r26, 0x03	; 3
     4f6:	35 96       	adiw	r30, 0x05	; 5
     4f8:	25 e0       	ldi	r18, 0x05	; 5
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	8d 91       	ld	r24, X+
     4fe:	81 93       	st	Z+, r24
     500:	2f 5f       	subi	r18, 0xFF	; 255
     502:	3f 4f       	sbci	r19, 0xFF	; 255
     504:	24 17       	cp	r18, r20
     506:	35 07       	cpc	r19, r21
     508:	cc f3       	brlt	.-14     	; 0x4fc <CAN_message_send+0x76>
     50a:	81 e3       	ldi	r24, 0x31	; 49
     50c:	03 d1       	rcall	.+518    	; 0x714 <MCP2515_write_data>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	24 d1       	rcall	.+584    	; 0x75a <MCP2515_request_to_send>
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	1e bf       	out	0x3e, r17	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0d bf       	out	0x3d, r16	; 61
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	08 95       	ret

00000526 <CAN_data_receive>:
     526:	8f 92       	push	r8
     528:	9f 92       	push	r9
     52a:	af 92       	push	r10
     52c:	bf 92       	push	r11
     52e:	cf 92       	push	r12
     530:	df 92       	push	r13
     532:	ef 92       	push	r14
     534:	ff 92       	push	r15
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	2b 97       	sbiw	r28, 0x0b	; 11
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	7c 01       	movw	r14, r24
     550:	80 91 fc 02 	lds	r24, 0x02FC
     554:	88 23       	and	r24, r24
     556:	b1 f1       	breq	.+108    	; 0x5c4 <CAN_data_receive+0x9e>
     558:	81 e6       	ldi	r24, 0x61	; 97
     55a:	cc d0       	rcall	.+408    	; 0x6f4 <MCP2515_read_data>
     55c:	a8 2e       	mov	r10, r24
     55e:	82 e6       	ldi	r24, 0x62	; 98
     560:	c9 d0       	rcall	.+402    	; 0x6f4 <MCP2515_read_data>
     562:	82 95       	swap	r24
     564:	86 95       	lsr	r24
     566:	87 70       	andi	r24, 0x07	; 7
     568:	b1 2c       	mov	r11, r1
     56a:	aa 0c       	add	r10, r10
     56c:	bb 1c       	adc	r11, r11
     56e:	aa 0c       	add	r10, r10
     570:	bb 1c       	adc	r11, r11
     572:	aa 0c       	add	r10, r10
     574:	bb 1c       	adc	r11, r11
     576:	a8 2a       	or	r10, r24
     578:	85 e6       	ldi	r24, 0x65	; 101
     57a:	bc d0       	rcall	.+376    	; 0x6f4 <MCP2515_read_data>
     57c:	8f 70       	andi	r24, 0x0F	; 15
     57e:	88 2e       	mov	r8, r24
     580:	99 f0       	breq	.+38     	; 0x5a8 <CAN_data_receive+0x82>
     582:	8e 01       	movw	r16, r28
     584:	0c 5f       	subi	r16, 0xFC	; 252
     586:	1f 4f       	sbci	r17, 0xFF	; 255
     588:	68 01       	movw	r12, r16
     58a:	c8 0e       	add	r12, r24
     58c:	d1 1c       	adc	r13, r1
     58e:	0f 2e       	mov	r0, r31
     590:	f6 e6       	ldi	r31, 0x66	; 102
     592:	9f 2e       	mov	r9, r31
     594:	f0 2d       	mov	r31, r0
     596:	89 2d       	mov	r24, r9
     598:	ad d0       	rcall	.+346    	; 0x6f4 <MCP2515_read_data>
     59a:	f8 01       	movw	r30, r16
     59c:	81 93       	st	Z+, r24
     59e:	8f 01       	movw	r16, r30
     5a0:	93 94       	inc	r9
     5a2:	ec 15       	cp	r30, r12
     5a4:	fd 05       	cpc	r31, r13
     5a6:	b9 f7       	brne	.-18     	; 0x596 <CAN_data_receive+0x70>
     5a8:	10 92 fc 02 	sts	0x02FC, r1
     5ac:	ba 82       	std	Y+2, r11	; 0x02
     5ae:	a9 82       	std	Y+1, r10	; 0x01
     5b0:	8b 82       	std	Y+3, r8	; 0x03
     5b2:	8b e0       	ldi	r24, 0x0B	; 11
     5b4:	fe 01       	movw	r30, r28
     5b6:	31 96       	adiw	r30, 0x01	; 1
     5b8:	d7 01       	movw	r26, r14
     5ba:	01 90       	ld	r0, Z+
     5bc:	0d 92       	st	X+, r0
     5be:	8a 95       	dec	r24
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <CAN_data_receive+0x94>
     5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <CAN_data_receive+0xae>
     5c4:	8b e0       	ldi	r24, 0x0B	; 11
     5c6:	e8 e0       	ldi	r30, 0x08	; 8
     5c8:	f2 e0       	ldi	r31, 0x02	; 2
     5ca:	d7 01       	movw	r26, r14
     5cc:	01 90       	ld	r0, Z+
     5ce:	0d 92       	st	X+, r0
     5d0:	8a 95       	dec	r24
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <CAN_data_receive+0xa6>
     5d4:	c7 01       	movw	r24, r14
     5d6:	2b 96       	adiw	r28, 0x0b	; 11
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	bf 90       	pop	r11
     5f4:	af 90       	pop	r10
     5f6:	9f 90       	pop	r9
     5f8:	8f 90       	pop	r8
     5fa:	08 95       	ret

000005fc <CAN_error>:
     5fc:	cf 93       	push	r28
     5fe:	8d e2       	ldi	r24, 0x2D	; 45
     600:	79 d0       	rcall	.+242    	; 0x6f4 <MCP2515_read_data>
     602:	c8 2f       	mov	r28, r24
     604:	82 ff       	sbrs	r24, 2
     606:	03 c0       	rjmp	.+6      	; 0x60e <CAN_error+0x12>
     608:	8f e3       	ldi	r24, 0x3F	; 63
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	e5 d6       	rcall	.+3530   	; 0x13d8 <puts>
     60e:	c1 ff       	sbrs	r28, 1
     610:	03 c0       	rjmp	.+6      	; 0x618 <CAN_error+0x1c>
     612:	8d e5       	ldi	r24, 0x5D	; 93
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	e0 d6       	rcall	.+3520   	; 0x13d8 <puts>
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <CAN_int_vect>:
     61c:	cf 93       	push	r28
     61e:	8c e2       	ldi	r24, 0x2C	; 44
     620:	69 d0       	rcall	.+210    	; 0x6f4 <MCP2515_read_data>
     622:	c8 2f       	mov	r28, r24
     624:	85 fd       	sbrc	r24, 5
     626:	ea df       	rcall	.-44     	; 0x5fc <CAN_error>
     628:	c0 ff       	sbrs	r28, 0
     62a:	03 c0       	rjmp	.+6      	; 0x632 <CAN_int_vect+0x16>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	80 93 fc 02 	sts	0x02FC, r24
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	6f ef       	ldi	r22, 0xFF	; 255
     636:	8c e2       	ldi	r24, 0x2C	; 44
     638:	9c d0       	rcall	.+312    	; 0x772 <MCP2515_bit_modify>
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <__vector_3>:
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	0b b6       	in	r0, 0x3b	; 59
     64a:	0f 92       	push	r0
     64c:	2f 93       	push	r18
     64e:	3f 93       	push	r19
     650:	4f 93       	push	r20
     652:	5f 93       	push	r21
     654:	6f 93       	push	r22
     656:	7f 93       	push	r23
     658:	8f 93       	push	r24
     65a:	9f 93       	push	r25
     65c:	af 93       	push	r26
     65e:	bf 93       	push	r27
     660:	ef 93       	push	r30
     662:	ff 93       	push	r31
     664:	db df       	rcall	.-74     	; 0x61c <CAN_int_vect>
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	bf 91       	pop	r27
     66c:	af 91       	pop	r26
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	7f 91       	pop	r23
     674:	6f 91       	pop	r22
     676:	5f 91       	pop	r21
     678:	4f 91       	pop	r20
     67a:	3f 91       	pop	r19
     67c:	2f 91       	pop	r18
     67e:	0f 90       	pop	r0
     680:	0b be       	out	0x3b, r0	; 59
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <DAC_init>:
     68c:	1d c2       	rjmp	.+1082   	; 0xac8 <TWI_Master_Initialise>
     68e:	08 95       	ret

00000690 <DAC_write>:
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	00 d0       	rcall	.+0      	; 0x696 <DAC_write+0x6>
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	90 e5       	ldi	r25, 0x50	; 80
     69c:	99 83       	std	Y+1, r25	; 0x01
     69e:	1a 82       	std	Y+2, r1	; 0x02
     6a0:	8b 83       	std	Y+3, r24	; 0x03
     6a2:	63 e0       	ldi	r22, 0x03	; 3
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	19 d2       	rcall	.+1074   	; 0xadc <TWI_Start_Transceiver_With_Data>
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <IR_init>:
     6b6:	b6 ce       	rjmp	.-660    	; 0x424 <ADC_init>
     6b8:	08 95       	ret

000006ba <IR_read>:
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	bc de       	rcall	.-648    	; 0x436 <ADC_read>
     6be:	eb ee       	ldi	r30, 0xEB	; 235
     6c0:	f2 e0       	ldi	r31, 0x02	; 2
     6c2:	20 81       	ld	r18, Z
     6c4:	20 93 ea 02 	sts	0x02EA, r18
     6c8:	ac ee       	ldi	r26, 0xEC	; 236
     6ca:	b2 e0       	ldi	r27, 0x02	; 2
     6cc:	4c 91       	ld	r20, X
     6ce:	40 83       	st	Z, r20
     6d0:	ed ee       	ldi	r30, 0xED	; 237
     6d2:	f2 e0       	ldi	r31, 0x02	; 2
     6d4:	90 81       	ld	r25, Z
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	24 0f       	add	r18, r20
     6da:	31 1d       	adc	r19, r1
     6dc:	29 0f       	add	r18, r25
     6de:	31 1d       	adc	r19, r1
     6e0:	9c 93       	st	X, r25
     6e2:	80 83       	st	Z, r24
     6e4:	28 0f       	add	r18, r24
     6e6:	31 1d       	adc	r19, r1
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	28 3c       	cpi	r18, 0xC8	; 200
     6ec:	31 05       	cpc	r19, r1
     6ee:	08 f0       	brcs	.+2      	; 0x6f2 <IR_read+0x38>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	08 95       	ret

000006f4 <MCP2515_read_data>:
     6f4:	cf 93       	push	r28
     6f6:	c8 2f       	mov	r28, r24
     6f8:	f8 94       	cli
     6fa:	e2 d1       	rcall	.+964    	; 0xac0 <SPI_SS_low>
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	da d1       	rcall	.+948    	; 0xab4 <SPI_transcieve>
     700:	8c 2f       	mov	r24, r28
     702:	d8 d1       	rcall	.+944    	; 0xab4 <SPI_transcieve>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	d6 d1       	rcall	.+940    	; 0xab4 <SPI_transcieve>
     708:	c8 2f       	mov	r28, r24
     70a:	dc d1       	rcall	.+952    	; 0xac4 <SPI_SS_high>
     70c:	78 94       	sei
     70e:	8c 2f       	mov	r24, r28
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <MCP2515_write_data>:
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	c8 2f       	mov	r28, r24
     722:	7b 01       	movw	r14, r22
     724:	8a 01       	movw	r16, r20
     726:	f8 94       	cli
     728:	cb d1       	rcall	.+918    	; 0xac0 <SPI_SS_low>
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	c3 d1       	rcall	.+902    	; 0xab4 <SPI_transcieve>
     72e:	8c 2f       	mov	r24, r28
     730:	c1 d1       	rcall	.+898    	; 0xab4 <SPI_transcieve>
     732:	10 16       	cp	r1, r16
     734:	11 06       	cpc	r1, r17
     736:	44 f4       	brge	.+16     	; 0x748 <MCP2515_write_data+0x34>
     738:	e7 01       	movw	r28, r14
     73a:	0e 0d       	add	r16, r14
     73c:	1f 1d       	adc	r17, r15
     73e:	89 91       	ld	r24, Y+
     740:	b9 d1       	rcall	.+882    	; 0xab4 <SPI_transcieve>
     742:	c0 17       	cp	r28, r16
     744:	d1 07       	cpc	r29, r17
     746:	d9 f7       	brne	.-10     	; 0x73e <MCP2515_write_data+0x2a>
     748:	bd d1       	rcall	.+890    	; 0xac4 <SPI_SS_high>
     74a:	78 94       	sei
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	08 95       	ret

0000075a <MCP2515_request_to_send>:
     75a:	cf 93       	push	r28
     75c:	c8 2f       	mov	r28, r24
     75e:	f8 94       	cli
     760:	af d1       	rcall	.+862    	; 0xac0 <SPI_SS_low>
     762:	8c 2f       	mov	r24, r28
     764:	87 70       	andi	r24, 0x07	; 7
     766:	80 68       	ori	r24, 0x80	; 128
     768:	a5 d1       	rcall	.+842    	; 0xab4 <SPI_transcieve>
     76a:	ac d1       	rcall	.+856    	; 0xac4 <SPI_SS_high>
     76c:	78 94       	sei
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <MCP2515_bit_modify>:
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	18 2f       	mov	r17, r24
     77a:	d6 2f       	mov	r29, r22
     77c:	c4 2f       	mov	r28, r20
     77e:	f8 94       	cli
     780:	9f d1       	rcall	.+830    	; 0xac0 <SPI_SS_low>
     782:	85 e0       	ldi	r24, 0x05	; 5
     784:	97 d1       	rcall	.+814    	; 0xab4 <SPI_transcieve>
     786:	81 2f       	mov	r24, r17
     788:	95 d1       	rcall	.+810    	; 0xab4 <SPI_transcieve>
     78a:	8d 2f       	mov	r24, r29
     78c:	93 d1       	rcall	.+806    	; 0xab4 <SPI_transcieve>
     78e:	8c 2f       	mov	r24, r28
     790:	91 d1       	rcall	.+802    	; 0xab4 <SPI_transcieve>
     792:	98 d1       	rcall	.+816    	; 0xac4 <SPI_SS_high>
     794:	78 94       	sei
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	08 95       	ret

0000079e <MCP2515_reset>:
     79e:	f8 94       	cli
     7a0:	8f d1       	rcall	.+798    	; 0xac0 <SPI_SS_low>
     7a2:	80 ec       	ldi	r24, 0xC0	; 192
     7a4:	87 d1       	rcall	.+782    	; 0xab4 <SPI_transcieve>
     7a6:	8e d1       	rcall	.+796    	; 0xac4 <SPI_SS_high>
     7a8:	78 94       	sei
     7aa:	08 95       	ret

000007ac <MCP2515_init>:
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	1f 92       	push	r1
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	77 d1       	rcall	.+750    	; 0xaa6 <SPI_master_init>
     7b8:	f2 df       	rcall	.-28     	; 0x79e <MCP2515_reset>
     7ba:	8f e3       	ldi	r24, 0x3F	; 63
     7bc:	9c e9       	ldi	r25, 0x9C	; 156
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <MCP2515_init+0x12>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <MCP2515_init+0x18>
     7c4:	00 00       	nop
     7c6:	8e e0       	ldi	r24, 0x0E	; 14
     7c8:	95 df       	rcall	.-214    	; 0x6f4 <MCP2515_read_data>
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	80 7e       	andi	r24, 0xE0	; 224
     7d0:	80 38       	cpi	r24, 0x80	; 128
     7d2:	29 f0       	breq	.+10     	; 0x7de <MCP2515_init+0x32>
     7d4:	86 e7       	ldi	r24, 0x76	; 118
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	ff d5       	rcall	.+3070   	; 0x13d8 <puts>
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <MCP2515_init+0x34>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0f 90       	pop	r0
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <MOTOR_max_encoder_value>:
		if(byte & (1 << i)) {
			reversed_byte |= (1 << (7 - i));
		}
	}
	return reversed_byte;
}
     7e8:	80 91 fd 02 	lds	r24, 0x02FD
     7ec:	90 91 fe 02 	lds	r25, 0x02FE
     7f0:	08 95       	ret

000007f2 <MOTOR_set_velocity>:
     7f2:	80 37       	cpi	r24, 0x70	; 112
     7f4:	10 f4       	brcc	.+4      	; 0x7fa <MOTOR_set_velocity+0x8>
     7f6:	4c cf       	rjmp	.-360    	; 0x690 <DAC_write>
     7f8:	08 95       	ret
     7fa:	80 e7       	ldi	r24, 0x70	; 112
     7fc:	49 cf       	rjmp	.-366    	; 0x690 <DAC_write>
     7fe:	08 95       	ret

00000800 <MOTOR_set_dir_right>:
     800:	88 23       	and	r24, r24
     802:	31 f0       	breq	.+12     	; 0x810 <MOTOR_set_dir_right+0x10>
     804:	e2 e0       	ldi	r30, 0x02	; 2
     806:	f1 e0       	ldi	r31, 0x01	; 1
     808:	80 81       	ld	r24, Z
     80a:	82 60       	ori	r24, 0x02	; 2
     80c:	80 83       	st	Z, r24
     80e:	08 95       	ret
     810:	e2 e0       	ldi	r30, 0x02	; 2
     812:	f1 e0       	ldi	r31, 0x01	; 1
     814:	80 81       	ld	r24, Z
     816:	8d 7f       	andi	r24, 0xFD	; 253
     818:	80 83       	st	Z, r24
     81a:	08 95       	ret

0000081c <MOTOR_read_encoder>:

int16_t MOTOR_read_encoder() {
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	1f 92       	push	r1
     822:	1f 92       	push	r1
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t encoder_value = 0;
     828:	1a 82       	std	Y+2, r1	; 0x02
     82a:	19 82       	std	Y+1, r1	; 0x01

	MJ1_PORT &= ~(1 << OE); // Set !OE low to enable output of encoder
     82c:	e2 e0       	ldi	r30, 0x02	; 2
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	80 81       	ld	r24, Z
     832:	8f 7d       	andi	r24, 0xDF	; 223
     834:	80 83       	st	Z, r24

	MJ1_PORT |= (1 << SEL); // Set SEL low to get low byte
     836:	80 81       	ld	r24, Z
     838:	88 60       	ori	r24, 0x08	; 8
     83a:	80 83       	st	Z, r24
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	89 ef       	ldi	r24, 0xF9	; 249
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	21 50       	subi	r18, 0x01	; 1
     844:	80 40       	sbci	r24, 0x00	; 0
     846:	90 40       	sbci	r25, 0x00	; 0
     848:	e1 f7       	brne	.-8      	; 0x842 <MOTOR_read_encoder+0x26>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <MOTOR_read_encoder+0x30>
     84c:	00 00       	nop
	_delay_ms(20);
	encoder_value |= (MJ2_DATA << 0);
     84e:	20 91 06 01 	lds	r18, 0x0106
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	82 2b       	or	r24, r18
     858:	9a 83       	std	Y+2, r25	; 0x02
     85a:	89 83       	std	Y+1, r24	; 0x01

	MJ1_PORT &= ~(1 << SEL); // Set SEL high to get high byte
     85c:	80 81       	ld	r24, Z
     85e:	87 7f       	andi	r24, 0xF7	; 247
     860:	80 83       	st	Z, r24
     862:	2f ef       	ldi	r18, 0xFF	; 255
     864:	89 ef       	ldi	r24, 0xF9	; 249
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	21 50       	subi	r18, 0x01	; 1
     86a:	80 40       	sbci	r24, 0x00	; 0
     86c:	90 40       	sbci	r25, 0x00	; 0
     86e:	e1 f7       	brne	.-8      	; 0x868 <MOTOR_read_encoder+0x4c>
     870:	00 c0       	rjmp	.+0      	; 0x872 <MOTOR_read_encoder+0x56>
     872:	00 00       	nop
	_delay_ms(20);
	encoder_value |= (MJ2_DATA << 8);
     874:	20 91 06 01 	lds	r18, 0x0106
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	92 2b       	or	r25, r18
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	89 83       	std	Y+1, r24	; 0x01

	MJ1_PORT |= (1 << OE); // Set !OE high to disable output of encoder
     882:	80 81       	ld	r24, Z
     884:	80 62       	ori	r24, 0x20	; 32
     886:	80 83       	st	Z, r24
	
	// Return negative of encoder value as we want right to be the positive direction
	return -encoder_value;
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	91 95       	neg	r25
     88e:	81 95       	neg	r24
     890:	91 09       	sbc	r25, r1
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <MOTOR_calibrate>:
	
	MOTOR_calibrate();
}

void MOTOR_calibrate() {
	MOTOR_set_dir_right(0);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	b0 df       	rcall	.-160    	; 0x800 <MOTOR_set_dir_right>
}

void MOTOR_set_velocity(uint8_t vel) {
	vel < max_velocity ?
		DAC_write(vel) :
		DAC_write(max_velocity);
     8a0:	80 e7       	ldi	r24, 0x70	; 112
     8a2:	f6 de       	rcall	.-532    	; 0x690 <DAC_write>
     8a4:	2f ef       	ldi	r18, 0xFF	; 255
     8a6:	8b e7       	ldi	r24, 0x7B	; 123
     8a8:	92 e9       	ldi	r25, 0x92	; 146
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	80 40       	sbci	r24, 0x00	; 0
     8ae:	90 40       	sbci	r25, 0x00	; 0
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <MOTOR_calibrate+0xe>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <MOTOR_calibrate+0x18>
     8b4:	00 00       	nop
	return max_encoder_value;
}

void MOTOR_set_velocity(uint8_t vel) {
	vel < max_velocity ?
		DAC_write(vel) :
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	eb de       	rcall	.-554    	; 0x690 <DAC_write>
     8ba:	2f ef       	ldi	r18, 0xFF	; 255
     8bc:	89 ef       	ldi	r24, 0xF9	; 249
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	21 50       	subi	r18, 0x01	; 1
     8c2:	80 40       	sbci	r24, 0x00	; 0
     8c4:	90 40       	sbci	r25, 0x00	; 0
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <MOTOR_calibrate+0x24>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <MOTOR_calibrate+0x2e>
     8ca:	00 00       	nop
	_delay_ms(3000);
	MOTOR_set_velocity(0);
	_delay_ms(20);
	
	// Toggle !RST to reset encoder
	MJ1_PORT &= ~(1 << RST);
     8cc:	e2 e0       	ldi	r30, 0x02	; 2
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	80 81       	ld	r24, Z
     8d2:	8f 7b       	andi	r24, 0xBF	; 191
     8d4:	80 83       	st	Z, r24
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	89 ef       	ldi	r24, 0xF9	; 249
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	21 50       	subi	r18, 0x01	; 1
     8de:	80 40       	sbci	r24, 0x00	; 0
     8e0:	90 40       	sbci	r25, 0x00	; 0
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <MOTOR_calibrate+0x40>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <MOTOR_calibrate+0x4a>
     8e6:	00 00       	nop
	_delay_ms(20);
	MJ1_PORT |= (1 << RST);
     8e8:	80 81       	ld	r24, Z
     8ea:	80 64       	ori	r24, 0x40	; 64
     8ec:	80 83       	st	Z, r24
	
	printf("Encoder min: %d\n", MOTOR_read_encoder());
     8ee:	96 df       	rcall	.-212    	; 0x81c <MOTOR_read_encoder>
     8f0:	9f 93       	push	r25
     8f2:	8f 93       	push	r24
     8f4:	88 ea       	ldi	r24, 0xA8	; 168
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	9f 93       	push	r25
     8fa:	8f 93       	push	r24
     8fc:	5c d5       	rcall	.+2744   	; 0x13b6 <printf>
	
	MOTOR_set_dir_right(1);
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	7f df       	rcall	.-258    	; 0x800 <MOTOR_set_dir_right>
}

void MOTOR_set_velocity(uint8_t vel) {
	vel < max_velocity ?
		DAC_write(vel) :
		DAC_write(max_velocity);
     902:	80 e7       	ldi	r24, 0x70	; 112
     904:	c5 de       	rcall	.-630    	; 0x690 <DAC_write>
     906:	2f ef       	ldi	r18, 0xFF	; 255
     908:	8b e7       	ldi	r24, 0x7B	; 123
     90a:	92 e9       	ldi	r25, 0x92	; 146
     90c:	21 50       	subi	r18, 0x01	; 1
     90e:	80 40       	sbci	r24, 0x00	; 0
     910:	90 40       	sbci	r25, 0x00	; 0
     912:	e1 f7       	brne	.-8      	; 0x90c <MOTOR_calibrate+0x70>
     914:	00 c0       	rjmp	.+0      	; 0x916 <MOTOR_calibrate+0x7a>
     916:	00 00       	nop
	
	MOTOR_set_dir_right(1);
	MOTOR_set_velocity(max_velocity);
	_delay_ms(3000);

	max_encoder_value = MOTOR_read_encoder();
     918:	81 df       	rcall	.-254    	; 0x81c <MOTOR_read_encoder>
     91a:	80 93 fd 02 	sts	0x02FD, r24
     91e:	90 93 fe 02 	sts	0x02FE, r25
	
	printf("Encoder max: %d\n", max_encoder_value);
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	89 eb       	ldi	r24, 0xB9	; 185
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	9f 93       	push	r25
     92c:	8f 93       	push	r24
     92e:	43 d5       	rcall	.+2694   	; 0x13b6 <printf>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	83 ed       	ldi	r24, 0xD3	; 211
     934:	90 e3       	ldi	r25, 0x30	; 48
     936:	21 50       	subi	r18, 0x01	; 1
     938:	80 40       	sbci	r24, 0x00	; 0
     93a:	90 40       	sbci	r25, 0x00	; 0
     93c:	e1 f7       	brne	.-8      	; 0x936 <MOTOR_calibrate+0x9a>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <MOTOR_calibrate+0xa4>
     940:	00 00       	nop
     942:	8d b7       	in	r24, 0x3d	; 61
     944:	9e b7       	in	r25, 0x3e	; 62
     946:	08 96       	adiw	r24, 0x08	; 8
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	9e bf       	out	0x3e, r25	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	8d bf       	out	0x3d, r24	; 61
     952:	08 95       	ret

00000954 <MOTOR_init>:
const uint8_t max_velocity = 0x70;

int16_t max_encoder_value;

void MOTOR_init() {
	DAC_init();
     954:	9b de       	rcall	.-714    	; 0x68c <DAC_init>
	// Set MJ1_PORT to input
	MJ1_DDR		|= (1 << DIR) | (1 << EN) | (1 << SEL) | (1 << OE) | (1 << RST);
     956:	e1 e0       	ldi	r30, 0x01	; 1
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	80 81       	ld	r24, Z
     95c:	8a 67       	ori	r24, 0x7A	; 122
     95e:	80 83       	st	Z, r24
	// Set MJ2_PORT to output
	MJ2_DDR		= 0x00;
     960:	10 92 07 01 	sts	0x0107, r1
	// Enable motor and set direction to 1
	MJ1_PORT	|= (1 << EN) | (1 << DIR);
     964:	e2 e0       	ldi	r30, 0x02	; 2
     966:	f1 e0       	ldi	r31, 0x01	; 1
     968:	80 81       	ld	r24, Z
     96a:	82 61       	ori	r24, 0x12	; 18
     96c:	80 83       	st	Z, r24
	// Toggle !RST to reset encoder
	MJ1_PORT &= ~(1 << RST); 
     96e:	80 81       	ld	r24, Z
     970:	8f 7b       	andi	r24, 0xBF	; 191
     972:	80 83       	st	Z, r24
     974:	2f ef       	ldi	r18, 0xFF	; 255
     976:	89 ef       	ldi	r24, 0xF9	; 249
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	21 50       	subi	r18, 0x01	; 1
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	90 40       	sbci	r25, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <MOTOR_init+0x26>
     982:	00 c0       	rjmp	.+0      	; 0x984 <MOTOR_init+0x30>
     984:	00 00       	nop
	_delay_ms(20);
	MJ1_PORT |= (1 << RST);
     986:	80 81       	ld	r24, Z
     988:	80 64       	ori	r24, 0x40	; 64
     98a:	80 83       	st	Z, r24
	
	MOTOR_calibrate();
     98c:	87 cf       	rjmp	.-242    	; 0x89c <MOTOR_calibrate>
     98e:	08 95       	ret

00000990 <PWM_set_period>:
     990:	a0 e8       	ldi	r26, 0x80	; 128
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	22 e0       	ldi	r18, 0x02	; 2
     996:	2c 93       	st	X, r18
     998:	e1 e8       	ldi	r30, 0x81	; 129
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	28 e1       	ldi	r18, 0x18	; 24
     99e:	20 83       	st	Z, r18
     9a0:	2c 91       	ld	r18, X
     9a2:	20 68       	ori	r18, 0x80	; 128
     9a4:	2c 93       	st	X, r18
     9a6:	20 81       	ld	r18, Z
     9a8:	23 60       	ori	r18, 0x03	; 3
     9aa:	20 83       	st	Z, r18
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	4a e7       	ldi	r20, 0x7A	; 122
     9b2:	53 e4       	ldi	r21, 0x43	; 67
     9b4:	4d d4       	rcall	.+2202   	; 0x1250 <__mulsf3>
     9b6:	6a d3       	rcall	.+1748   	; 0x108c <__fixunssfsi>
     9b8:	70 93 87 00 	sts	0x0087, r23
     9bc:	60 93 86 00 	sts	0x0086, r22
     9c0:	25 9a       	sbi	0x04, 5	; 4
     9c2:	08 95       	ret

000009c4 <PWM_set_pulse_width>:
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	4a e7       	ldi	r20, 0x7A	; 122
     9ca:	53 e4       	ldi	r21, 0x43	; 67
     9cc:	41 d4       	rcall	.+2178   	; 0x1250 <__mulsf3>
     9ce:	5e d3       	rcall	.+1724   	; 0x108c <__fixunssfsi>
     9d0:	70 93 89 00 	sts	0x0089, r23
     9d4:	60 93 88 00 	sts	0x0088, r22
     9d8:	08 95       	ret

000009da <SERVO_init>:

const float min = 0.9;
const float max = 2.1;

void SERVO_init() {
	PWM_set_period(20.0f);
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 ea       	ldi	r24, 0xA0	; 160
     9e0:	91 e4       	ldi	r25, 0x41	; 65
     9e2:	d6 df       	rcall	.-84     	; 0x990 <PWM_set_period>
		pulse_width = max;
	}
	if(pulse_width < min) {
		pulse_width = min;
	}
	PWM_set_pulse_width(pulse_width);
     9e4:	67 ed       	ldi	r22, 0xD7	; 215
     9e6:	73 ea       	ldi	r23, 0xA3	; 163
     9e8:	80 ec       	ldi	r24, 0xC0	; 192
     9ea:	9f e3       	ldi	r25, 0x3F	; 63
     9ec:	eb cf       	rjmp	.-42     	; 0x9c4 <PWM_set_pulse_width>
     9ee:	08 95       	ret

000009f0 <SERVO_write>:
void SERVO_init() {
	PWM_set_period(20.0f);
	SERVO_write((max + min)/2);
}

void SERVO_write(int8_t value) {
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
	float pulse_width = value/100.0f * 0.5f + (max + min)/2;
     9f8:	68 2f       	mov	r22, r24
     9fa:	77 27       	eor	r23, r23
     9fc:	67 fd       	sbrc	r22, 7
     9fe:	70 95       	com	r23
     a00:	87 2f       	mov	r24, r23
     a02:	97 2f       	mov	r25, r23
     a04:	71 d3       	rcall	.+1762   	; 0x10e8 <__floatsisf>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	48 ec       	ldi	r20, 0xC8	; 200
     a0c:	52 e4       	ldi	r21, 0x42	; 66
     a0e:	d1 d2       	rcall	.+1442   	; 0xfb2 <__divsf3>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	5f e3       	ldi	r21, 0x3F	; 63
     a18:	1b d4       	rcall	.+2102   	; 0x1250 <__mulsf3>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 ec       	ldi	r20, 0xC0	; 192
     a20:	5f e3       	ldi	r21, 0x3F	; 63
     a22:	5f d2       	rcall	.+1214   	; 0xee2 <__addsf3>
     a24:	6b 01       	movw	r12, r22
     a26:	7c 01       	movw	r14, r24
	if(pulse_width > max) {
     a28:	26 e6       	ldi	r18, 0x66	; 102
     a2a:	36 e6       	ldi	r19, 0x66	; 102
     a2c:	46 e0       	ldi	r20, 0x06	; 6
     a2e:	50 e4       	ldi	r21, 0x40	; 64
     a30:	0b d4       	rcall	.+2070   	; 0x1248 <__gesf2>
     a32:	18 16       	cp	r1, r24
     a34:	54 f0       	brlt	.+20     	; 0xa4a <SERVO_write+0x5a>
		pulse_width = max;
	}
	if(pulse_width < min) {
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	5f e3       	ldi	r21, 0x3F	; 63
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	b3 d2       	rcall	.+1382   	; 0xfaa <__cmpsf2>
     a44:	88 23       	and	r24, r24
     a46:	5c f0       	brlt	.+22     	; 0xa5e <SERVO_write+0x6e>
     a48:	12 c0       	rjmp	.+36     	; 0xa6e <SERVO_write+0x7e>
}

void SERVO_write(int8_t value) {
	float pulse_width = value/100.0f * 0.5f + (max + min)/2;
	if(pulse_width > max) {
		pulse_width = max;
     a4a:	0f 2e       	mov	r0, r31
     a4c:	f6 e6       	ldi	r31, 0x66	; 102
     a4e:	cf 2e       	mov	r12, r31
     a50:	dc 2c       	mov	r13, r12
     a52:	f6 e0       	ldi	r31, 0x06	; 6
     a54:	ef 2e       	mov	r14, r31
     a56:	f0 e4       	ldi	r31, 0x40	; 64
     a58:	ff 2e       	mov	r15, r31
     a5a:	f0 2d       	mov	r31, r0
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <SERVO_write+0x7e>
	}
	if(pulse_width < min) {
		pulse_width = min;
     a5e:	0f 2e       	mov	r0, r31
     a60:	f6 e6       	ldi	r31, 0x66	; 102
     a62:	cf 2e       	mov	r12, r31
     a64:	dc 2c       	mov	r13, r12
     a66:	ec 2c       	mov	r14, r12
     a68:	ff e3       	ldi	r31, 0x3F	; 63
     a6a:	ff 2e       	mov	r15, r31
     a6c:	f0 2d       	mov	r31, r0
	}
	PWM_set_pulse_width(pulse_width);
     a6e:	c7 01       	movw	r24, r14
     a70:	b6 01       	movw	r22, r12
     a72:	a8 df       	rcall	.-176    	; 0x9c4 <PWM_set_pulse_width>
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	cf 90       	pop	r12
     a7c:	08 95       	ret

00000a7e <SOLENOID_init>:
#include <util/delay.h>

#include "solenoid.h"

void SOLENOID_init() {
	SOLENOID_DDR |= (1 << SOLENOID_PIN);
     a7e:	6c 9a       	sbi	0x0d, 4	; 13
     a80:	08 95       	ret

00000a82 <SOLENOID_shoot>:
}

void SOLENOID_shoot(uint8_t enable) {
	static uint8_t enabled = 0;
	if(enable != enabled) {
     a82:	90 91 ee 02 	lds	r25, 0x02EE
     a86:	89 17       	cp	r24, r25
     a88:	69 f0       	breq	.+26     	; 0xaa4 <SOLENOID_shoot+0x22>
		if(enable) {
     a8a:	88 23       	and	r24, r24
     a8c:	11 f0       	breq	.+4      	; 0xa92 <SOLENOID_shoot+0x10>
			SOLENOID_PORT &= ~(1 << SOLENOID_PIN);
     a8e:	74 98       	cbi	0x0e, 4	; 14
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <SOLENOID_shoot+0x12>
		} else {
			SOLENOID_PORT |= (1 << SOLENOID_PIN);
     a92:	74 9a       	sbi	0x0e, 4	; 14
     a94:	ef e3       	ldi	r30, 0x3F	; 63
     a96:	fc e9       	ldi	r31, 0x9C	; 156
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <SOLENOID_shoot+0x16>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <SOLENOID_shoot+0x1c>
     a9e:	00 00       	nop
		}
		_delay_ms(10);
		enabled = enable;
     aa0:	80 93 ee 02 	sts	0x02EE, r24
     aa4:	08 95       	ret

00000aa6 <SPI_master_init>:
     aa6:	87 e8       	ldi	r24, 0x87	; 135
     aa8:	84 b9       	out	0x04, r24	; 4
     aaa:	28 9a       	sbi	0x05, 0	; 5
     aac:	8c b5       	in	r24, 0x2c	; 44
     aae:	81 65       	ori	r24, 0x51	; 81
     ab0:	8c bd       	out	0x2c, r24	; 44
     ab2:	08 95       	ret

00000ab4 <SPI_transcieve>:
     ab4:	8e bd       	out	0x2e, r24	; 46
     ab6:	0d b4       	in	r0, 0x2d	; 45
     ab8:	07 fe       	sbrs	r0, 7
     aba:	fd cf       	rjmp	.-6      	; 0xab6 <SPI_transcieve+0x2>
     abc:	8e b5       	in	r24, 0x2e	; 46
     abe:	08 95       	ret

00000ac0 <SPI_SS_low>:
     ac0:	2f 98       	cbi	0x05, 7	; 5
     ac2:	08 95       	ret

00000ac4 <SPI_SS_high>:
     ac4:	2f 9a       	sbi	0x05, 7	; 5
     ac6:	08 95       	ret

00000ac8 <TWI_Master_Initialise>:
     ac8:	8c e0       	ldi	r24, 0x0C	; 12
     aca:	80 93 b8 00 	sts	0x00B8, r24
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	80 93 bb 00 	sts	0x00BB, r24
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	80 93 bc 00 	sts	0x00BC, r24
     ada:	08 95       	ret

00000adc <TWI_Start_Transceiver_With_Data>:
     adc:	ec eb       	ldi	r30, 0xBC	; 188
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	20 81       	ld	r18, Z
     ae2:	20 fd       	sbrc	r18, 0
     ae4:	fd cf       	rjmp	.-6      	; 0xae0 <TWI_Start_Transceiver_With_Data+0x4>
     ae6:	60 93 f1 02 	sts	0x02F1, r22
     aea:	fc 01       	movw	r30, r24
     aec:	20 81       	ld	r18, Z
     aee:	20 93 f2 02 	sts	0x02F2, r18
     af2:	20 fd       	sbrc	r18, 0
     af4:	0c c0       	rjmp	.+24     	; 0xb0e <TWI_Start_Transceiver_With_Data+0x32>
     af6:	62 30       	cpi	r22, 0x02	; 2
     af8:	50 f0       	brcs	.+20     	; 0xb0e <TWI_Start_Transceiver_With_Data+0x32>
     afa:	dc 01       	movw	r26, r24
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	e3 ef       	ldi	r30, 0xF3	; 243
     b00:	f2 e0       	ldi	r31, 0x02	; 2
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	9d 91       	ld	r25, X+
     b06:	91 93       	st	Z+, r25
     b08:	8f 5f       	subi	r24, 0xFF	; 255
     b0a:	86 13       	cpse	r24, r22
     b0c:	fb cf       	rjmp	.-10     	; 0xb04 <TWI_Start_Transceiver_With_Data+0x28>
     b0e:	10 92 f0 02 	sts	0x02F0, r1
     b12:	88 ef       	ldi	r24, 0xF8	; 248
     b14:	80 93 13 02 	sts	0x0213, r24
     b18:	85 ea       	ldi	r24, 0xA5	; 165
     b1a:	80 93 bc 00 	sts	0x00BC, r24
     b1e:	08 95       	ret

00000b20 <__vector_39>:
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	0b b6       	in	r0, 0x3b	; 59
     b2c:	0f 92       	push	r0
     b2e:	2f 93       	push	r18
     b30:	3f 93       	push	r19
     b32:	8f 93       	push	r24
     b34:	9f 93       	push	r25
     b36:	af 93       	push	r26
     b38:	bf 93       	push	r27
     b3a:	ef 93       	push	r30
     b3c:	ff 93       	push	r31
     b3e:	80 91 b9 00 	lds	r24, 0x00B9
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	fc 01       	movw	r30, r24
     b46:	38 97       	sbiw	r30, 0x08	; 8
     b48:	e1 35       	cpi	r30, 0x51	; 81
     b4a:	f1 05       	cpc	r31, r1
     b4c:	08 f0       	brcs	.+2      	; 0xb50 <__vector_39+0x30>
     b4e:	55 c0       	rjmp	.+170    	; 0xbfa <__vector_39+0xda>
     b50:	ee 58       	subi	r30, 0x8E	; 142
     b52:	ff 4f       	sbci	r31, 0xFF	; 255
     b54:	e0 c3       	rjmp	.+1984   	; 0x1316 <__tablejump2__>
     b56:	10 92 ef 02 	sts	0x02EF, r1
     b5a:	e0 91 ef 02 	lds	r30, 0x02EF
     b5e:	80 91 f1 02 	lds	r24, 0x02F1
     b62:	e8 17       	cp	r30, r24
     b64:	70 f4       	brcc	.+28     	; 0xb82 <__vector_39+0x62>
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	8e 0f       	add	r24, r30
     b6a:	80 93 ef 02 	sts	0x02EF, r24
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ee 50       	subi	r30, 0x0E	; 14
     b72:	fd 4f       	sbci	r31, 0xFD	; 253
     b74:	80 81       	ld	r24, Z
     b76:	80 93 bb 00 	sts	0x00BB, r24
     b7a:	85 e8       	ldi	r24, 0x85	; 133
     b7c:	80 93 bc 00 	sts	0x00BC, r24
     b80:	43 c0       	rjmp	.+134    	; 0xc08 <__vector_39+0xe8>
     b82:	80 91 f0 02 	lds	r24, 0x02F0
     b86:	81 60       	ori	r24, 0x01	; 1
     b88:	80 93 f0 02 	sts	0x02F0, r24
     b8c:	84 e9       	ldi	r24, 0x94	; 148
     b8e:	80 93 bc 00 	sts	0x00BC, r24
     b92:	3a c0       	rjmp	.+116    	; 0xc08 <__vector_39+0xe8>
     b94:	e0 91 ef 02 	lds	r30, 0x02EF
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	8e 0f       	add	r24, r30
     b9c:	80 93 ef 02 	sts	0x02EF, r24
     ba0:	80 91 bb 00 	lds	r24, 0x00BB
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	ee 50       	subi	r30, 0x0E	; 14
     ba8:	fd 4f       	sbci	r31, 0xFD	; 253
     baa:	80 83       	st	Z, r24
     bac:	20 91 ef 02 	lds	r18, 0x02EF
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	80 91 f1 02 	lds	r24, 0x02F1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	28 17       	cp	r18, r24
     bbc:	39 07       	cpc	r19, r25
     bbe:	24 f4       	brge	.+8      	; 0xbc8 <__vector_39+0xa8>
     bc0:	85 ec       	ldi	r24, 0xC5	; 197
     bc2:	80 93 bc 00 	sts	0x00BC, r24
     bc6:	20 c0       	rjmp	.+64     	; 0xc08 <__vector_39+0xe8>
     bc8:	85 e8       	ldi	r24, 0x85	; 133
     bca:	80 93 bc 00 	sts	0x00BC, r24
     bce:	1c c0       	rjmp	.+56     	; 0xc08 <__vector_39+0xe8>
     bd0:	80 91 bb 00 	lds	r24, 0x00BB
     bd4:	e0 91 ef 02 	lds	r30, 0x02EF
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	ee 50       	subi	r30, 0x0E	; 14
     bdc:	fd 4f       	sbci	r31, 0xFD	; 253
     bde:	80 83       	st	Z, r24
     be0:	80 91 f0 02 	lds	r24, 0x02F0
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	80 93 f0 02 	sts	0x02F0, r24
     bea:	84 e9       	ldi	r24, 0x94	; 148
     bec:	80 93 bc 00 	sts	0x00BC, r24
     bf0:	0b c0       	rjmp	.+22     	; 0xc08 <__vector_39+0xe8>
     bf2:	85 ea       	ldi	r24, 0xA5	; 165
     bf4:	80 93 bc 00 	sts	0x00BC, r24
     bf8:	07 c0       	rjmp	.+14     	; 0xc08 <__vector_39+0xe8>
     bfa:	80 91 b9 00 	lds	r24, 0x00B9
     bfe:	80 93 13 02 	sts	0x0213, r24
     c02:	84 e0       	ldi	r24, 0x04	; 4
     c04:	80 93 bc 00 	sts	0x00BC, r24
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	bf 91       	pop	r27
     c0e:	af 91       	pop	r26
     c10:	9f 91       	pop	r25
     c12:	8f 91       	pop	r24
     c14:	3f 91       	pop	r19
     c16:	2f 91       	pop	r18
     c18:	0f 90       	pop	r0
     c1a:	0b be       	out	0x3b, r0	; 59
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <UART_transmit>:
     c26:	e0 ec       	ldi	r30, 0xC0	; 192
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	90 81       	ld	r25, Z
     c2c:	95 ff       	sbrs	r25, 5
     c2e:	fd cf       	rjmp	.-6      	; 0xc2a <UART_transmit+0x4>
     c30:	80 93 c6 00 	sts	0x00C6, r24
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	08 95       	ret

00000c3a <UART_receive>:
     c3a:	e0 ec       	ldi	r30, 0xC0	; 192
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	88 23       	and	r24, r24
     c42:	ec f7       	brge	.-6      	; 0xc3e <UART_receive+0x4>
     c44:	80 91 c6 00 	lds	r24, 0x00C6
     c48:	08 95       	ret

00000c4a <UART_init>:
     c4a:	90 93 c5 00 	sts	0x00C5, r25
     c4e:	80 93 c4 00 	sts	0x00C4, r24
     c52:	88 e1       	ldi	r24, 0x18	; 24
     c54:	80 93 c1 00 	sts	0x00C1, r24
     c58:	8e e0       	ldi	r24, 0x0E	; 14
     c5a:	80 93 c2 00 	sts	0x00C2, r24
     c5e:	6d e1       	ldi	r22, 0x1D	; 29
     c60:	76 e0       	ldi	r23, 0x06	; 6
     c62:	83 e1       	ldi	r24, 0x13	; 19
     c64:	96 e0       	ldi	r25, 0x06	; 6
     c66:	5d d3       	rcall	.+1722   	; 0x1322 <fdevopen>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <US_trigger>:
	max_distance = US_get_distance();
	printf("Ultrasound max: %d\n", max_distance);
}

void US_trigger(){
	if(working == 0)
     c6e:	80 91 ff 02 	lds	r24, 0x02FF
     c72:	81 11       	cpse	r24, r1
     c74:	1c c0       	rjmp	.+56     	; 0xcae <US_trigger+0x40>
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	8d ee       	ldi	r24, 0xED	; 237
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	80 40       	sbci	r24, 0x00	; 0
     c80:	90 40       	sbci	r25, 0x00	; 0
     c82:	e1 f7       	brne	.-8      	; 0xc7c <US_trigger+0xe>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <US_trigger+0x18>
     c86:	00 00       	nop
	{
		/* 60ms measurement cycle is suggested by the data sheet to prevent trigger signal to the echo signal */
		_delay_ms(60);
		/* Ensure the pin is low before sending the trigger*/
		US_PORT &=~ (1 << US_TRIG_PIN);
     c88:	73 98       	cbi	0x0e, 3	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c8a:	25 e0       	ldi	r18, 0x05	; 5
     c8c:	2a 95       	dec	r18
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <US_trigger+0x1e>
     c90:	00 00       	nop
		_delay_us(1);
		/* 10us trigger input */
		US_PORT |= (1 << US_TRIG_PIN); 
     c92:	73 9a       	sbi	0x0e, 3	; 14
     c94:	85 e3       	ldi	r24, 0x35	; 53
     c96:	8a 95       	dec	r24
     c98:	f1 f7       	brne	.-4      	; 0xc96 <US_trigger+0x28>
     c9a:	00 00       	nop
		_delay_us(10);
		US_PORT &=~ (1 << US_TRIG_PIN);
     c9c:	73 98       	cbi	0x0e, 3	; 14
		working = 1;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 93 ff 02 	sts	0x02FF, r24
		error = 0;
     ca4:	10 92 05 03 	sts	0x0305, r1
     ca8:	90 ea       	ldi	r25, 0xA0	; 160
     caa:	9a 95       	dec	r25
     cac:	f1 f7       	brne	.-4      	; 0xcaa <US_trigger+0x3c>
     cae:	08 95       	ret

00000cb0 <US_get_distance>:
	}

}

int US_get_distance(){
	US_trigger();
     cb0:	de df       	rcall	.-68     	; 0xc6e <US_trigger>
	//_delay_ms(10);
	return distance_avg;
}
     cb2:	80 91 06 03 	lds	r24, 0x0306
     cb6:	90 91 07 03 	lds	r25, 0x0307
     cba:	08 95       	ret

00000cbc <US_calibrate>:
	sei();
	
	US_calibrate();
}

void US_calibrate() {
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	ca e0       	ldi	r28, 0x0A	; 10
     cc2:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < 10; i++) {
		US_get_distance();
     cc4:	f5 df       	rcall	.-22     	; 0xcb0 <US_get_distance>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc6:	8f e3       	ldi	r24, 0x3F	; 63
     cc8:	9c e9       	ldi	r25, 0x9C	; 156
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <US_calibrate+0xe>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <US_calibrate+0x14>
     cd0:	00 00       	nop
     cd2:	21 97       	sbiw	r28, 0x01	; 1
	
	US_calibrate();
}

void US_calibrate() {
	for(int i = 0; i < 10; i++) {
     cd4:	20 97       	sbiw	r28, 0x00	; 0
     cd6:	b1 f7       	brne	.-20     	; 0xcc4 <US_calibrate+0x8>
		US_get_distance();
		_delay_ms(10);
	}
	max_distance = US_get_distance();
     cd8:	eb df       	rcall	.-42     	; 0xcb0 <US_get_distance>
     cda:	80 93 03 03 	sts	0x0303, r24
     cde:	90 93 04 03 	sts	0x0304, r25
	printf("Ultrasound max: %d\n", max_distance);
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	8a ec       	ldi	r24, 0xCA	; 202
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	63 d3       	rcall	.+1734   	; 0x13b6 <printf>
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <US_init>:
unsigned int distance_avg;
unsigned int max_distance;
uint8_t error;

void US_init(){
	cli();
     cfe:	f8 94       	cli
	
	US_DDR |= (1 << US_TRIG_PIN);
     d00:	6b 9a       	sbi	0x0d, 3	; 13
	US_DDR &= ~(1 << US_ECHO_PIN);
     d02:	6d 98       	cbi	0x0d, 5	; 13

	EIMSK |= (1 << INT5);		// Enable interrupt at PE5->echo pin
     d04:	ed 9a       	sbi	0x1d, 5	; 29
	EICRB |= (1 << ISC50);		// Trigger interrupt at any logical change at PE5
     d06:	ea e6       	ldi	r30, 0x6A	; 106
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	84 60       	ori	r24, 0x04	; 4
     d0e:	80 83       	st	Z, r24

	TCCR3B &= ~(1 << CS30);		// clk_io/8 prescaler
     d10:	e1 e9       	ldi	r30, 0x91	; 145
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8e 7f       	andi	r24, 0xFE	; 254
     d18:	80 83       	st	Z, r24
	TCCR3B |= (1 << CS31);
     d1a:	80 81       	ld	r24, Z
     d1c:	82 60       	ori	r24, 0x02	; 2
     d1e:	80 83       	st	Z, r24
	TCNT0 = 0;					//Reset timer
     d20:	16 bc       	out	0x26, r1	; 38
	TIMSK3 |= (1 << TOIE0);		//Timer overflow interrupt enable
     d22:	e1 e7       	ldi	r30, 0x71	; 113
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	81 60       	ori	r24, 0x01	; 1
     d2a:	80 83       	st	Z, r24

	sei();
     d2c:	78 94       	sei
	
	US_calibrate();
     d2e:	c6 cf       	rjmp	.-116    	; 0xcbc <US_calibrate>
     d30:	08 95       	ret

00000d32 <US_max_distance>:
	return distance_avg;
}

int US_max_distance() {
	return max_distance;
}
     d32:	80 91 03 03 	lds	r24, 0x0303
     d36:	90 91 04 03 	lds	r25, 0x0304
     d3a:	08 95       	ret

00000d3c <__vector_6>:

ISR (US_ECHO_EDGE_DETECT)
{
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	0b b6       	in	r0, 0x3b	; 59
     d48:	0f 92       	push	r0
     d4a:	8f 92       	push	r8
     d4c:	9f 92       	push	r9
     d4e:	af 92       	push	r10
     d50:	bf 92       	push	r11
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	2f 93       	push	r18
     d60:	3f 93       	push	r19
     d62:	4f 93       	push	r20
     d64:	5f 93       	push	r21
     d66:	6f 93       	push	r22
     d68:	7f 93       	push	r23
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25
     d6e:	af 93       	push	r26
     d70:	bf 93       	push	r27
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ef 93       	push	r30
     d78:	ff 93       	push	r31
	if(working == 1)	// Trigger has been sent, 
     d7a:	80 91 ff 02 	lds	r24, 0x02FF
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	09 f0       	breq	.+2      	; 0xd84 <__vector_6+0x48>
     d82:	74 c0       	rjmp	.+232    	; 0xe6c <__vector_6+0x130>
						// this is the returning signal proportional to the range
	{
		if(rising_edge == 0)		// Start measuring echo width
     d84:	80 91 02 03 	lds	r24, 0x0302
     d88:	81 11       	cpse	r24, r1
     d8a:	0d c0       	rjmp	.+26     	; 0xda6 <__vector_6+0x6a>
		{
			rising_edge = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	80 93 02 03 	sts	0x0302, r24
			TCCR3B |= (1 << CS31);
     d92:	e1 e9       	ldi	r30, 0x91	; 145
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	82 60       	ori	r24, 0x02	; 2
     d9a:	80 83       	st	Z, r24
			timer_value = 0;
     d9c:	10 92 01 03 	sts	0x0301, r1
     da0:	10 92 00 03 	sts	0x0300, r1
     da4:	63 c0       	rjmp	.+198    	; 0xe6c <__vector_6+0x130>
		}
		else if (rising_edge == 1)	// Echo is finished
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	09 f0       	breq	.+2      	; 0xdac <__vector_6+0x70>
     daa:	60 c0       	rjmp	.+192    	; 0xe6c <__vector_6+0x130>
		{	
			/* 3th order moving average filter */
			static int filter[3];
			int new_val = (timer_value*30.5 + TCNT3)/2; //(2MHz/16bit = 30.5)
     dac:	60 91 00 03 	lds	r22, 0x0300
     db0:	70 91 01 03 	lds	r23, 0x0301
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	95 d1       	rcall	.+810    	; 0x10e4 <__floatunsisf>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	44 ef       	ldi	r20, 0xF4	; 244
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	46 d2       	rcall	.+1164   	; 0x1250 <__mulsf3>
     dc4:	4b 01       	movw	r8, r22
     dc6:	5c 01       	movw	r10, r24
     dc8:	c4 e9       	ldi	r28, 0x94	; 148
     dca:	d0 e0       	ldi	r29, 0x00	; 0
     dcc:	c8 80       	ld	r12, Y
     dce:	d9 80       	ldd	r13, Y+1	; 0x01
			distance_avg = (timer_value*30.5 + TCNT3)/2;
     dd0:	68 81       	ld	r22, Y
     dd2:	79 81       	ldd	r23, Y+1	; 0x01
			for(int i = 1; i < 3; i++) {
				distance_avg += filter[i];
     dd4:	0f 2e       	mov	r0, r31
     dd6:	f8 ef       	ldi	r31, 0xF8	; 248
     dd8:	ef 2e       	mov	r14, r31
     dda:	f2 e0       	ldi	r31, 0x02	; 2
     ddc:	ff 2e       	mov	r15, r31
     dde:	f0 2d       	mov	r31, r0
     de0:	f7 01       	movw	r30, r14
     de2:	00 81       	ld	r16, Z
     de4:	11 81       	ldd	r17, Z+1	; 0x01
		else if (rising_edge == 1)	// Echo is finished
		{	
			/* 3th order moving average filter */
			static int filter[3];
			int new_val = (timer_value*30.5 + TCNT3)/2; //(2MHz/16bit = 30.5)
			distance_avg = (timer_value*30.5 + TCNT3)/2;
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	7c d1       	rcall	.+760    	; 0x10e4 <__floatunsisf>
     dec:	9b 01       	movw	r18, r22
     dee:	ac 01       	movw	r20, r24
     df0:	c5 01       	movw	r24, r10
     df2:	b4 01       	movw	r22, r8
     df4:	76 d0       	rcall	.+236    	; 0xee2 <__addsf3>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	5f e3       	ldi	r21, 0x3F	; 63
     dfe:	28 d2       	rcall	.+1104   	; 0x1250 <__mulsf3>
     e00:	45 d1       	rcall	.+650    	; 0x108c <__fixunssfsi>
			for(int i = 1; i < 3; i++) {
				distance_avg += filter[i];
     e02:	60 0f       	add	r22, r16
     e04:	71 1f       	adc	r23, r17
				filter[i - 1] = filter[i];
     e06:	10 93 f7 02 	sts	0x02F7, r17
     e0a:	00 93 f6 02 	sts	0x02F6, r16
			/* 3th order moving average filter */
			static int filter[3];
			int new_val = (timer_value*30.5 + TCNT3)/2; //(2MHz/16bit = 30.5)
			distance_avg = (timer_value*30.5 + TCNT3)/2;
			for(int i = 1; i < 3; i++) {
				distance_avg += filter[i];
     e0e:	0a ef       	ldi	r16, 0xFA	; 250
     e10:	12 e0       	ldi	r17, 0x02	; 2
     e12:	f8 01       	movw	r30, r16
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
				filter[i - 1] = filter[i];
     e18:	f7 01       	movw	r30, r14
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	80 83       	st	Z, r24
			/* 3th order moving average filter */
			static int filter[3];
			int new_val = (timer_value*30.5 + TCNT3)/2; //(2MHz/16bit = 30.5)
			distance_avg = (timer_value*30.5 + TCNT3)/2;
			for(int i = 1; i < 3; i++) {
				distance_avg += filter[i];
     e1e:	68 0f       	add	r22, r24
     e20:	79 1f       	adc	r23, r25
				filter[i - 1] = filter[i];
			}
			distance_avg /= 4;
     e22:	76 95       	lsr	r23
     e24:	67 95       	ror	r22
     e26:	76 95       	lsr	r23
     e28:	67 95       	ror	r22
     e2a:	70 93 07 03 	sts	0x0307, r23
     e2e:	60 93 06 03 	sts	0x0306, r22
		}
		else if (rising_edge == 1)	// Echo is finished
		{	
			/* 3th order moving average filter */
			static int filter[3];
			int new_val = (timer_value*30.5 + TCNT3)/2; //(2MHz/16bit = 30.5)
     e32:	b6 01       	movw	r22, r12
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	55 d1       	rcall	.+682    	; 0x10e4 <__floatunsisf>
     e3a:	9b 01       	movw	r18, r22
     e3c:	ac 01       	movw	r20, r24
     e3e:	c5 01       	movw	r24, r10
     e40:	b4 01       	movw	r22, r8
     e42:	4f d0       	rcall	.+158    	; 0xee2 <__addsf3>
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	5f e3       	ldi	r21, 0x3F	; 63
     e4c:	01 d2       	rcall	.+1026   	; 0x1250 <__mulsf3>
     e4e:	19 d1       	rcall	.+562    	; 0x1082 <__fixsfsi>
     e50:	f8 01       	movw	r30, r16
     e52:	71 83       	std	Z+1, r23	; 0x01
     e54:	60 83       	st	Z, r22
				filter[i - 1] = filter[i];
			}
			distance_avg /= 4;
			filter[2] = new_val;

			rising_edge = 0;
     e56:	10 92 02 03 	sts	0x0302, r1
			working = 0;
     e5a:	10 92 ff 02 	sts	0x02FF, r1
			/* Stop and reset timer */
			TCCR3B &= ~(1 << CS31);
     e5e:	e1 e9       	ldi	r30, 0x91	; 145
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	8d 7f       	andi	r24, 0xFD	; 253
     e66:	80 83       	st	Z, r24
			TCNT3 = 0;
     e68:	19 82       	std	Y+1, r1	; 0x01
     e6a:	18 82       	st	Y, r1
		}
	}
}
     e6c:	ff 91       	pop	r31
     e6e:	ef 91       	pop	r30
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	bf 90       	pop	r11
     e96:	af 90       	pop	r10
     e98:	9f 90       	pop	r9
     e9a:	8f 90       	pop	r8
     e9c:	0f 90       	pop	r0
     e9e:	0b be       	out	0x3b, r0	; 59
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	0f 90       	pop	r0
     ea6:	1f 90       	pop	r1
     ea8:	18 95       	reti

00000eaa <__vector_35>:

ISR (US_ECHO_TIMER_OVERFLOW)
{
     eaa:	1f 92       	push	r1
     eac:	0f 92       	push	r0
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	0f 92       	push	r0
     eb2:	11 24       	eor	r1, r1
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
	if(rising_edge == 1) //Check if the echo signal is active
     eb8:	80 91 02 03 	lds	r24, 0x0302
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	49 f4       	brne	.+18     	; 0xed2 <__vector_35+0x28>
	{
		timer_value++;
     ec0:	80 91 00 03 	lds	r24, 0x0300
     ec4:	90 91 01 03 	lds	r25, 0x0301
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	90 93 01 03 	sts	0x0301, r25
     ece:	80 93 00 03 	sts	0x0300, r24
			working = 0;
			rising_edge = 0;
			error = 1;
		}
	}
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <__subsf3>:
     ee0:	50 58       	subi	r21, 0x80	; 128

00000ee2 <__addsf3>:
     ee2:	bb 27       	eor	r27, r27
     ee4:	aa 27       	eor	r26, r26
     ee6:	0e d0       	rcall	.+28     	; 0xf04 <__addsf3x>
     ee8:	75 c1       	rjmp	.+746    	; 0x11d4 <__fp_round>
     eea:	66 d1       	rcall	.+716    	; 0x11b8 <__fp_pscA>
     eec:	30 f0       	brcs	.+12     	; 0xefa <__addsf3+0x18>
     eee:	6b d1       	rcall	.+726    	; 0x11c6 <__fp_pscB>
     ef0:	20 f0       	brcs	.+8      	; 0xefa <__addsf3+0x18>
     ef2:	31 f4       	brne	.+12     	; 0xf00 <__addsf3+0x1e>
     ef4:	9f 3f       	cpi	r25, 0xFF	; 255
     ef6:	11 f4       	brne	.+4      	; 0xefc <__addsf3+0x1a>
     ef8:	1e f4       	brtc	.+6      	; 0xf00 <__addsf3+0x1e>
     efa:	5b c1       	rjmp	.+694    	; 0x11b2 <__fp_nan>
     efc:	0e f4       	brtc	.+2      	; 0xf00 <__addsf3+0x1e>
     efe:	e0 95       	com	r30
     f00:	e7 fb       	bst	r30, 7
     f02:	51 c1       	rjmp	.+674    	; 0x11a6 <__fp_inf>

00000f04 <__addsf3x>:
     f04:	e9 2f       	mov	r30, r25
     f06:	77 d1       	rcall	.+750    	; 0x11f6 <__fp_split3>
     f08:	80 f3       	brcs	.-32     	; 0xeea <__addsf3+0x8>
     f0a:	ba 17       	cp	r27, r26
     f0c:	62 07       	cpc	r22, r18
     f0e:	73 07       	cpc	r23, r19
     f10:	84 07       	cpc	r24, r20
     f12:	95 07       	cpc	r25, r21
     f14:	18 f0       	brcs	.+6      	; 0xf1c <__addsf3x+0x18>
     f16:	71 f4       	brne	.+28     	; 0xf34 <__addsf3x+0x30>
     f18:	9e f5       	brtc	.+102    	; 0xf80 <__addsf3x+0x7c>
     f1a:	8f c1       	rjmp	.+798    	; 0x123a <__fp_zero>
     f1c:	0e f4       	brtc	.+2      	; 0xf20 <__addsf3x+0x1c>
     f1e:	e0 95       	com	r30
     f20:	0b 2e       	mov	r0, r27
     f22:	ba 2f       	mov	r27, r26
     f24:	a0 2d       	mov	r26, r0
     f26:	0b 01       	movw	r0, r22
     f28:	b9 01       	movw	r22, r18
     f2a:	90 01       	movw	r18, r0
     f2c:	0c 01       	movw	r0, r24
     f2e:	ca 01       	movw	r24, r20
     f30:	a0 01       	movw	r20, r0
     f32:	11 24       	eor	r1, r1
     f34:	ff 27       	eor	r31, r31
     f36:	59 1b       	sub	r21, r25
     f38:	99 f0       	breq	.+38     	; 0xf60 <__addsf3x+0x5c>
     f3a:	59 3f       	cpi	r21, 0xF9	; 249
     f3c:	50 f4       	brcc	.+20     	; 0xf52 <__addsf3x+0x4e>
     f3e:	50 3e       	cpi	r21, 0xE0	; 224
     f40:	68 f1       	brcs	.+90     	; 0xf9c <__addsf3x+0x98>
     f42:	1a 16       	cp	r1, r26
     f44:	f0 40       	sbci	r31, 0x00	; 0
     f46:	a2 2f       	mov	r26, r18
     f48:	23 2f       	mov	r18, r19
     f4a:	34 2f       	mov	r19, r20
     f4c:	44 27       	eor	r20, r20
     f4e:	58 5f       	subi	r21, 0xF8	; 248
     f50:	f3 cf       	rjmp	.-26     	; 0xf38 <__addsf3x+0x34>
     f52:	46 95       	lsr	r20
     f54:	37 95       	ror	r19
     f56:	27 95       	ror	r18
     f58:	a7 95       	ror	r26
     f5a:	f0 40       	sbci	r31, 0x00	; 0
     f5c:	53 95       	inc	r21
     f5e:	c9 f7       	brne	.-14     	; 0xf52 <__addsf3x+0x4e>
     f60:	7e f4       	brtc	.+30     	; 0xf80 <__addsf3x+0x7c>
     f62:	1f 16       	cp	r1, r31
     f64:	ba 0b       	sbc	r27, r26
     f66:	62 0b       	sbc	r22, r18
     f68:	73 0b       	sbc	r23, r19
     f6a:	84 0b       	sbc	r24, r20
     f6c:	ba f0       	brmi	.+46     	; 0xf9c <__addsf3x+0x98>
     f6e:	91 50       	subi	r25, 0x01	; 1
     f70:	a1 f0       	breq	.+40     	; 0xf9a <__addsf3x+0x96>
     f72:	ff 0f       	add	r31, r31
     f74:	bb 1f       	adc	r27, r27
     f76:	66 1f       	adc	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	88 1f       	adc	r24, r24
     f7c:	c2 f7       	brpl	.-16     	; 0xf6e <__addsf3x+0x6a>
     f7e:	0e c0       	rjmp	.+28     	; 0xf9c <__addsf3x+0x98>
     f80:	ba 0f       	add	r27, r26
     f82:	62 1f       	adc	r22, r18
     f84:	73 1f       	adc	r23, r19
     f86:	84 1f       	adc	r24, r20
     f88:	48 f4       	brcc	.+18     	; 0xf9c <__addsf3x+0x98>
     f8a:	87 95       	ror	r24
     f8c:	77 95       	ror	r23
     f8e:	67 95       	ror	r22
     f90:	b7 95       	ror	r27
     f92:	f7 95       	ror	r31
     f94:	9e 3f       	cpi	r25, 0xFE	; 254
     f96:	08 f0       	brcs	.+2      	; 0xf9a <__addsf3x+0x96>
     f98:	b3 cf       	rjmp	.-154    	; 0xf00 <__addsf3+0x1e>
     f9a:	93 95       	inc	r25
     f9c:	88 0f       	add	r24, r24
     f9e:	08 f0       	brcs	.+2      	; 0xfa2 <__addsf3x+0x9e>
     fa0:	99 27       	eor	r25, r25
     fa2:	ee 0f       	add	r30, r30
     fa4:	97 95       	ror	r25
     fa6:	87 95       	ror	r24
     fa8:	08 95       	ret

00000faa <__cmpsf2>:
     faa:	d9 d0       	rcall	.+434    	; 0x115e <__fp_cmp>
     fac:	08 f4       	brcc	.+2      	; 0xfb0 <__cmpsf2+0x6>
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	08 95       	ret

00000fb2 <__divsf3>:
     fb2:	0c d0       	rcall	.+24     	; 0xfcc <__divsf3x>
     fb4:	0f c1       	rjmp	.+542    	; 0x11d4 <__fp_round>
     fb6:	07 d1       	rcall	.+526    	; 0x11c6 <__fp_pscB>
     fb8:	40 f0       	brcs	.+16     	; 0xfca <__divsf3+0x18>
     fba:	fe d0       	rcall	.+508    	; 0x11b8 <__fp_pscA>
     fbc:	30 f0       	brcs	.+12     	; 0xfca <__divsf3+0x18>
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <__divsf3+0x16>
     fc0:	5f 3f       	cpi	r21, 0xFF	; 255
     fc2:	19 f0       	breq	.+6      	; 0xfca <__divsf3+0x18>
     fc4:	f0 c0       	rjmp	.+480    	; 0x11a6 <__fp_inf>
     fc6:	51 11       	cpse	r21, r1
     fc8:	39 c1       	rjmp	.+626    	; 0x123c <__fp_szero>
     fca:	f3 c0       	rjmp	.+486    	; 0x11b2 <__fp_nan>

00000fcc <__divsf3x>:
     fcc:	14 d1       	rcall	.+552    	; 0x11f6 <__fp_split3>
     fce:	98 f3       	brcs	.-26     	; 0xfb6 <__divsf3+0x4>

00000fd0 <__divsf3_pse>:
     fd0:	99 23       	and	r25, r25
     fd2:	c9 f3       	breq	.-14     	; 0xfc6 <__divsf3+0x14>
     fd4:	55 23       	and	r21, r21
     fd6:	b1 f3       	breq	.-20     	; 0xfc4 <__divsf3+0x12>
     fd8:	95 1b       	sub	r25, r21
     fda:	55 0b       	sbc	r21, r21
     fdc:	bb 27       	eor	r27, r27
     fde:	aa 27       	eor	r26, r26
     fe0:	62 17       	cp	r22, r18
     fe2:	73 07       	cpc	r23, r19
     fe4:	84 07       	cpc	r24, r20
     fe6:	38 f0       	brcs	.+14     	; 0xff6 <__divsf3_pse+0x26>
     fe8:	9f 5f       	subi	r25, 0xFF	; 255
     fea:	5f 4f       	sbci	r21, 0xFF	; 255
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	44 1f       	adc	r20, r20
     ff2:	aa 1f       	adc	r26, r26
     ff4:	a9 f3       	breq	.-22     	; 0xfe0 <__divsf3_pse+0x10>
     ff6:	33 d0       	rcall	.+102    	; 0x105e <__divsf3_pse+0x8e>
     ff8:	0e 2e       	mov	r0, r30
     ffa:	3a f0       	brmi	.+14     	; 0x100a <__divsf3_pse+0x3a>
     ffc:	e0 e8       	ldi	r30, 0x80	; 128
     ffe:	30 d0       	rcall	.+96     	; 0x1060 <__divsf3_pse+0x90>
    1000:	91 50       	subi	r25, 0x01	; 1
    1002:	50 40       	sbci	r21, 0x00	; 0
    1004:	e6 95       	lsr	r30
    1006:	00 1c       	adc	r0, r0
    1008:	ca f7       	brpl	.-14     	; 0xffc <__divsf3_pse+0x2c>
    100a:	29 d0       	rcall	.+82     	; 0x105e <__divsf3_pse+0x8e>
    100c:	fe 2f       	mov	r31, r30
    100e:	27 d0       	rcall	.+78     	; 0x105e <__divsf3_pse+0x8e>
    1010:	66 0f       	add	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	88 1f       	adc	r24, r24
    1016:	bb 1f       	adc	r27, r27
    1018:	26 17       	cp	r18, r22
    101a:	37 07       	cpc	r19, r23
    101c:	48 07       	cpc	r20, r24
    101e:	ab 07       	cpc	r26, r27
    1020:	b0 e8       	ldi	r27, 0x80	; 128
    1022:	09 f0       	breq	.+2      	; 0x1026 <__divsf3_pse+0x56>
    1024:	bb 0b       	sbc	r27, r27
    1026:	80 2d       	mov	r24, r0
    1028:	bf 01       	movw	r22, r30
    102a:	ff 27       	eor	r31, r31
    102c:	93 58       	subi	r25, 0x83	; 131
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	2a f0       	brmi	.+10     	; 0x103c <__divsf3_pse+0x6c>
    1032:	9e 3f       	cpi	r25, 0xFE	; 254
    1034:	51 05       	cpc	r21, r1
    1036:	68 f0       	brcs	.+26     	; 0x1052 <__divsf3_pse+0x82>
    1038:	b6 c0       	rjmp	.+364    	; 0x11a6 <__fp_inf>
    103a:	00 c1       	rjmp	.+512    	; 0x123c <__fp_szero>
    103c:	5f 3f       	cpi	r21, 0xFF	; 255
    103e:	ec f3       	brlt	.-6      	; 0x103a <__divsf3_pse+0x6a>
    1040:	98 3e       	cpi	r25, 0xE8	; 232
    1042:	dc f3       	brlt	.-10     	; 0x103a <__divsf3_pse+0x6a>
    1044:	86 95       	lsr	r24
    1046:	77 95       	ror	r23
    1048:	67 95       	ror	r22
    104a:	b7 95       	ror	r27
    104c:	f7 95       	ror	r31
    104e:	9f 5f       	subi	r25, 0xFF	; 255
    1050:	c9 f7       	brne	.-14     	; 0x1044 <__divsf3_pse+0x74>
    1052:	88 0f       	add	r24, r24
    1054:	91 1d       	adc	r25, r1
    1056:	96 95       	lsr	r25
    1058:	87 95       	ror	r24
    105a:	97 f9       	bld	r25, 7
    105c:	08 95       	ret
    105e:	e1 e0       	ldi	r30, 0x01	; 1
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	bb 1f       	adc	r27, r27
    1068:	62 17       	cp	r22, r18
    106a:	73 07       	cpc	r23, r19
    106c:	84 07       	cpc	r24, r20
    106e:	ba 07       	cpc	r27, r26
    1070:	20 f0       	brcs	.+8      	; 0x107a <__divsf3_pse+0xaa>
    1072:	62 1b       	sub	r22, r18
    1074:	73 0b       	sbc	r23, r19
    1076:	84 0b       	sbc	r24, r20
    1078:	ba 0b       	sbc	r27, r26
    107a:	ee 1f       	adc	r30, r30
    107c:	88 f7       	brcc	.-30     	; 0x1060 <__divsf3_pse+0x90>
    107e:	e0 95       	com	r30
    1080:	08 95       	ret

00001082 <__fixsfsi>:
    1082:	04 d0       	rcall	.+8      	; 0x108c <__fixunssfsi>
    1084:	68 94       	set
    1086:	b1 11       	cpse	r27, r1
    1088:	d9 c0       	rjmp	.+434    	; 0x123c <__fp_szero>
    108a:	08 95       	ret

0000108c <__fixunssfsi>:
    108c:	bc d0       	rcall	.+376    	; 0x1206 <__fp_splitA>
    108e:	88 f0       	brcs	.+34     	; 0x10b2 <__fixunssfsi+0x26>
    1090:	9f 57       	subi	r25, 0x7F	; 127
    1092:	90 f0       	brcs	.+36     	; 0x10b8 <__fixunssfsi+0x2c>
    1094:	b9 2f       	mov	r27, r25
    1096:	99 27       	eor	r25, r25
    1098:	b7 51       	subi	r27, 0x17	; 23
    109a:	a0 f0       	brcs	.+40     	; 0x10c4 <__fixunssfsi+0x38>
    109c:	d1 f0       	breq	.+52     	; 0x10d2 <__fixunssfsi+0x46>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	1a f0       	brmi	.+6      	; 0x10ae <__fixunssfsi+0x22>
    10a8:	ba 95       	dec	r27
    10aa:	c9 f7       	brne	.-14     	; 0x109e <__fixunssfsi+0x12>
    10ac:	12 c0       	rjmp	.+36     	; 0x10d2 <__fixunssfsi+0x46>
    10ae:	b1 30       	cpi	r27, 0x01	; 1
    10b0:	81 f0       	breq	.+32     	; 0x10d2 <__fixunssfsi+0x46>
    10b2:	c3 d0       	rcall	.+390    	; 0x123a <__fp_zero>
    10b4:	b1 e0       	ldi	r27, 0x01	; 1
    10b6:	08 95       	ret
    10b8:	c0 c0       	rjmp	.+384    	; 0x123a <__fp_zero>
    10ba:	67 2f       	mov	r22, r23
    10bc:	78 2f       	mov	r23, r24
    10be:	88 27       	eor	r24, r24
    10c0:	b8 5f       	subi	r27, 0xF8	; 248
    10c2:	39 f0       	breq	.+14     	; 0x10d2 <__fixunssfsi+0x46>
    10c4:	b9 3f       	cpi	r27, 0xF9	; 249
    10c6:	cc f3       	brlt	.-14     	; 0x10ba <__fixunssfsi+0x2e>
    10c8:	86 95       	lsr	r24
    10ca:	77 95       	ror	r23
    10cc:	67 95       	ror	r22
    10ce:	b3 95       	inc	r27
    10d0:	d9 f7       	brne	.-10     	; 0x10c8 <__fixunssfsi+0x3c>
    10d2:	3e f4       	brtc	.+14     	; 0x10e2 <__fixunssfsi+0x56>
    10d4:	90 95       	com	r25
    10d6:	80 95       	com	r24
    10d8:	70 95       	com	r23
    10da:	61 95       	neg	r22
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	08 95       	ret

000010e4 <__floatunsisf>:
    10e4:	e8 94       	clt
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <__floatsisf+0x12>

000010e8 <__floatsisf>:
    10e8:	97 fb       	bst	r25, 7
    10ea:	3e f4       	brtc	.+14     	; 0x10fa <__floatsisf+0x12>
    10ec:	90 95       	com	r25
    10ee:	80 95       	com	r24
    10f0:	70 95       	com	r23
    10f2:	61 95       	neg	r22
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	8f 4f       	sbci	r24, 0xFF	; 255
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	99 23       	and	r25, r25
    10fc:	a9 f0       	breq	.+42     	; 0x1128 <__floatsisf+0x40>
    10fe:	f9 2f       	mov	r31, r25
    1100:	96 e9       	ldi	r25, 0x96	; 150
    1102:	bb 27       	eor	r27, r27
    1104:	93 95       	inc	r25
    1106:	f6 95       	lsr	r31
    1108:	87 95       	ror	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	b7 95       	ror	r27
    1110:	f1 11       	cpse	r31, r1
    1112:	f8 cf       	rjmp	.-16     	; 0x1104 <__floatsisf+0x1c>
    1114:	fa f4       	brpl	.+62     	; 0x1154 <__floatsisf+0x6c>
    1116:	bb 0f       	add	r27, r27
    1118:	11 f4       	brne	.+4      	; 0x111e <__floatsisf+0x36>
    111a:	60 ff       	sbrs	r22, 0
    111c:	1b c0       	rjmp	.+54     	; 0x1154 <__floatsisf+0x6c>
    111e:	6f 5f       	subi	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	16 c0       	rjmp	.+44     	; 0x1154 <__floatsisf+0x6c>
    1128:	88 23       	and	r24, r24
    112a:	11 f0       	breq	.+4      	; 0x1130 <__floatsisf+0x48>
    112c:	96 e9       	ldi	r25, 0x96	; 150
    112e:	11 c0       	rjmp	.+34     	; 0x1152 <__floatsisf+0x6a>
    1130:	77 23       	and	r23, r23
    1132:	21 f0       	breq	.+8      	; 0x113c <__floatsisf+0x54>
    1134:	9e e8       	ldi	r25, 0x8E	; 142
    1136:	87 2f       	mov	r24, r23
    1138:	76 2f       	mov	r23, r22
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <__floatsisf+0x5e>
    113c:	66 23       	and	r22, r22
    113e:	71 f0       	breq	.+28     	; 0x115c <__floatsisf+0x74>
    1140:	96 e8       	ldi	r25, 0x86	; 134
    1142:	86 2f       	mov	r24, r22
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	2a f0       	brmi	.+10     	; 0x1154 <__floatsisf+0x6c>
    114a:	9a 95       	dec	r25
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	da f7       	brpl	.-10     	; 0x114a <__floatsisf+0x62>
    1154:	88 0f       	add	r24, r24
    1156:	96 95       	lsr	r25
    1158:	87 95       	ror	r24
    115a:	97 f9       	bld	r25, 7
    115c:	08 95       	ret

0000115e <__fp_cmp>:
    115e:	99 0f       	add	r25, r25
    1160:	00 08       	sbc	r0, r0
    1162:	55 0f       	add	r21, r21
    1164:	aa 0b       	sbc	r26, r26
    1166:	e0 e8       	ldi	r30, 0x80	; 128
    1168:	fe ef       	ldi	r31, 0xFE	; 254
    116a:	16 16       	cp	r1, r22
    116c:	17 06       	cpc	r1, r23
    116e:	e8 07       	cpc	r30, r24
    1170:	f9 07       	cpc	r31, r25
    1172:	c0 f0       	brcs	.+48     	; 0x11a4 <__fp_cmp+0x46>
    1174:	12 16       	cp	r1, r18
    1176:	13 06       	cpc	r1, r19
    1178:	e4 07       	cpc	r30, r20
    117a:	f5 07       	cpc	r31, r21
    117c:	98 f0       	brcs	.+38     	; 0x11a4 <__fp_cmp+0x46>
    117e:	62 1b       	sub	r22, r18
    1180:	73 0b       	sbc	r23, r19
    1182:	84 0b       	sbc	r24, r20
    1184:	95 0b       	sbc	r25, r21
    1186:	39 f4       	brne	.+14     	; 0x1196 <__fp_cmp+0x38>
    1188:	0a 26       	eor	r0, r26
    118a:	61 f0       	breq	.+24     	; 0x11a4 <__fp_cmp+0x46>
    118c:	23 2b       	or	r18, r19
    118e:	24 2b       	or	r18, r20
    1190:	25 2b       	or	r18, r21
    1192:	21 f4       	brne	.+8      	; 0x119c <__fp_cmp+0x3e>
    1194:	08 95       	ret
    1196:	0a 26       	eor	r0, r26
    1198:	09 f4       	brne	.+2      	; 0x119c <__fp_cmp+0x3e>
    119a:	a1 40       	sbci	r26, 0x01	; 1
    119c:	a6 95       	lsr	r26
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	81 1d       	adc	r24, r1
    11a2:	81 1d       	adc	r24, r1
    11a4:	08 95       	ret

000011a6 <__fp_inf>:
    11a6:	97 f9       	bld	r25, 7
    11a8:	9f 67       	ori	r25, 0x7F	; 127
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	08 95       	ret

000011b2 <__fp_nan>:
    11b2:	9f ef       	ldi	r25, 0xFF	; 255
    11b4:	80 ec       	ldi	r24, 0xC0	; 192
    11b6:	08 95       	ret

000011b8 <__fp_pscA>:
    11b8:	00 24       	eor	r0, r0
    11ba:	0a 94       	dec	r0
    11bc:	16 16       	cp	r1, r22
    11be:	17 06       	cpc	r1, r23
    11c0:	18 06       	cpc	r1, r24
    11c2:	09 06       	cpc	r0, r25
    11c4:	08 95       	ret

000011c6 <__fp_pscB>:
    11c6:	00 24       	eor	r0, r0
    11c8:	0a 94       	dec	r0
    11ca:	12 16       	cp	r1, r18
    11cc:	13 06       	cpc	r1, r19
    11ce:	14 06       	cpc	r1, r20
    11d0:	05 06       	cpc	r0, r21
    11d2:	08 95       	ret

000011d4 <__fp_round>:
    11d4:	09 2e       	mov	r0, r25
    11d6:	03 94       	inc	r0
    11d8:	00 0c       	add	r0, r0
    11da:	11 f4       	brne	.+4      	; 0x11e0 <__fp_round+0xc>
    11dc:	88 23       	and	r24, r24
    11de:	52 f0       	brmi	.+20     	; 0x11f4 <__fp_round+0x20>
    11e0:	bb 0f       	add	r27, r27
    11e2:	40 f4       	brcc	.+16     	; 0x11f4 <__fp_round+0x20>
    11e4:	bf 2b       	or	r27, r31
    11e6:	11 f4       	brne	.+4      	; 0x11ec <__fp_round+0x18>
    11e8:	60 ff       	sbrs	r22, 0
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <__fp_round+0x20>
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	08 95       	ret

000011f6 <__fp_split3>:
    11f6:	57 fd       	sbrc	r21, 7
    11f8:	90 58       	subi	r25, 0x80	; 128
    11fa:	44 0f       	add	r20, r20
    11fc:	55 1f       	adc	r21, r21
    11fe:	59 f0       	breq	.+22     	; 0x1216 <__fp_splitA+0x10>
    1200:	5f 3f       	cpi	r21, 0xFF	; 255
    1202:	71 f0       	breq	.+28     	; 0x1220 <__fp_splitA+0x1a>
    1204:	47 95       	ror	r20

00001206 <__fp_splitA>:
    1206:	88 0f       	add	r24, r24
    1208:	97 fb       	bst	r25, 7
    120a:	99 1f       	adc	r25, r25
    120c:	61 f0       	breq	.+24     	; 0x1226 <__fp_splitA+0x20>
    120e:	9f 3f       	cpi	r25, 0xFF	; 255
    1210:	79 f0       	breq	.+30     	; 0x1230 <__fp_splitA+0x2a>
    1212:	87 95       	ror	r24
    1214:	08 95       	ret
    1216:	12 16       	cp	r1, r18
    1218:	13 06       	cpc	r1, r19
    121a:	14 06       	cpc	r1, r20
    121c:	55 1f       	adc	r21, r21
    121e:	f2 cf       	rjmp	.-28     	; 0x1204 <__fp_split3+0xe>
    1220:	46 95       	lsr	r20
    1222:	f1 df       	rcall	.-30     	; 0x1206 <__fp_splitA>
    1224:	08 c0       	rjmp	.+16     	; 0x1236 <__fp_splitA+0x30>
    1226:	16 16       	cp	r1, r22
    1228:	17 06       	cpc	r1, r23
    122a:	18 06       	cpc	r1, r24
    122c:	99 1f       	adc	r25, r25
    122e:	f1 cf       	rjmp	.-30     	; 0x1212 <__fp_splitA+0xc>
    1230:	86 95       	lsr	r24
    1232:	71 05       	cpc	r23, r1
    1234:	61 05       	cpc	r22, r1
    1236:	08 94       	sec
    1238:	08 95       	ret

0000123a <__fp_zero>:
    123a:	e8 94       	clt

0000123c <__fp_szero>:
    123c:	bb 27       	eor	r27, r27
    123e:	66 27       	eor	r22, r22
    1240:	77 27       	eor	r23, r23
    1242:	cb 01       	movw	r24, r22
    1244:	97 f9       	bld	r25, 7
    1246:	08 95       	ret

00001248 <__gesf2>:
    1248:	8a df       	rcall	.-236    	; 0x115e <__fp_cmp>
    124a:	08 f4       	brcc	.+2      	; 0x124e <__gesf2+0x6>
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	08 95       	ret

00001250 <__mulsf3>:
    1250:	0b d0       	rcall	.+22     	; 0x1268 <__mulsf3x>
    1252:	c0 cf       	rjmp	.-128    	; 0x11d4 <__fp_round>
    1254:	b1 df       	rcall	.-158    	; 0x11b8 <__fp_pscA>
    1256:	28 f0       	brcs	.+10     	; 0x1262 <__mulsf3+0x12>
    1258:	b6 df       	rcall	.-148    	; 0x11c6 <__fp_pscB>
    125a:	18 f0       	brcs	.+6      	; 0x1262 <__mulsf3+0x12>
    125c:	95 23       	and	r25, r21
    125e:	09 f0       	breq	.+2      	; 0x1262 <__mulsf3+0x12>
    1260:	a2 cf       	rjmp	.-188    	; 0x11a6 <__fp_inf>
    1262:	a7 cf       	rjmp	.-178    	; 0x11b2 <__fp_nan>
    1264:	11 24       	eor	r1, r1
    1266:	ea cf       	rjmp	.-44     	; 0x123c <__fp_szero>

00001268 <__mulsf3x>:
    1268:	c6 df       	rcall	.-116    	; 0x11f6 <__fp_split3>
    126a:	a0 f3       	brcs	.-24     	; 0x1254 <__mulsf3+0x4>

0000126c <__mulsf3_pse>:
    126c:	95 9f       	mul	r25, r21
    126e:	d1 f3       	breq	.-12     	; 0x1264 <__mulsf3+0x14>
    1270:	95 0f       	add	r25, r21
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	55 1f       	adc	r21, r21
    1276:	62 9f       	mul	r22, r18
    1278:	f0 01       	movw	r30, r0
    127a:	72 9f       	mul	r23, r18
    127c:	bb 27       	eor	r27, r27
    127e:	f0 0d       	add	r31, r0
    1280:	b1 1d       	adc	r27, r1
    1282:	63 9f       	mul	r22, r19
    1284:	aa 27       	eor	r26, r26
    1286:	f0 0d       	add	r31, r0
    1288:	b1 1d       	adc	r27, r1
    128a:	aa 1f       	adc	r26, r26
    128c:	64 9f       	mul	r22, r20
    128e:	66 27       	eor	r22, r22
    1290:	b0 0d       	add	r27, r0
    1292:	a1 1d       	adc	r26, r1
    1294:	66 1f       	adc	r22, r22
    1296:	82 9f       	mul	r24, r18
    1298:	22 27       	eor	r18, r18
    129a:	b0 0d       	add	r27, r0
    129c:	a1 1d       	adc	r26, r1
    129e:	62 1f       	adc	r22, r18
    12a0:	73 9f       	mul	r23, r19
    12a2:	b0 0d       	add	r27, r0
    12a4:	a1 1d       	adc	r26, r1
    12a6:	62 1f       	adc	r22, r18
    12a8:	83 9f       	mul	r24, r19
    12aa:	a0 0d       	add	r26, r0
    12ac:	61 1d       	adc	r22, r1
    12ae:	22 1f       	adc	r18, r18
    12b0:	74 9f       	mul	r23, r20
    12b2:	33 27       	eor	r19, r19
    12b4:	a0 0d       	add	r26, r0
    12b6:	61 1d       	adc	r22, r1
    12b8:	23 1f       	adc	r18, r19
    12ba:	84 9f       	mul	r24, r20
    12bc:	60 0d       	add	r22, r0
    12be:	21 1d       	adc	r18, r1
    12c0:	82 2f       	mov	r24, r18
    12c2:	76 2f       	mov	r23, r22
    12c4:	6a 2f       	mov	r22, r26
    12c6:	11 24       	eor	r1, r1
    12c8:	9f 57       	subi	r25, 0x7F	; 127
    12ca:	50 40       	sbci	r21, 0x00	; 0
    12cc:	8a f0       	brmi	.+34     	; 0x12f0 <__mulsf3_pse+0x84>
    12ce:	e1 f0       	breq	.+56     	; 0x1308 <__mulsf3_pse+0x9c>
    12d0:	88 23       	and	r24, r24
    12d2:	4a f0       	brmi	.+18     	; 0x12e6 <__mulsf3_pse+0x7a>
    12d4:	ee 0f       	add	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	bb 1f       	adc	r27, r27
    12da:	66 1f       	adc	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	88 1f       	adc	r24, r24
    12e0:	91 50       	subi	r25, 0x01	; 1
    12e2:	50 40       	sbci	r21, 0x00	; 0
    12e4:	a9 f7       	brne	.-22     	; 0x12d0 <__mulsf3_pse+0x64>
    12e6:	9e 3f       	cpi	r25, 0xFE	; 254
    12e8:	51 05       	cpc	r21, r1
    12ea:	70 f0       	brcs	.+28     	; 0x1308 <__mulsf3_pse+0x9c>
    12ec:	5c cf       	rjmp	.-328    	; 0x11a6 <__fp_inf>
    12ee:	a6 cf       	rjmp	.-180    	; 0x123c <__fp_szero>
    12f0:	5f 3f       	cpi	r21, 0xFF	; 255
    12f2:	ec f3       	brlt	.-6      	; 0x12ee <__mulsf3_pse+0x82>
    12f4:	98 3e       	cpi	r25, 0xE8	; 232
    12f6:	dc f3       	brlt	.-10     	; 0x12ee <__mulsf3_pse+0x82>
    12f8:	86 95       	lsr	r24
    12fa:	77 95       	ror	r23
    12fc:	67 95       	ror	r22
    12fe:	b7 95       	ror	r27
    1300:	f7 95       	ror	r31
    1302:	e7 95       	ror	r30
    1304:	9f 5f       	subi	r25, 0xFF	; 255
    1306:	c1 f7       	brne	.-16     	; 0x12f8 <__mulsf3_pse+0x8c>
    1308:	fe 2b       	or	r31, r30
    130a:	88 0f       	add	r24, r24
    130c:	91 1d       	adc	r25, r1
    130e:	96 95       	lsr	r25
    1310:	87 95       	ror	r24
    1312:	97 f9       	bld	r25, 7
    1314:	08 95       	ret

00001316 <__tablejump2__>:
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31

0000131a <__tablejump__>:
    131a:	05 90       	lpm	r0, Z+
    131c:	f4 91       	lpm	r31, Z
    131e:	e0 2d       	mov	r30, r0
    1320:	19 94       	eijmp

00001322 <fdevopen>:
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	ec 01       	movw	r28, r24
    132c:	8b 01       	movw	r16, r22
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	31 f4       	brne	.+12     	; 0x133e <fdevopen+0x1c>
    1332:	61 15       	cp	r22, r1
    1334:	71 05       	cpc	r23, r1
    1336:	19 f4       	brne	.+6      	; 0x133e <fdevopen+0x1c>
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	37 c0       	rjmp	.+110    	; 0x13ac <fdevopen+0x8a>
    133e:	6e e0       	ldi	r22, 0x0E	; 14
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	63 d2       	rcall	.+1222   	; 0x180e <calloc>
    1348:	fc 01       	movw	r30, r24
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	a9 f3       	breq	.-22     	; 0x1338 <fdevopen+0x16>
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	83 83       	std	Z+3, r24	; 0x03
    1352:	01 15       	cp	r16, r1
    1354:	11 05       	cpc	r17, r1
    1356:	71 f0       	breq	.+28     	; 0x1374 <fdevopen+0x52>
    1358:	13 87       	std	Z+11, r17	; 0x0b
    135a:	02 87       	std	Z+10, r16	; 0x0a
    135c:	81 e8       	ldi	r24, 0x81	; 129
    135e:	83 83       	std	Z+3, r24	; 0x03
    1360:	80 91 08 03 	lds	r24, 0x0308
    1364:	90 91 09 03 	lds	r25, 0x0309
    1368:	89 2b       	or	r24, r25
    136a:	21 f4       	brne	.+8      	; 0x1374 <fdevopen+0x52>
    136c:	f0 93 09 03 	sts	0x0309, r31
    1370:	e0 93 08 03 	sts	0x0308, r30
    1374:	20 97       	sbiw	r28, 0x00	; 0
    1376:	c9 f0       	breq	.+50     	; 0x13aa <fdevopen+0x88>
    1378:	d1 87       	std	Z+9, r29	; 0x09
    137a:	c0 87       	std	Z+8, r28	; 0x08
    137c:	83 81       	ldd	r24, Z+3	; 0x03
    137e:	82 60       	ori	r24, 0x02	; 2
    1380:	83 83       	std	Z+3, r24	; 0x03
    1382:	80 91 0a 03 	lds	r24, 0x030A
    1386:	90 91 0b 03 	lds	r25, 0x030B
    138a:	89 2b       	or	r24, r25
    138c:	71 f4       	brne	.+28     	; 0x13aa <fdevopen+0x88>
    138e:	f0 93 0b 03 	sts	0x030B, r31
    1392:	e0 93 0a 03 	sts	0x030A, r30
    1396:	80 91 0c 03 	lds	r24, 0x030C
    139a:	90 91 0d 03 	lds	r25, 0x030D
    139e:	89 2b       	or	r24, r25
    13a0:	21 f4       	brne	.+8      	; 0x13aa <fdevopen+0x88>
    13a2:	f0 93 0d 03 	sts	0x030D, r31
    13a6:	e0 93 0c 03 	sts	0x030C, r30
    13aa:	cf 01       	movw	r24, r30
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <printf>:
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	fe 01       	movw	r30, r28
    13c0:	36 96       	adiw	r30, 0x06	; 6
    13c2:	61 91       	ld	r22, Z+
    13c4:	71 91       	ld	r23, Z+
    13c6:	af 01       	movw	r20, r30
    13c8:	80 91 0a 03 	lds	r24, 0x030A
    13cc:	90 91 0b 03 	lds	r25, 0x030B
    13d0:	30 d0       	rcall	.+96     	; 0x1432 <vfprintf>
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <puts>:
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	e0 91 0a 03 	lds	r30, 0x030A
    13e4:	f0 91 0b 03 	lds	r31, 0x030B
    13e8:	23 81       	ldd	r18, Z+3	; 0x03
    13ea:	21 ff       	sbrs	r18, 1
    13ec:	1b c0       	rjmp	.+54     	; 0x1424 <puts+0x4c>
    13ee:	ec 01       	movw	r28, r24
    13f0:	00 e0       	ldi	r16, 0x00	; 0
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	89 91       	ld	r24, Y+
    13f6:	60 91 0a 03 	lds	r22, 0x030A
    13fa:	70 91 0b 03 	lds	r23, 0x030B
    13fe:	db 01       	movw	r26, r22
    1400:	18 96       	adiw	r26, 0x08	; 8
    1402:	ed 91       	ld	r30, X+
    1404:	fc 91       	ld	r31, X
    1406:	19 97       	sbiw	r26, 0x09	; 9
    1408:	88 23       	and	r24, r24
    140a:	31 f0       	breq	.+12     	; 0x1418 <puts+0x40>
    140c:	19 95       	eicall
    140e:	89 2b       	or	r24, r25
    1410:	89 f3       	breq	.-30     	; 0x13f4 <puts+0x1c>
    1412:	0f ef       	ldi	r16, 0xFF	; 255
    1414:	1f ef       	ldi	r17, 0xFF	; 255
    1416:	ee cf       	rjmp	.-36     	; 0x13f4 <puts+0x1c>
    1418:	8a e0       	ldi	r24, 0x0A	; 10
    141a:	19 95       	eicall
    141c:	89 2b       	or	r24, r25
    141e:	11 f4       	brne	.+4      	; 0x1424 <puts+0x4c>
    1420:	c8 01       	movw	r24, r16
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <puts+0x50>
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	9f ef       	ldi	r25, 0xFF	; 255
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <vfprintf>:
    1432:	2f 92       	push	r2
    1434:	3f 92       	push	r3
    1436:	4f 92       	push	r4
    1438:	5f 92       	push	r5
    143a:	6f 92       	push	r6
    143c:	7f 92       	push	r7
    143e:	8f 92       	push	r8
    1440:	9f 92       	push	r9
    1442:	af 92       	push	r10
    1444:	bf 92       	push	r11
    1446:	cf 92       	push	r12
    1448:	df 92       	push	r13
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	2c 97       	sbiw	r28, 0x0c	; 12
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	7c 01       	movw	r14, r24
    1468:	6b 01       	movw	r12, r22
    146a:	8a 01       	movw	r16, r20
    146c:	fc 01       	movw	r30, r24
    146e:	17 82       	std	Z+7, r1	; 0x07
    1470:	16 82       	std	Z+6, r1	; 0x06
    1472:	83 81       	ldd	r24, Z+3	; 0x03
    1474:	81 ff       	sbrs	r24, 1
    1476:	b0 c1       	rjmp	.+864    	; 0x17d8 <vfprintf+0x3a6>
    1478:	ce 01       	movw	r24, r28
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	4c 01       	movw	r8, r24
    147e:	f7 01       	movw	r30, r14
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	f6 01       	movw	r30, r12
    1484:	93 fd       	sbrc	r25, 3
    1486:	85 91       	lpm	r24, Z+
    1488:	93 ff       	sbrs	r25, 3
    148a:	81 91       	ld	r24, Z+
    148c:	6f 01       	movw	r12, r30
    148e:	88 23       	and	r24, r24
    1490:	09 f4       	brne	.+2      	; 0x1494 <vfprintf+0x62>
    1492:	9e c1       	rjmp	.+828    	; 0x17d0 <vfprintf+0x39e>
    1494:	85 32       	cpi	r24, 0x25	; 37
    1496:	39 f4       	brne	.+14     	; 0x14a6 <vfprintf+0x74>
    1498:	93 fd       	sbrc	r25, 3
    149a:	85 91       	lpm	r24, Z+
    149c:	93 ff       	sbrs	r25, 3
    149e:	81 91       	ld	r24, Z+
    14a0:	6f 01       	movw	r12, r30
    14a2:	85 32       	cpi	r24, 0x25	; 37
    14a4:	21 f4       	brne	.+8      	; 0x14ae <vfprintf+0x7c>
    14a6:	b7 01       	movw	r22, r14
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0f d3       	rcall	.+1566   	; 0x1aca <fputc>
    14ac:	e8 cf       	rjmp	.-48     	; 0x147e <vfprintf+0x4c>
    14ae:	51 2c       	mov	r5, r1
    14b0:	31 2c       	mov	r3, r1
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	20 32       	cpi	r18, 0x20	; 32
    14b6:	a0 f4       	brcc	.+40     	; 0x14e0 <vfprintf+0xae>
    14b8:	8b 32       	cpi	r24, 0x2B	; 43
    14ba:	69 f0       	breq	.+26     	; 0x14d6 <vfprintf+0xa4>
    14bc:	30 f4       	brcc	.+12     	; 0x14ca <vfprintf+0x98>
    14be:	80 32       	cpi	r24, 0x20	; 32
    14c0:	59 f0       	breq	.+22     	; 0x14d8 <vfprintf+0xa6>
    14c2:	83 32       	cpi	r24, 0x23	; 35
    14c4:	69 f4       	brne	.+26     	; 0x14e0 <vfprintf+0xae>
    14c6:	20 61       	ori	r18, 0x10	; 16
    14c8:	2c c0       	rjmp	.+88     	; 0x1522 <vfprintf+0xf0>
    14ca:	8d 32       	cpi	r24, 0x2D	; 45
    14cc:	39 f0       	breq	.+14     	; 0x14dc <vfprintf+0xaa>
    14ce:	80 33       	cpi	r24, 0x30	; 48
    14d0:	39 f4       	brne	.+14     	; 0x14e0 <vfprintf+0xae>
    14d2:	21 60       	ori	r18, 0x01	; 1
    14d4:	26 c0       	rjmp	.+76     	; 0x1522 <vfprintf+0xf0>
    14d6:	22 60       	ori	r18, 0x02	; 2
    14d8:	24 60       	ori	r18, 0x04	; 4
    14da:	23 c0       	rjmp	.+70     	; 0x1522 <vfprintf+0xf0>
    14dc:	28 60       	ori	r18, 0x08	; 8
    14de:	21 c0       	rjmp	.+66     	; 0x1522 <vfprintf+0xf0>
    14e0:	27 fd       	sbrc	r18, 7
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <vfprintf+0x100>
    14e4:	30 ed       	ldi	r19, 0xD0	; 208
    14e6:	38 0f       	add	r19, r24
    14e8:	3a 30       	cpi	r19, 0x0A	; 10
    14ea:	78 f4       	brcc	.+30     	; 0x150a <vfprintf+0xd8>
    14ec:	26 ff       	sbrs	r18, 6
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <vfprintf+0xca>
    14f0:	fa e0       	ldi	r31, 0x0A	; 10
    14f2:	5f 9e       	mul	r5, r31
    14f4:	30 0d       	add	r19, r0
    14f6:	11 24       	eor	r1, r1
    14f8:	53 2e       	mov	r5, r19
    14fa:	13 c0       	rjmp	.+38     	; 0x1522 <vfprintf+0xf0>
    14fc:	8a e0       	ldi	r24, 0x0A	; 10
    14fe:	38 9e       	mul	r3, r24
    1500:	30 0d       	add	r19, r0
    1502:	11 24       	eor	r1, r1
    1504:	33 2e       	mov	r3, r19
    1506:	20 62       	ori	r18, 0x20	; 32
    1508:	0c c0       	rjmp	.+24     	; 0x1522 <vfprintf+0xf0>
    150a:	8e 32       	cpi	r24, 0x2E	; 46
    150c:	21 f4       	brne	.+8      	; 0x1516 <vfprintf+0xe4>
    150e:	26 fd       	sbrc	r18, 6
    1510:	5f c1       	rjmp	.+702    	; 0x17d0 <vfprintf+0x39e>
    1512:	20 64       	ori	r18, 0x40	; 64
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <vfprintf+0xf0>
    1516:	8c 36       	cpi	r24, 0x6C	; 108
    1518:	11 f4       	brne	.+4      	; 0x151e <vfprintf+0xec>
    151a:	20 68       	ori	r18, 0x80	; 128
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <vfprintf+0xf0>
    151e:	88 36       	cpi	r24, 0x68	; 104
    1520:	41 f4       	brne	.+16     	; 0x1532 <vfprintf+0x100>
    1522:	f6 01       	movw	r30, r12
    1524:	93 fd       	sbrc	r25, 3
    1526:	85 91       	lpm	r24, Z+
    1528:	93 ff       	sbrs	r25, 3
    152a:	81 91       	ld	r24, Z+
    152c:	6f 01       	movw	r12, r30
    152e:	81 11       	cpse	r24, r1
    1530:	c1 cf       	rjmp	.-126    	; 0x14b4 <vfprintf+0x82>
    1532:	98 2f       	mov	r25, r24
    1534:	9f 7d       	andi	r25, 0xDF	; 223
    1536:	95 54       	subi	r25, 0x45	; 69
    1538:	93 30       	cpi	r25, 0x03	; 3
    153a:	28 f4       	brcc	.+10     	; 0x1546 <vfprintf+0x114>
    153c:	0c 5f       	subi	r16, 0xFC	; 252
    153e:	1f 4f       	sbci	r17, 0xFF	; 255
    1540:	ff e3       	ldi	r31, 0x3F	; 63
    1542:	f9 83       	std	Y+1, r31	; 0x01
    1544:	0d c0       	rjmp	.+26     	; 0x1560 <vfprintf+0x12e>
    1546:	83 36       	cpi	r24, 0x63	; 99
    1548:	31 f0       	breq	.+12     	; 0x1556 <vfprintf+0x124>
    154a:	83 37       	cpi	r24, 0x73	; 115
    154c:	71 f0       	breq	.+28     	; 0x156a <vfprintf+0x138>
    154e:	83 35       	cpi	r24, 0x53	; 83
    1550:	09 f0       	breq	.+2      	; 0x1554 <vfprintf+0x122>
    1552:	57 c0       	rjmp	.+174    	; 0x1602 <vfprintf+0x1d0>
    1554:	21 c0       	rjmp	.+66     	; 0x1598 <vfprintf+0x166>
    1556:	f8 01       	movw	r30, r16
    1558:	80 81       	ld	r24, Z
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	0e 5f       	subi	r16, 0xFE	; 254
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	44 24       	eor	r4, r4
    1562:	43 94       	inc	r4
    1564:	51 2c       	mov	r5, r1
    1566:	54 01       	movw	r10, r8
    1568:	14 c0       	rjmp	.+40     	; 0x1592 <vfprintf+0x160>
    156a:	38 01       	movw	r6, r16
    156c:	f2 e0       	ldi	r31, 0x02	; 2
    156e:	6f 0e       	add	r6, r31
    1570:	71 1c       	adc	r7, r1
    1572:	f8 01       	movw	r30, r16
    1574:	a0 80       	ld	r10, Z
    1576:	b1 80       	ldd	r11, Z+1	; 0x01
    1578:	26 ff       	sbrs	r18, 6
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <vfprintf+0x150>
    157c:	65 2d       	mov	r22, r5
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <vfprintf+0x154>
    1582:	6f ef       	ldi	r22, 0xFF	; 255
    1584:	7f ef       	ldi	r23, 0xFF	; 255
    1586:	c5 01       	movw	r24, r10
    1588:	2c 87       	std	Y+12, r18	; 0x0c
    158a:	94 d2       	rcall	.+1320   	; 0x1ab4 <strnlen>
    158c:	2c 01       	movw	r4, r24
    158e:	83 01       	movw	r16, r6
    1590:	2c 85       	ldd	r18, Y+12	; 0x0c
    1592:	2f 77       	andi	r18, 0x7F	; 127
    1594:	22 2e       	mov	r2, r18
    1596:	16 c0       	rjmp	.+44     	; 0x15c4 <vfprintf+0x192>
    1598:	38 01       	movw	r6, r16
    159a:	f2 e0       	ldi	r31, 0x02	; 2
    159c:	6f 0e       	add	r6, r31
    159e:	71 1c       	adc	r7, r1
    15a0:	f8 01       	movw	r30, r16
    15a2:	a0 80       	ld	r10, Z
    15a4:	b1 80       	ldd	r11, Z+1	; 0x01
    15a6:	26 ff       	sbrs	r18, 6
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <vfprintf+0x17e>
    15aa:	65 2d       	mov	r22, r5
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <vfprintf+0x182>
    15b0:	6f ef       	ldi	r22, 0xFF	; 255
    15b2:	7f ef       	ldi	r23, 0xFF	; 255
    15b4:	c5 01       	movw	r24, r10
    15b6:	2c 87       	std	Y+12, r18	; 0x0c
    15b8:	6b d2       	rcall	.+1238   	; 0x1a90 <strnlen_P>
    15ba:	2c 01       	movw	r4, r24
    15bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15be:	20 68       	ori	r18, 0x80	; 128
    15c0:	22 2e       	mov	r2, r18
    15c2:	83 01       	movw	r16, r6
    15c4:	23 fc       	sbrc	r2, 3
    15c6:	19 c0       	rjmp	.+50     	; 0x15fa <vfprintf+0x1c8>
    15c8:	83 2d       	mov	r24, r3
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	48 16       	cp	r4, r24
    15ce:	59 06       	cpc	r5, r25
    15d0:	a0 f4       	brcc	.+40     	; 0x15fa <vfprintf+0x1c8>
    15d2:	b7 01       	movw	r22, r14
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	78 d2       	rcall	.+1264   	; 0x1aca <fputc>
    15da:	3a 94       	dec	r3
    15dc:	f5 cf       	rjmp	.-22     	; 0x15c8 <vfprintf+0x196>
    15de:	f5 01       	movw	r30, r10
    15e0:	27 fc       	sbrc	r2, 7
    15e2:	85 91       	lpm	r24, Z+
    15e4:	27 fe       	sbrs	r2, 7
    15e6:	81 91       	ld	r24, Z+
    15e8:	5f 01       	movw	r10, r30
    15ea:	b7 01       	movw	r22, r14
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	6d d2       	rcall	.+1242   	; 0x1aca <fputc>
    15f0:	31 10       	cpse	r3, r1
    15f2:	3a 94       	dec	r3
    15f4:	f1 e0       	ldi	r31, 0x01	; 1
    15f6:	4f 1a       	sub	r4, r31
    15f8:	51 08       	sbc	r5, r1
    15fa:	41 14       	cp	r4, r1
    15fc:	51 04       	cpc	r5, r1
    15fe:	79 f7       	brne	.-34     	; 0x15de <vfprintf+0x1ac>
    1600:	de c0       	rjmp	.+444    	; 0x17be <vfprintf+0x38c>
    1602:	84 36       	cpi	r24, 0x64	; 100
    1604:	11 f0       	breq	.+4      	; 0x160a <vfprintf+0x1d8>
    1606:	89 36       	cpi	r24, 0x69	; 105
    1608:	31 f5       	brne	.+76     	; 0x1656 <vfprintf+0x224>
    160a:	f8 01       	movw	r30, r16
    160c:	27 ff       	sbrs	r18, 7
    160e:	07 c0       	rjmp	.+14     	; 0x161e <vfprintf+0x1ec>
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	0c 5f       	subi	r16, 0xFC	; 252
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	08 c0       	rjmp	.+16     	; 0x162e <vfprintf+0x1fc>
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	88 27       	eor	r24, r24
    1624:	77 fd       	sbrc	r23, 7
    1626:	80 95       	com	r24
    1628:	98 2f       	mov	r25, r24
    162a:	0e 5f       	subi	r16, 0xFE	; 254
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	2f 76       	andi	r18, 0x6F	; 111
    1630:	b2 2e       	mov	r11, r18
    1632:	97 ff       	sbrs	r25, 7
    1634:	09 c0       	rjmp	.+18     	; 0x1648 <vfprintf+0x216>
    1636:	90 95       	com	r25
    1638:	80 95       	com	r24
    163a:	70 95       	com	r23
    163c:	61 95       	neg	r22
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	8f 4f       	sbci	r24, 0xFF	; 255
    1642:	9f 4f       	sbci	r25, 0xFF	; 255
    1644:	20 68       	ori	r18, 0x80	; 128
    1646:	b2 2e       	mov	r11, r18
    1648:	2a e0       	ldi	r18, 0x0A	; 10
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	a4 01       	movw	r20, r8
    164e:	6f d2       	rcall	.+1246   	; 0x1b2e <__ultoa_invert>
    1650:	a8 2e       	mov	r10, r24
    1652:	a8 18       	sub	r10, r8
    1654:	43 c0       	rjmp	.+134    	; 0x16dc <vfprintf+0x2aa>
    1656:	85 37       	cpi	r24, 0x75	; 117
    1658:	29 f4       	brne	.+10     	; 0x1664 <vfprintf+0x232>
    165a:	2f 7e       	andi	r18, 0xEF	; 239
    165c:	b2 2e       	mov	r11, r18
    165e:	2a e0       	ldi	r18, 0x0A	; 10
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	25 c0       	rjmp	.+74     	; 0x16ae <vfprintf+0x27c>
    1664:	f2 2f       	mov	r31, r18
    1666:	f9 7f       	andi	r31, 0xF9	; 249
    1668:	bf 2e       	mov	r11, r31
    166a:	8f 36       	cpi	r24, 0x6F	; 111
    166c:	c1 f0       	breq	.+48     	; 0x169e <vfprintf+0x26c>
    166e:	18 f4       	brcc	.+6      	; 0x1676 <vfprintf+0x244>
    1670:	88 35       	cpi	r24, 0x58	; 88
    1672:	79 f0       	breq	.+30     	; 0x1692 <vfprintf+0x260>
    1674:	ad c0       	rjmp	.+346    	; 0x17d0 <vfprintf+0x39e>
    1676:	80 37       	cpi	r24, 0x70	; 112
    1678:	19 f0       	breq	.+6      	; 0x1680 <vfprintf+0x24e>
    167a:	88 37       	cpi	r24, 0x78	; 120
    167c:	21 f0       	breq	.+8      	; 0x1686 <vfprintf+0x254>
    167e:	a8 c0       	rjmp	.+336    	; 0x17d0 <vfprintf+0x39e>
    1680:	2f 2f       	mov	r18, r31
    1682:	20 61       	ori	r18, 0x10	; 16
    1684:	b2 2e       	mov	r11, r18
    1686:	b4 fe       	sbrs	r11, 4
    1688:	0d c0       	rjmp	.+26     	; 0x16a4 <vfprintf+0x272>
    168a:	8b 2d       	mov	r24, r11
    168c:	84 60       	ori	r24, 0x04	; 4
    168e:	b8 2e       	mov	r11, r24
    1690:	09 c0       	rjmp	.+18     	; 0x16a4 <vfprintf+0x272>
    1692:	24 ff       	sbrs	r18, 4
    1694:	0a c0       	rjmp	.+20     	; 0x16aa <vfprintf+0x278>
    1696:	9f 2f       	mov	r25, r31
    1698:	96 60       	ori	r25, 0x06	; 6
    169a:	b9 2e       	mov	r11, r25
    169c:	06 c0       	rjmp	.+12     	; 0x16aa <vfprintf+0x278>
    169e:	28 e0       	ldi	r18, 0x08	; 8
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <vfprintf+0x27c>
    16a4:	20 e1       	ldi	r18, 0x10	; 16
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <vfprintf+0x27c>
    16aa:	20 e1       	ldi	r18, 0x10	; 16
    16ac:	32 e0       	ldi	r19, 0x02	; 2
    16ae:	f8 01       	movw	r30, r16
    16b0:	b7 fe       	sbrs	r11, 7
    16b2:	07 c0       	rjmp	.+14     	; 0x16c2 <vfprintf+0x290>
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	0c 5f       	subi	r16, 0xFC	; 252
    16be:	1f 4f       	sbci	r17, 0xFF	; 255
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <vfprintf+0x29c>
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 5f       	subi	r16, 0xFE	; 254
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	a4 01       	movw	r20, r8
    16d0:	2e d2       	rcall	.+1116   	; 0x1b2e <__ultoa_invert>
    16d2:	a8 2e       	mov	r10, r24
    16d4:	a8 18       	sub	r10, r8
    16d6:	fb 2d       	mov	r31, r11
    16d8:	ff 77       	andi	r31, 0x7F	; 127
    16da:	bf 2e       	mov	r11, r31
    16dc:	b6 fe       	sbrs	r11, 6
    16de:	0b c0       	rjmp	.+22     	; 0x16f6 <vfprintf+0x2c4>
    16e0:	2b 2d       	mov	r18, r11
    16e2:	2e 7f       	andi	r18, 0xFE	; 254
    16e4:	a5 14       	cp	r10, r5
    16e6:	50 f4       	brcc	.+20     	; 0x16fc <vfprintf+0x2ca>
    16e8:	b4 fe       	sbrs	r11, 4
    16ea:	0a c0       	rjmp	.+20     	; 0x1700 <vfprintf+0x2ce>
    16ec:	b2 fc       	sbrc	r11, 2
    16ee:	08 c0       	rjmp	.+16     	; 0x1700 <vfprintf+0x2ce>
    16f0:	2b 2d       	mov	r18, r11
    16f2:	2e 7e       	andi	r18, 0xEE	; 238
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <vfprintf+0x2ce>
    16f6:	7a 2c       	mov	r7, r10
    16f8:	2b 2d       	mov	r18, r11
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <vfprintf+0x2d0>
    16fc:	7a 2c       	mov	r7, r10
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <vfprintf+0x2d0>
    1700:	75 2c       	mov	r7, r5
    1702:	24 ff       	sbrs	r18, 4
    1704:	0d c0       	rjmp	.+26     	; 0x1720 <vfprintf+0x2ee>
    1706:	fe 01       	movw	r30, r28
    1708:	ea 0d       	add	r30, r10
    170a:	f1 1d       	adc	r31, r1
    170c:	80 81       	ld	r24, Z
    170e:	80 33       	cpi	r24, 0x30	; 48
    1710:	11 f4       	brne	.+4      	; 0x1716 <vfprintf+0x2e4>
    1712:	29 7e       	andi	r18, 0xE9	; 233
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <vfprintf+0x2f6>
    1716:	22 ff       	sbrs	r18, 2
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <vfprintf+0x2f4>
    171a:	73 94       	inc	r7
    171c:	73 94       	inc	r7
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <vfprintf+0x2f6>
    1720:	82 2f       	mov	r24, r18
    1722:	86 78       	andi	r24, 0x86	; 134
    1724:	09 f0       	breq	.+2      	; 0x1728 <vfprintf+0x2f6>
    1726:	73 94       	inc	r7
    1728:	23 fd       	sbrc	r18, 3
    172a:	12 c0       	rjmp	.+36     	; 0x1750 <vfprintf+0x31e>
    172c:	20 ff       	sbrs	r18, 0
    172e:	06 c0       	rjmp	.+12     	; 0x173c <vfprintf+0x30a>
    1730:	5a 2c       	mov	r5, r10
    1732:	73 14       	cp	r7, r3
    1734:	18 f4       	brcc	.+6      	; 0x173c <vfprintf+0x30a>
    1736:	53 0c       	add	r5, r3
    1738:	57 18       	sub	r5, r7
    173a:	73 2c       	mov	r7, r3
    173c:	73 14       	cp	r7, r3
    173e:	60 f4       	brcc	.+24     	; 0x1758 <vfprintf+0x326>
    1740:	b7 01       	movw	r22, r14
    1742:	80 e2       	ldi	r24, 0x20	; 32
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	2c 87       	std	Y+12, r18	; 0x0c
    1748:	c0 d1       	rcall	.+896    	; 0x1aca <fputc>
    174a:	73 94       	inc	r7
    174c:	2c 85       	ldd	r18, Y+12	; 0x0c
    174e:	f6 cf       	rjmp	.-20     	; 0x173c <vfprintf+0x30a>
    1750:	73 14       	cp	r7, r3
    1752:	10 f4       	brcc	.+4      	; 0x1758 <vfprintf+0x326>
    1754:	37 18       	sub	r3, r7
    1756:	01 c0       	rjmp	.+2      	; 0x175a <vfprintf+0x328>
    1758:	31 2c       	mov	r3, r1
    175a:	24 ff       	sbrs	r18, 4
    175c:	11 c0       	rjmp	.+34     	; 0x1780 <vfprintf+0x34e>
    175e:	b7 01       	movw	r22, r14
    1760:	80 e3       	ldi	r24, 0x30	; 48
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	2c 87       	std	Y+12, r18	; 0x0c
    1766:	b1 d1       	rcall	.+866    	; 0x1aca <fputc>
    1768:	2c 85       	ldd	r18, Y+12	; 0x0c
    176a:	22 ff       	sbrs	r18, 2
    176c:	16 c0       	rjmp	.+44     	; 0x179a <vfprintf+0x368>
    176e:	21 ff       	sbrs	r18, 1
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <vfprintf+0x346>
    1772:	88 e5       	ldi	r24, 0x58	; 88
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0x34a>
    1778:	88 e7       	ldi	r24, 0x78	; 120
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	b7 01       	movw	r22, r14
    177e:	0c c0       	rjmp	.+24     	; 0x1798 <vfprintf+0x366>
    1780:	82 2f       	mov	r24, r18
    1782:	86 78       	andi	r24, 0x86	; 134
    1784:	51 f0       	breq	.+20     	; 0x179a <vfprintf+0x368>
    1786:	21 fd       	sbrc	r18, 1
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x35c>
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <vfprintf+0x35e>
    178e:	8b e2       	ldi	r24, 0x2B	; 43
    1790:	27 fd       	sbrc	r18, 7
    1792:	8d e2       	ldi	r24, 0x2D	; 45
    1794:	b7 01       	movw	r22, r14
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	98 d1       	rcall	.+816    	; 0x1aca <fputc>
    179a:	a5 14       	cp	r10, r5
    179c:	30 f4       	brcc	.+12     	; 0x17aa <vfprintf+0x378>
    179e:	b7 01       	movw	r22, r14
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	92 d1       	rcall	.+804    	; 0x1aca <fputc>
    17a6:	5a 94       	dec	r5
    17a8:	f8 cf       	rjmp	.-16     	; 0x179a <vfprintf+0x368>
    17aa:	aa 94       	dec	r10
    17ac:	f4 01       	movw	r30, r8
    17ae:	ea 0d       	add	r30, r10
    17b0:	f1 1d       	adc	r31, r1
    17b2:	80 81       	ld	r24, Z
    17b4:	b7 01       	movw	r22, r14
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	88 d1       	rcall	.+784    	; 0x1aca <fputc>
    17ba:	a1 10       	cpse	r10, r1
    17bc:	f6 cf       	rjmp	.-20     	; 0x17aa <vfprintf+0x378>
    17be:	33 20       	and	r3, r3
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <vfprintf+0x392>
    17c2:	5d ce       	rjmp	.-838    	; 0x147e <vfprintf+0x4c>
    17c4:	b7 01       	movw	r22, r14
    17c6:	80 e2       	ldi	r24, 0x20	; 32
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	7f d1       	rcall	.+766    	; 0x1aca <fputc>
    17cc:	3a 94       	dec	r3
    17ce:	f7 cf       	rjmp	.-18     	; 0x17be <vfprintf+0x38c>
    17d0:	f7 01       	movw	r30, r14
    17d2:	86 81       	ldd	r24, Z+6	; 0x06
    17d4:	97 81       	ldd	r25, Z+7	; 0x07
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vfprintf+0x3aa>
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	9f ef       	ldi	r25, 0xFF	; 255
    17dc:	2c 96       	adiw	r28, 0x0c	; 12
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	bf 90       	pop	r11
    17fa:	af 90       	pop	r10
    17fc:	9f 90       	pop	r9
    17fe:	8f 90       	pop	r8
    1800:	7f 90       	pop	r7
    1802:	6f 90       	pop	r6
    1804:	5f 90       	pop	r5
    1806:	4f 90       	pop	r4
    1808:	3f 90       	pop	r3
    180a:	2f 90       	pop	r2
    180c:	08 95       	ret

0000180e <calloc>:
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	86 9f       	mul	r24, r22
    1818:	80 01       	movw	r16, r0
    181a:	87 9f       	mul	r24, r23
    181c:	10 0d       	add	r17, r0
    181e:	96 9f       	mul	r25, r22
    1820:	10 0d       	add	r17, r0
    1822:	11 24       	eor	r1, r1
    1824:	c8 01       	movw	r24, r16
    1826:	0d d0       	rcall	.+26     	; 0x1842 <malloc>
    1828:	ec 01       	movw	r28, r24
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	21 f0       	breq	.+8      	; 0x1836 <calloc+0x28>
    182e:	a8 01       	movw	r20, r16
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	38 d1       	rcall	.+624    	; 0x1aa6 <memset>
    1836:	ce 01       	movw	r24, r28
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <malloc>:
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	91 05       	cpc	r25, r1
    184a:	10 f4       	brcc	.+4      	; 0x1850 <malloc+0xe>
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	e0 91 10 03 	lds	r30, 0x0310
    1854:	f0 91 11 03 	lds	r31, 0x0311
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	a0 e0       	ldi	r26, 0x00	; 0
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	30 97       	sbiw	r30, 0x00	; 0
    1862:	39 f1       	breq	.+78     	; 0x18b2 <malloc+0x70>
    1864:	40 81       	ld	r20, Z
    1866:	51 81       	ldd	r21, Z+1	; 0x01
    1868:	48 17       	cp	r20, r24
    186a:	59 07       	cpc	r21, r25
    186c:	b8 f0       	brcs	.+46     	; 0x189c <malloc+0x5a>
    186e:	48 17       	cp	r20, r24
    1870:	59 07       	cpc	r21, r25
    1872:	71 f4       	brne	.+28     	; 0x1890 <malloc+0x4e>
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	10 97       	sbiw	r26, 0x00	; 0
    187a:	29 f0       	breq	.+10     	; 0x1886 <malloc+0x44>
    187c:	13 96       	adiw	r26, 0x03	; 3
    187e:	9c 93       	st	X, r25
    1880:	8e 93       	st	-X, r24
    1882:	12 97       	sbiw	r26, 0x02	; 2
    1884:	2c c0       	rjmp	.+88     	; 0x18de <malloc+0x9c>
    1886:	90 93 11 03 	sts	0x0311, r25
    188a:	80 93 10 03 	sts	0x0310, r24
    188e:	27 c0       	rjmp	.+78     	; 0x18de <malloc+0x9c>
    1890:	21 15       	cp	r18, r1
    1892:	31 05       	cpc	r19, r1
    1894:	31 f0       	breq	.+12     	; 0x18a2 <malloc+0x60>
    1896:	42 17       	cp	r20, r18
    1898:	53 07       	cpc	r21, r19
    189a:	18 f0       	brcs	.+6      	; 0x18a2 <malloc+0x60>
    189c:	a9 01       	movw	r20, r18
    189e:	db 01       	movw	r26, r22
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <malloc+0x62>
    18a2:	ef 01       	movw	r28, r30
    18a4:	9a 01       	movw	r18, r20
    18a6:	bd 01       	movw	r22, r26
    18a8:	df 01       	movw	r26, r30
    18aa:	02 80       	ldd	r0, Z+2	; 0x02
    18ac:	f3 81       	ldd	r31, Z+3	; 0x03
    18ae:	e0 2d       	mov	r30, r0
    18b0:	d7 cf       	rjmp	.-82     	; 0x1860 <malloc+0x1e>
    18b2:	21 15       	cp	r18, r1
    18b4:	31 05       	cpc	r19, r1
    18b6:	f9 f0       	breq	.+62     	; 0x18f6 <malloc+0xb4>
    18b8:	28 1b       	sub	r18, r24
    18ba:	39 0b       	sbc	r19, r25
    18bc:	24 30       	cpi	r18, 0x04	; 4
    18be:	31 05       	cpc	r19, r1
    18c0:	80 f4       	brcc	.+32     	; 0x18e2 <malloc+0xa0>
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	9b 81       	ldd	r25, Y+3	; 0x03
    18c6:	61 15       	cp	r22, r1
    18c8:	71 05       	cpc	r23, r1
    18ca:	21 f0       	breq	.+8      	; 0x18d4 <malloc+0x92>
    18cc:	fb 01       	movw	r30, r22
    18ce:	93 83       	std	Z+3, r25	; 0x03
    18d0:	82 83       	std	Z+2, r24	; 0x02
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <malloc+0x9a>
    18d4:	90 93 11 03 	sts	0x0311, r25
    18d8:	80 93 10 03 	sts	0x0310, r24
    18dc:	fe 01       	movw	r30, r28
    18de:	32 96       	adiw	r30, 0x02	; 2
    18e0:	44 c0       	rjmp	.+136    	; 0x196a <malloc+0x128>
    18e2:	fe 01       	movw	r30, r28
    18e4:	e2 0f       	add	r30, r18
    18e6:	f3 1f       	adc	r31, r19
    18e8:	81 93       	st	Z+, r24
    18ea:	91 93       	st	Z+, r25
    18ec:	22 50       	subi	r18, 0x02	; 2
    18ee:	31 09       	sbc	r19, r1
    18f0:	39 83       	std	Y+1, r19	; 0x01
    18f2:	28 83       	st	Y, r18
    18f4:	3a c0       	rjmp	.+116    	; 0x196a <malloc+0x128>
    18f6:	20 91 0e 03 	lds	r18, 0x030E
    18fa:	30 91 0f 03 	lds	r19, 0x030F
    18fe:	23 2b       	or	r18, r19
    1900:	41 f4       	brne	.+16     	; 0x1912 <malloc+0xd0>
    1902:	20 91 02 02 	lds	r18, 0x0202
    1906:	30 91 03 02 	lds	r19, 0x0203
    190a:	30 93 0f 03 	sts	0x030F, r19
    190e:	20 93 0e 03 	sts	0x030E, r18
    1912:	20 91 00 02 	lds	r18, 0x0200
    1916:	30 91 01 02 	lds	r19, 0x0201
    191a:	21 15       	cp	r18, r1
    191c:	31 05       	cpc	r19, r1
    191e:	41 f4       	brne	.+16     	; 0x1930 <malloc+0xee>
    1920:	2d b7       	in	r18, 0x3d	; 61
    1922:	3e b7       	in	r19, 0x3e	; 62
    1924:	40 91 04 02 	lds	r20, 0x0204
    1928:	50 91 05 02 	lds	r21, 0x0205
    192c:	24 1b       	sub	r18, r20
    192e:	35 0b       	sbc	r19, r21
    1930:	e0 91 0e 03 	lds	r30, 0x030E
    1934:	f0 91 0f 03 	lds	r31, 0x030F
    1938:	e2 17       	cp	r30, r18
    193a:	f3 07       	cpc	r31, r19
    193c:	a0 f4       	brcc	.+40     	; 0x1966 <malloc+0x124>
    193e:	2e 1b       	sub	r18, r30
    1940:	3f 0b       	sbc	r19, r31
    1942:	28 17       	cp	r18, r24
    1944:	39 07       	cpc	r19, r25
    1946:	78 f0       	brcs	.+30     	; 0x1966 <malloc+0x124>
    1948:	ac 01       	movw	r20, r24
    194a:	4e 5f       	subi	r20, 0xFE	; 254
    194c:	5f 4f       	sbci	r21, 0xFF	; 255
    194e:	24 17       	cp	r18, r20
    1950:	35 07       	cpc	r19, r21
    1952:	48 f0       	brcs	.+18     	; 0x1966 <malloc+0x124>
    1954:	4e 0f       	add	r20, r30
    1956:	5f 1f       	adc	r21, r31
    1958:	50 93 0f 03 	sts	0x030F, r21
    195c:	40 93 0e 03 	sts	0x030E, r20
    1960:	81 93       	st	Z+, r24
    1962:	91 93       	st	Z+, r25
    1964:	02 c0       	rjmp	.+4      	; 0x196a <malloc+0x128>
    1966:	e0 e0       	ldi	r30, 0x00	; 0
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	cf 01       	movw	r24, r30
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <free>:
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	09 f4       	brne	.+2      	; 0x197c <free+0xa>
    197a:	87 c0       	rjmp	.+270    	; 0x1a8a <free+0x118>
    197c:	fc 01       	movw	r30, r24
    197e:	32 97       	sbiw	r30, 0x02	; 2
    1980:	13 82       	std	Z+3, r1	; 0x03
    1982:	12 82       	std	Z+2, r1	; 0x02
    1984:	c0 91 10 03 	lds	r28, 0x0310
    1988:	d0 91 11 03 	lds	r29, 0x0311
    198c:	20 97       	sbiw	r28, 0x00	; 0
    198e:	81 f4       	brne	.+32     	; 0x19b0 <free+0x3e>
    1990:	20 81       	ld	r18, Z
    1992:	31 81       	ldd	r19, Z+1	; 0x01
    1994:	28 0f       	add	r18, r24
    1996:	39 1f       	adc	r19, r25
    1998:	80 91 0e 03 	lds	r24, 0x030E
    199c:	90 91 0f 03 	lds	r25, 0x030F
    19a0:	82 17       	cp	r24, r18
    19a2:	93 07       	cpc	r25, r19
    19a4:	79 f5       	brne	.+94     	; 0x1a04 <free+0x92>
    19a6:	f0 93 0f 03 	sts	0x030F, r31
    19aa:	e0 93 0e 03 	sts	0x030E, r30
    19ae:	6d c0       	rjmp	.+218    	; 0x1a8a <free+0x118>
    19b0:	de 01       	movw	r26, r28
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	ae 17       	cp	r26, r30
    19b8:	bf 07       	cpc	r27, r31
    19ba:	50 f4       	brcc	.+20     	; 0x19d0 <free+0x5e>
    19bc:	12 96       	adiw	r26, 0x02	; 2
    19be:	4d 91       	ld	r20, X+
    19c0:	5c 91       	ld	r21, X
    19c2:	13 97       	sbiw	r26, 0x03	; 3
    19c4:	9d 01       	movw	r18, r26
    19c6:	41 15       	cp	r20, r1
    19c8:	51 05       	cpc	r21, r1
    19ca:	09 f1       	breq	.+66     	; 0x1a0e <free+0x9c>
    19cc:	da 01       	movw	r26, r20
    19ce:	f3 cf       	rjmp	.-26     	; 0x19b6 <free+0x44>
    19d0:	b3 83       	std	Z+3, r27	; 0x03
    19d2:	a2 83       	std	Z+2, r26	; 0x02
    19d4:	40 81       	ld	r20, Z
    19d6:	51 81       	ldd	r21, Z+1	; 0x01
    19d8:	84 0f       	add	r24, r20
    19da:	95 1f       	adc	r25, r21
    19dc:	8a 17       	cp	r24, r26
    19de:	9b 07       	cpc	r25, r27
    19e0:	71 f4       	brne	.+28     	; 0x19fe <free+0x8c>
    19e2:	8d 91       	ld	r24, X+
    19e4:	9c 91       	ld	r25, X
    19e6:	11 97       	sbiw	r26, 0x01	; 1
    19e8:	84 0f       	add	r24, r20
    19ea:	95 1f       	adc	r25, r21
    19ec:	02 96       	adiw	r24, 0x02	; 2
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
    19f2:	12 96       	adiw	r26, 0x02	; 2
    19f4:	8d 91       	ld	r24, X+
    19f6:	9c 91       	ld	r25, X
    19f8:	13 97       	sbiw	r26, 0x03	; 3
    19fa:	93 83       	std	Z+3, r25	; 0x03
    19fc:	82 83       	std	Z+2, r24	; 0x02
    19fe:	21 15       	cp	r18, r1
    1a00:	31 05       	cpc	r19, r1
    1a02:	29 f4       	brne	.+10     	; 0x1a0e <free+0x9c>
    1a04:	f0 93 11 03 	sts	0x0311, r31
    1a08:	e0 93 10 03 	sts	0x0310, r30
    1a0c:	3e c0       	rjmp	.+124    	; 0x1a8a <free+0x118>
    1a0e:	d9 01       	movw	r26, r18
    1a10:	13 96       	adiw	r26, 0x03	; 3
    1a12:	fc 93       	st	X, r31
    1a14:	ee 93       	st	-X, r30
    1a16:	12 97       	sbiw	r26, 0x02	; 2
    1a18:	4d 91       	ld	r20, X+
    1a1a:	5d 91       	ld	r21, X+
    1a1c:	a4 0f       	add	r26, r20
    1a1e:	b5 1f       	adc	r27, r21
    1a20:	ea 17       	cp	r30, r26
    1a22:	fb 07       	cpc	r31, r27
    1a24:	79 f4       	brne	.+30     	; 0x1a44 <free+0xd2>
    1a26:	80 81       	ld	r24, Z
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
    1a2a:	84 0f       	add	r24, r20
    1a2c:	95 1f       	adc	r25, r21
    1a2e:	02 96       	adiw	r24, 0x02	; 2
    1a30:	d9 01       	movw	r26, r18
    1a32:	11 96       	adiw	r26, 0x01	; 1
    1a34:	9c 93       	st	X, r25
    1a36:	8e 93       	st	-X, r24
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	13 96       	adiw	r26, 0x03	; 3
    1a3e:	9c 93       	st	X, r25
    1a40:	8e 93       	st	-X, r24
    1a42:	12 97       	sbiw	r26, 0x02	; 2
    1a44:	e0 e0       	ldi	r30, 0x00	; 0
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	19 f0       	breq	.+6      	; 0x1a56 <free+0xe4>
    1a50:	fe 01       	movw	r30, r28
    1a52:	ec 01       	movw	r28, r24
    1a54:	f9 cf       	rjmp	.-14     	; 0x1a48 <free+0xd6>
    1a56:	ce 01       	movw	r24, r28
    1a58:	02 96       	adiw	r24, 0x02	; 2
    1a5a:	28 81       	ld	r18, Y
    1a5c:	39 81       	ldd	r19, Y+1	; 0x01
    1a5e:	82 0f       	add	r24, r18
    1a60:	93 1f       	adc	r25, r19
    1a62:	20 91 0e 03 	lds	r18, 0x030E
    1a66:	30 91 0f 03 	lds	r19, 0x030F
    1a6a:	28 17       	cp	r18, r24
    1a6c:	39 07       	cpc	r19, r25
    1a6e:	69 f4       	brne	.+26     	; 0x1a8a <free+0x118>
    1a70:	30 97       	sbiw	r30, 0x00	; 0
    1a72:	29 f4       	brne	.+10     	; 0x1a7e <free+0x10c>
    1a74:	10 92 11 03 	sts	0x0311, r1
    1a78:	10 92 10 03 	sts	0x0310, r1
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <free+0x110>
    1a7e:	13 82       	std	Z+3, r1	; 0x03
    1a80:	12 82       	std	Z+2, r1	; 0x02
    1a82:	d0 93 0f 03 	sts	0x030F, r29
    1a86:	c0 93 0e 03 	sts	0x030E, r28
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <strnlen_P>:
    1a90:	fc 01       	movw	r30, r24
    1a92:	05 90       	lpm	r0, Z+
    1a94:	61 50       	subi	r22, 0x01	; 1
    1a96:	70 40       	sbci	r23, 0x00	; 0
    1a98:	01 10       	cpse	r0, r1
    1a9a:	d8 f7       	brcc	.-10     	; 0x1a92 <strnlen_P+0x2>
    1a9c:	80 95       	com	r24
    1a9e:	90 95       	com	r25
    1aa0:	8e 0f       	add	r24, r30
    1aa2:	9f 1f       	adc	r25, r31
    1aa4:	08 95       	ret

00001aa6 <memset>:
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <memset+0x6>
    1aaa:	6d 93       	st	X+, r22
    1aac:	41 50       	subi	r20, 0x01	; 1
    1aae:	50 40       	sbci	r21, 0x00	; 0
    1ab0:	e0 f7       	brcc	.-8      	; 0x1aaa <memset+0x4>
    1ab2:	08 95       	ret

00001ab4 <strnlen>:
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	61 50       	subi	r22, 0x01	; 1
    1ab8:	70 40       	sbci	r23, 0x00	; 0
    1aba:	01 90       	ld	r0, Z+
    1abc:	01 10       	cpse	r0, r1
    1abe:	d8 f7       	brcc	.-10     	; 0x1ab6 <strnlen+0x2>
    1ac0:	80 95       	com	r24
    1ac2:	90 95       	com	r25
    1ac4:	8e 0f       	add	r24, r30
    1ac6:	9f 1f       	adc	r25, r31
    1ac8:	08 95       	ret

00001aca <fputc>:
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	18 2f       	mov	r17, r24
    1ad4:	09 2f       	mov	r16, r25
    1ad6:	eb 01       	movw	r28, r22
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	81 fd       	sbrc	r24, 1
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <fputc+0x1a>
    1ade:	8f ef       	ldi	r24, 0xFF	; 255
    1ae0:	9f ef       	ldi	r25, 0xFF	; 255
    1ae2:	20 c0       	rjmp	.+64     	; 0x1b24 <fputc+0x5a>
    1ae4:	82 ff       	sbrs	r24, 2
    1ae6:	10 c0       	rjmp	.+32     	; 0x1b08 <fputc+0x3e>
    1ae8:	4e 81       	ldd	r20, Y+6	; 0x06
    1aea:	5f 81       	ldd	r21, Y+7	; 0x07
    1aec:	2c 81       	ldd	r18, Y+4	; 0x04
    1aee:	3d 81       	ldd	r19, Y+5	; 0x05
    1af0:	42 17       	cp	r20, r18
    1af2:	53 07       	cpc	r21, r19
    1af4:	7c f4       	brge	.+30     	; 0x1b14 <fputc+0x4a>
    1af6:	e8 81       	ld	r30, Y
    1af8:	f9 81       	ldd	r31, Y+1	; 0x01
    1afa:	9f 01       	movw	r18, r30
    1afc:	2f 5f       	subi	r18, 0xFF	; 255
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	39 83       	std	Y+1, r19	; 0x01
    1b02:	28 83       	st	Y, r18
    1b04:	10 83       	st	Z, r17
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <fputc+0x4a>
    1b08:	e8 85       	ldd	r30, Y+8	; 0x08
    1b0a:	f9 85       	ldd	r31, Y+9	; 0x09
    1b0c:	81 2f       	mov	r24, r17
    1b0e:	19 95       	eicall
    1b10:	89 2b       	or	r24, r25
    1b12:	29 f7       	brne	.-54     	; 0x1ade <fputc+0x14>
    1b14:	2e 81       	ldd	r18, Y+6	; 0x06
    1b16:	3f 81       	ldd	r19, Y+7	; 0x07
    1b18:	2f 5f       	subi	r18, 0xFF	; 255
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	3f 83       	std	Y+7, r19	; 0x07
    1b1e:	2e 83       	std	Y+6, r18	; 0x06
    1b20:	81 2f       	mov	r24, r17
    1b22:	90 2f       	mov	r25, r16
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <__ultoa_invert>:
    1b2e:	fa 01       	movw	r30, r20
    1b30:	aa 27       	eor	r26, r26
    1b32:	28 30       	cpi	r18, 0x08	; 8
    1b34:	51 f1       	breq	.+84     	; 0x1b8a <__ultoa_invert+0x5c>
    1b36:	20 31       	cpi	r18, 0x10	; 16
    1b38:	81 f1       	breq	.+96     	; 0x1b9a <__ultoa_invert+0x6c>
    1b3a:	e8 94       	clt
    1b3c:	6f 93       	push	r22
    1b3e:	6e 7f       	andi	r22, 0xFE	; 254
    1b40:	6e 5f       	subi	r22, 0xFE	; 254
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	8f 4f       	sbci	r24, 0xFF	; 255
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	af 4f       	sbci	r26, 0xFF	; 255
    1b4a:	b1 e0       	ldi	r27, 0x01	; 1
    1b4c:	3e d0       	rcall	.+124    	; 0x1bca <__ultoa_invert+0x9c>
    1b4e:	b4 e0       	ldi	r27, 0x04	; 4
    1b50:	3c d0       	rcall	.+120    	; 0x1bca <__ultoa_invert+0x9c>
    1b52:	67 0f       	add	r22, r23
    1b54:	78 1f       	adc	r23, r24
    1b56:	89 1f       	adc	r24, r25
    1b58:	9a 1f       	adc	r25, r26
    1b5a:	a1 1d       	adc	r26, r1
    1b5c:	68 0f       	add	r22, r24
    1b5e:	79 1f       	adc	r23, r25
    1b60:	8a 1f       	adc	r24, r26
    1b62:	91 1d       	adc	r25, r1
    1b64:	a1 1d       	adc	r26, r1
    1b66:	6a 0f       	add	r22, r26
    1b68:	71 1d       	adc	r23, r1
    1b6a:	81 1d       	adc	r24, r1
    1b6c:	91 1d       	adc	r25, r1
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	20 d0       	rcall	.+64     	; 0x1bb2 <__ultoa_invert+0x84>
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <__ultoa_invert+0x48>
    1b74:	68 94       	set
    1b76:	3f 91       	pop	r19
    1b78:	2a e0       	ldi	r18, 0x0A	; 10
    1b7a:	26 9f       	mul	r18, r22
    1b7c:	11 24       	eor	r1, r1
    1b7e:	30 19       	sub	r19, r0
    1b80:	30 5d       	subi	r19, 0xD0	; 208
    1b82:	31 93       	st	Z+, r19
    1b84:	de f6       	brtc	.-74     	; 0x1b3c <__ultoa_invert+0xe>
    1b86:	cf 01       	movw	r24, r30
    1b88:	08 95       	ret
    1b8a:	46 2f       	mov	r20, r22
    1b8c:	47 70       	andi	r20, 0x07	; 7
    1b8e:	40 5d       	subi	r20, 0xD0	; 208
    1b90:	41 93       	st	Z+, r20
    1b92:	b3 e0       	ldi	r27, 0x03	; 3
    1b94:	0f d0       	rcall	.+30     	; 0x1bb4 <__ultoa_invert+0x86>
    1b96:	c9 f7       	brne	.-14     	; 0x1b8a <__ultoa_invert+0x5c>
    1b98:	f6 cf       	rjmp	.-20     	; 0x1b86 <__ultoa_invert+0x58>
    1b9a:	46 2f       	mov	r20, r22
    1b9c:	4f 70       	andi	r20, 0x0F	; 15
    1b9e:	40 5d       	subi	r20, 0xD0	; 208
    1ba0:	4a 33       	cpi	r20, 0x3A	; 58
    1ba2:	18 f0       	brcs	.+6      	; 0x1baa <__ultoa_invert+0x7c>
    1ba4:	49 5d       	subi	r20, 0xD9	; 217
    1ba6:	31 fd       	sbrc	r19, 1
    1ba8:	40 52       	subi	r20, 0x20	; 32
    1baa:	41 93       	st	Z+, r20
    1bac:	02 d0       	rcall	.+4      	; 0x1bb2 <__ultoa_invert+0x84>
    1bae:	a9 f7       	brne	.-22     	; 0x1b9a <__ultoa_invert+0x6c>
    1bb0:	ea cf       	rjmp	.-44     	; 0x1b86 <__ultoa_invert+0x58>
    1bb2:	b4 e0       	ldi	r27, 0x04	; 4
    1bb4:	a6 95       	lsr	r26
    1bb6:	97 95       	ror	r25
    1bb8:	87 95       	ror	r24
    1bba:	77 95       	ror	r23
    1bbc:	67 95       	ror	r22
    1bbe:	ba 95       	dec	r27
    1bc0:	c9 f7       	brne	.-14     	; 0x1bb4 <__ultoa_invert+0x86>
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	61 05       	cpc	r22, r1
    1bc6:	71 05       	cpc	r23, r1
    1bc8:	08 95       	ret
    1bca:	9b 01       	movw	r18, r22
    1bcc:	ac 01       	movw	r20, r24
    1bce:	0a 2e       	mov	r0, r26
    1bd0:	06 94       	lsr	r0
    1bd2:	57 95       	ror	r21
    1bd4:	47 95       	ror	r20
    1bd6:	37 95       	ror	r19
    1bd8:	27 95       	ror	r18
    1bda:	ba 95       	dec	r27
    1bdc:	c9 f7       	brne	.-14     	; 0x1bd0 <__ultoa_invert+0xa2>
    1bde:	62 0f       	add	r22, r18
    1be0:	73 1f       	adc	r23, r19
    1be2:	84 1f       	adc	r24, r20
    1be4:	95 1f       	adc	r25, r21
    1be6:	a0 1d       	adc	r26, r0
    1be8:	08 95       	ret

00001bea <_exit>:
    1bea:	f8 94       	cli

00001bec <__stop_program>:
    1bec:	ff cf       	rjmp	.-2      	; 0x1bec <__stop_program>
