
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800200  00001968  000019fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  008002cc  008002cc  00001ac8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d8  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002106  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001165  00000000  00000000  00003f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001708  00000000  00000000  00005067  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000061c  00000000  00000000  00006770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000810  00000000  00000000  00006d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001060  00000000  00000000  0000759c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  000085fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	13 c3       	rjmp	.+1574   	; 0x634 <__vector_3>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3c c5       	rjmp	.+2680   	; 0xb16 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a6 05       	cpc	r26, r6
      e6:	f8 05       	cpc	r31, r8
      e8:	f8 05       	cpc	r31, r8
      ea:	f8 05       	cpc	r31, r8
      ec:	f8 05       	cpc	r31, r8
      ee:	f8 05       	cpc	r31, r8
      f0:	f8 05       	cpc	r31, r8
      f2:	f8 05       	cpc	r31, r8
      f4:	a6 05       	cpc	r26, r6
      f6:	f8 05       	cpc	r31, r8
      f8:	f8 05       	cpc	r31, r8
      fa:	f8 05       	cpc	r31, r8
      fc:	f8 05       	cpc	r31, r8
      fe:	f8 05       	cpc	r31, r8
     100:	f8 05       	cpc	r31, r8
     102:	f8 05       	cpc	r31, r8
     104:	a8 05       	cpc	r26, r8
     106:	f8 05       	cpc	r31, r8
     108:	f8 05       	cpc	r31, r8
     10a:	f8 05       	cpc	r31, r8
     10c:	f8 05       	cpc	r31, r8
     10e:	f8 05       	cpc	r31, r8
     110:	f8 05       	cpc	r31, r8
     112:	f8 05       	cpc	r31, r8
     114:	f8 05       	cpc	r31, r8
     116:	f8 05       	cpc	r31, r8
     118:	f8 05       	cpc	r31, r8
     11a:	f8 05       	cpc	r31, r8
     11c:	f8 05       	cpc	r31, r8
     11e:	f8 05       	cpc	r31, r8
     120:	f8 05       	cpc	r31, r8
     122:	f8 05       	cpc	r31, r8
     124:	a8 05       	cpc	r26, r8
     126:	f8 05       	cpc	r31, r8
     128:	f8 05       	cpc	r31, r8
     12a:	f8 05       	cpc	r31, r8
     12c:	f8 05       	cpc	r31, r8
     12e:	f8 05       	cpc	r31, r8
     130:	f8 05       	cpc	r31, r8
     132:	f8 05       	cpc	r31, r8
     134:	f8 05       	cpc	r31, r8
     136:	f8 05       	cpc	r31, r8
     138:	f8 05       	cpc	r31, r8
     13a:	f8 05       	cpc	r31, r8
     13c:	f8 05       	cpc	r31, r8
     13e:	f8 05       	cpc	r31, r8
     140:	f8 05       	cpc	r31, r8
     142:	f8 05       	cpc	r31, r8
     144:	f4 05       	cpc	r31, r4
     146:	f8 05       	cpc	r31, r8
     148:	f8 05       	cpc	r31, r8
     14a:	f8 05       	cpc	r31, r8
     14c:	f8 05       	cpc	r31, r8
     14e:	f8 05       	cpc	r31, r8
     150:	f8 05       	cpc	r31, r8
     152:	f8 05       	cpc	r31, r8
     154:	d1 05       	cpc	r29, r1
     156:	f8 05       	cpc	r31, r8
     158:	f8 05       	cpc	r31, r8
     15a:	f8 05       	cpc	r31, r8
     15c:	f8 05       	cpc	r31, r8
     15e:	f8 05       	cpc	r31, r8
     160:	f8 05       	cpc	r31, r8
     162:	f8 05       	cpc	r31, r8
     164:	f8 05       	cpc	r31, r8
     166:	f8 05       	cpc	r31, r8
     168:	f8 05       	cpc	r31, r8
     16a:	f8 05       	cpc	r31, r8
     16c:	f8 05       	cpc	r31, r8
     16e:	f8 05       	cpc	r31, r8
     170:	f8 05       	cpc	r31, r8
     172:	f8 05       	cpc	r31, r8
     174:	c5 05       	cpc	r28, r5
     176:	f8 05       	cpc	r31, r8
     178:	f8 05       	cpc	r31, r8
     17a:	f8 05       	cpc	r31, r8
     17c:	f8 05       	cpc	r31, r8
     17e:	f8 05       	cpc	r31, r8
     180:	f8 05       	cpc	r31, r8
     182:	f8 05       	cpc	r31, r8
     184:	e3 05       	cpc	r30, r3

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e8 e6       	ldi	r30, 0x68	; 104
     19e:	f9 e1       	ldi	r31, 0x19	; 25
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ac 3c       	cpi	r26, 0xCC	; 204
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	ac ec       	ldi	r26, 0xCC	; 204
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a1 3f       	cpi	r26, 0xF1	; 241
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	03 d0       	rcall	.+6      	; 0x1c8 <main>
     1c2:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <main>:
#include "drivers/solenoid.h"
#include "controller.h"
#include "../../../can_protocol.h"

int main(void)
{
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	66 97       	sbiw	r28, 0x16	; 22
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
     1dc:	87 e6       	ldi	r24, 0x67	; 103
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	2f d5       	rcall	.+2654   	; 0xc40 <UART_init>
	CAN_init();
     1e2:	33 d1       	rcall	.+614    	; 0x44a <CAN_init>
	IR_init();
     1e4:	63 d2       	rcall	.+1222   	; 0x6ac <IR_init>
	SERVO_init();
     1e6:	f4 d3       	rcall	.+2024   	; 0x9d0 <SERVO_init>
	MOTOR_init();
     1e8:	b0 d3       	rcall	.+1888   	; 0x94a <MOTOR_init>
	SOLENOID_init();
     1ea:	44 d4       	rcall	.+2184   	; 0xa74 <SOLENOID_init>
		printf("Received message\n");
		printf("id: %d\ndata: %d\n\n", receive_msg.id, receive_msg.data[0]);
		_delay_ms(10);
	}*/

	uint8_t ir_value = IR_read();
     1ec:	61 d2       	rcall	.+1218   	; 0x6b0 <IR_read>
     1ee:	d8 2e       	mov	r13, r24
	uint8_t old_ir_value = ir_value;

	while(1) {
		receive_msg = CAN_data_receive();

		printf("%d %d %d %d %d\n", receive_msg.id, receive_msg.data[0], receive_msg.data[2], (uint8_t)receive_msg.data[3], (uint8_t)receive_msg.data[4]);
     1f0:	04 e1       	ldi	r16, 0x14	; 20
     1f2:	12 e0       	ldi	r17, 0x02	; 2
		}
		
		ir_value = IR_read();
		if(ir_value != old_ir_value) {
			// Send score to node 1
			send_msg.id = NODE_2_ID;
     1f4:	68 94       	set
     1f6:	88 24       	eor	r8, r8
     1f8:	81 f8       	bld	r8, 1
     1fa:	91 2c       	mov	r9, r1
			send_msg.length = 1;
     1fc:	66 24       	eor	r6, r6
     1fe:	63 94       	inc	r6
			send_msg.data[IR_INDEX] = ir_value;
			printf("%d\n", ir_value);
     200:	0f 2e       	mov	r0, r31
     202:	fe eb       	ldi	r31, 0xBE	; 190
     204:	af 2e       	mov	r10, r31
     206:	f2 e0       	ldi	r31, 0x02	; 2
     208:	bf 2e       	mov	r11, r31
     20a:	f0 2d       	mov	r31, r0

	uint8_t ir_value = IR_read();
	uint8_t old_ir_value = ir_value;

	while(1) {
		receive_msg = CAN_data_receive();
     20c:	ce 01       	movw	r24, r28
     20e:	0c 96       	adiw	r24, 0x0c	; 12
     210:	85 d1       	rcall	.+778    	; 0x51c <CAN_data_receive>
     212:	ec 84       	ldd	r14, Y+12	; 0x0c
     214:	fd 84       	ldd	r15, Y+13	; 0x0d
     216:	7f 84       	ldd	r7, Y+15	; 0x0f
     218:	c9 88       	ldd	r12, Y+17	; 0x11

		printf("%d %d %d %d %d\n", receive_msg.id, receive_msg.data[0], receive_msg.data[2], (uint8_t)receive_msg.data[3], (uint8_t)receive_msg.data[4]);
     21a:	4b 88       	ldd	r4, Y+19	; 0x13
     21c:	1f 92       	push	r1
     21e:	4f 92       	push	r4
     220:	8a 89       	ldd	r24, Y+18	; 0x12
     222:	1f 92       	push	r1
     224:	8f 93       	push	r24
     226:	8c 2d       	mov	r24, r12
     228:	99 27       	eor	r25, r25
     22a:	87 fd       	sbrc	r24, 7
     22c:	90 95       	com	r25
     22e:	9f 93       	push	r25
     230:	cf 92       	push	r12
     232:	27 2d       	mov	r18, r7
     234:	33 27       	eor	r19, r19
     236:	27 fd       	sbrc	r18, 7
     238:	30 95       	com	r19
     23a:	3f 93       	push	r19
     23c:	7f 92       	push	r7
     23e:	ff 92       	push	r15
     240:	ef 92       	push	r14
     242:	1f 93       	push	r17
     244:	0f 93       	push	r16
     246:	74 d7       	rcall	.+3816   	; 0x1130 <printf>

		if(receive_msg.id == NODE_1_ID) {
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	f8 94       	cli
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	0f be       	out	0x3f, r0	; 63
     250:	cd bf       	out	0x3d, r28	; 61
     252:	ea 94       	dec	r14
     254:	ef 28       	or	r14, r15
     256:	59 f4       	brne	.+22     	; 0x26e <main+0xa6>
			// Message is joystick data
			int8_t x = receive_msg.data[X_INDEX];
			int8_t click = receive_msg.data[CLICK_INDEX];
			SERVO_write(-x);
     258:	87 2d       	mov	r24, r7
     25a:	81 95       	neg	r24
     25c:	c4 d3       	rcall	.+1928   	; 0x9e6 <SERVO_write>
			SOLENOID_shoot(click);
     25e:	8c 2d       	mov	r24, r12
     260:	0b d4       	rcall	.+2070   	; 0xa78 <SOLENOID_shoot>

			// Slider data
			uint8_t ref = receive_msg.data[RIGHT_INDEX]; // Use right slider position as reference
			CONTROLLER_set_reference(ref);
     262:	64 2d       	mov	r22, r4
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	f9 d5       	rcall	.+3058   	; 0xe5e <__floatunsisf>
     26c:	4a d0       	rcall	.+148    	; 0x302 <CONTROLLER_set_reference>
		}
		
		ir_value = IR_read();
     26e:	20 d2       	rcall	.+1088   	; 0x6b0 <IR_read>
     270:	78 2e       	mov	r7, r24
		if(ir_value != old_ir_value) {
     272:	8d 15       	cp	r24, r13
     274:	81 f0       	breq	.+32     	; 0x296 <main+0xce>
			// Send score to node 1
			send_msg.id = NODE_2_ID;
     276:	9a 82       	std	Y+2, r9	; 0x02
     278:	89 82       	std	Y+1, r8	; 0x01
			send_msg.length = 1;
     27a:	6b 82       	std	Y+3, r6	; 0x03
			send_msg.data[IR_INDEX] = ir_value;
     27c:	8c 83       	std	Y+4, r24	; 0x04
			printf("%d\n", ir_value);
     27e:	1f 92       	push	r1
     280:	8f 93       	push	r24
     282:	bf 92       	push	r11
     284:	af 92       	push	r10
     286:	54 d7       	rcall	.+3752   	; 0x1130 <printf>
			CAN_message_send(&send_msg);
     288:	ce 01       	movw	r24, r28
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	f7 d0       	rcall	.+494    	; 0x47c <CAN_message_send>
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
			old_ir_value = ir_value;
		}

		// Apply controller
		float encoder_value = 0xFF * ((float)MOTOR_read_encoder())/((float)MOTOR_max_encoder_value());
     296:	bd d2       	rcall	.+1402   	; 0x812 <MOTOR_read_encoder>
     298:	7c 01       	movw	r14, r24
     29a:	a1 d2       	rcall	.+1346   	; 0x7de <MOTOR_max_encoder_value>
     29c:	6c 01       	movw	r12, r24
     29e:	b7 01       	movw	r22, r14
     2a0:	88 27       	eor	r24, r24
     2a2:	77 fd       	sbrc	r23, 7
     2a4:	80 95       	com	r24
     2a6:	98 2f       	mov	r25, r24
     2a8:	dc d5       	rcall	.+3000   	; 0xe62 <__floatsisf>
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	4f e7       	ldi	r20, 0x7F	; 127
     2b0:	53 e4       	ldi	r21, 0x43	; 67
     2b2:	8b d6       	rcall	.+3350   	; 0xfca <__mulsf3>
     2b4:	1b 01       	movw	r2, r22
     2b6:	2c 01       	movw	r4, r24
     2b8:	b6 01       	movw	r22, r12
     2ba:	88 27       	eor	r24, r24
     2bc:	77 fd       	sbrc	r23, 7
     2be:	80 95       	com	r24
     2c0:	98 2f       	mov	r25, r24
     2c2:	cf d5       	rcall	.+2974   	; 0xe62 <__floatsisf>
     2c4:	9b 01       	movw	r18, r22
     2c6:	ac 01       	movw	r20, r24
     2c8:	c2 01       	movw	r24, r4
     2ca:	b1 01       	movw	r22, r2
     2cc:	34 d5       	rcall	.+2664   	; 0xd36 <__divsf3>
		float vel = CONTROLLER_actuate(encoder_value);
     2ce:	22 d0       	rcall	.+68     	; 0x314 <CONTROLLER_actuate>
     2d0:	6b 01       	movw	r12, r22
     2d2:	7c 01       	movw	r14, r24
		MOTOR_set_dir_right(vel > 0);
     2d4:	46 2c       	mov	r4, r6
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	72 d6       	rcall	.+3300   	; 0xfc2 <__gesf2>
     2de:	18 16       	cp	r1, r24
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <main+0x11c>
     2e2:	41 2c       	mov	r4, r1
     2e4:	84 2d       	mov	r24, r4
     2e6:	87 d2       	rcall	.+1294   	; 0x7f6 <MOTOR_set_dir_right>
		MOTOR_set_velocity(vel);
     2e8:	c7 01       	movw	r24, r14
     2ea:	b6 01       	movw	r22, r12
     2ec:	8c d5       	rcall	.+2840   	; 0xe06 <__fixunssfsi>
     2ee:	86 2f       	mov	r24, r22
     2f0:	7b d2       	rcall	.+1270   	; 0x7e8 <MOTOR_set_velocity>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	8f e3       	ldi	r24, 0x3F	; 63
     2f4:	9c e9       	ldi	r25, 0x9C	; 156
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x12e>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x134>
     2fc:	00 00       	nop
     2fe:	d7 2c       	mov	r13, r7
     300:	85 cf       	rjmp	.-246    	; 0x20c <main+0x44>

00000302 <CONTROLLER_set_reference>:
float integral = 0.0;

volatile uint16_t* timer_source = &TCNT1;

void CONTROLLER_set_reference(float ref) {
	reference = ref;
     302:	60 93 d4 02 	sts	0x02D4, r22
     306:	70 93 d5 02 	sts	0x02D5, r23
     30a:	80 93 d6 02 	sts	0x02D6, r24
     30e:	90 93 d7 02 	sts	0x02D7, r25
     312:	08 95       	ret

00000314 <CONTROLLER_actuate>:
}

float CONTROLLER_actuate(float y) {
     314:	4f 92       	push	r4
     316:	5f 92       	push	r5
     318:	6f 92       	push	r6
     31a:	7f 92       	push	r7
     31c:	8f 92       	push	r8
     31e:	9f 92       	push	r9
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	6b 01       	movw	r12, r22
     332:	7c 01       	movw	r14, r24
	float dt = ((float)*timer_source)/((float)F_CPU);
     334:	c0 91 06 02 	lds	r28, 0x0206
     338:	d0 91 07 02 	lds	r29, 0x0207
     33c:	68 81       	ld	r22, Y
     33e:	79 81       	ldd	r23, Y+1	; 0x01
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	8c d5       	rcall	.+2840   	; 0xe5e <__floatunsisf>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	34 e2       	ldi	r19, 0x24	; 36
     34a:	44 e7       	ldi	r20, 0x74	; 116
     34c:	5b e4       	ldi	r21, 0x4B	; 75
     34e:	f3 d4       	rcall	.+2534   	; 0xd36 <__divsf3>
     350:	2b 01       	movw	r4, r22
     352:	3c 01       	movw	r6, r24
	*timer_source = 0;
     354:	19 82       	std	Y+1, r1	; 0x01
     356:	18 82       	st	Y, r1
	
	float err = reference - y;
     358:	a7 01       	movw	r20, r14
     35a:	96 01       	movw	r18, r12
     35c:	60 91 d4 02 	lds	r22, 0x02D4
     360:	70 91 d5 02 	lds	r23, 0x02D5
     364:	80 91 d6 02 	lds	r24, 0x02D6
     368:	90 91 d7 02 	lds	r25, 0x02D7
     36c:	7b d4       	rcall	.+2294   	; 0xc64 <__subsf3>
     36e:	6b 01       	movw	r12, r22
     370:	7c 01       	movw	r14, r24
	
	integral += err * dt;
     372:	a3 01       	movw	r20, r6
     374:	92 01       	movw	r18, r4
     376:	29 d6       	rcall	.+3154   	; 0xfca <__mulsf3>
     378:	20 91 cc 02 	lds	r18, 0x02CC
     37c:	30 91 cd 02 	lds	r19, 0x02CD
     380:	40 91 ce 02 	lds	r20, 0x02CE
     384:	50 91 cf 02 	lds	r21, 0x02CF
     388:	6e d4       	rcall	.+2268   	; 0xc66 <__addsf3>
     38a:	4b 01       	movw	r8, r22
     38c:	5c 01       	movw	r10, r24
     38e:	60 93 cc 02 	sts	0x02CC, r22
     392:	70 93 cd 02 	sts	0x02CD, r23
     396:	80 93 ce 02 	sts	0x02CE, r24
     39a:	90 93 cf 02 	sts	0x02CF, r25

	float derivative = (err - prev_err)/dt;
     39e:	20 91 d0 02 	lds	r18, 0x02D0
     3a2:	30 91 d1 02 	lds	r19, 0x02D1
     3a6:	40 91 d2 02 	lds	r20, 0x02D2
     3aa:	50 91 d3 02 	lds	r21, 0x02D3
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	58 d4       	rcall	.+2224   	; 0xc64 <__subsf3>
     3b4:	a3 01       	movw	r20, r6
     3b6:	92 01       	movw	r18, r4
     3b8:	be d4       	rcall	.+2428   	; 0xd36 <__divsf3>
     3ba:	2b 01       	movw	r4, r22
     3bc:	3c 01       	movw	r6, r24
	prev_err = err;	
     3be:	c0 92 d0 02 	sts	0x02D0, r12
     3c2:	d0 92 d1 02 	sts	0x02D1, r13
     3c6:	e0 92 d2 02 	sts	0x02D2, r14
     3ca:	f0 92 d3 02 	sts	0x02D3, r15
	
	return Kp*err + Ki*integral + Kd*derivative;
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	5f e3       	ldi	r21, 0x3F	; 63
     3d6:	c5 01       	movw	r24, r10
     3d8:	b4 01       	movw	r22, r8
     3da:	f7 d5       	rcall	.+3054   	; 0xfca <__mulsf3>
     3dc:	a7 01       	movw	r20, r14
     3de:	96 01       	movw	r18, r12
     3e0:	42 d4       	rcall	.+2180   	; 0xc66 <__addsf3>
     3e2:	6b 01       	movw	r12, r22
     3e4:	7c 01       	movw	r14, r24
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	a9 01       	movw	r20, r18
     3ec:	c3 01       	movw	r24, r6
     3ee:	b2 01       	movw	r22, r4
     3f0:	ec d5       	rcall	.+3032   	; 0xfca <__mulsf3>
     3f2:	9b 01       	movw	r18, r22
     3f4:	ac 01       	movw	r20, r24
     3f6:	c7 01       	movw	r24, r14
     3f8:	b6 01       	movw	r22, r12
     3fa:	35 d4       	rcall	.+2154   	; 0xc66 <__addsf3>
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	9f 90       	pop	r9
     40e:	8f 90       	pop	r8
     410:	7f 90       	pop	r7
     412:	6f 90       	pop	r6
     414:	5f 90       	pop	r5
     416:	4f 90       	pop	r4
     418:	08 95       	ret

0000041a <ADC_init>:

#include "adc.h"
#include <avr/io.h>

void ADC_init() {
	ADCSRA |= (1 << ADEN);
     41a:	ea e7       	ldi	r30, 0x7A	; 122
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 68       	ori	r24, 0x80	; 128
     422:	80 83       	st	Z, r24
	// Set prescaler to 128
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     424:	80 81       	ld	r24, Z
     426:	87 60       	ori	r24, 0x07	; 7
     428:	80 83       	st	Z, r24
     42a:	08 95       	ret

0000042c <ADC_read>:
}

uint8_t ADC_read(uint8_t ch) {
	// AVCC with external capacitor at AREF pin. 8-bit resolution.
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (0x1F & ch);
     42c:	8f 71       	andi	r24, 0x1F	; 31
     42e:	80 66       	ori	r24, 0x60	; 96
     430:	80 93 7c 00 	sts	0x007C, r24
	// Start conversion
	ADCSRA |= (1 << ADSC);
     434:	ea e7       	ldi	r30, 0x7A	; 122
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	80 64       	ori	r24, 0x40	; 64
     43c:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
     43e:	80 81       	ld	r24, Z
     440:	86 fd       	sbrc	r24, 6
     442:	fd cf       	rjmp	.-6      	; 0x43e <ADC_read+0x12>
	return ADCH;
     444:	80 91 79 00 	lds	r24, 0x0079
     448:	08 95       	ret

0000044a <CAN_init>:
	.data[0] = 0
};

void CAN_init() {
	// Initialize MCP2551
	MCP2515_init();
     44a:	ab d1       	rcall	.+854    	; 0x7a2 <MCP2515_init>
	// Set normal mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	60 ee       	ldi	r22, 0xE0	; 224
     450:	8f e0       	ldi	r24, 0x0F	; 15
     452:	8a d1       	rcall	.+788    	; 0x768 <MCP2515_bit_modify>

	uint8_t value = MCP2515_read_data(MCP_CANSTAT);
     454:	8e e0       	ldi	r24, 0x0E	; 14
     456:	49 d1       	rcall	.+658    	; 0x6ea <MCP2515_read_data>
	if ((value & MODE_MASK) != MODE_NORMAL) {
     458:	80 7e       	andi	r24, 0xE0	; 224
     45a:	21 f0       	breq	.+8      	; 0x464 <CAN_init+0x1a>
		printf("MCP2551 is NOT in normal mode after reset!\n");
     45c:	84 e2       	ldi	r24, 0x24	; 36
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	78 c6       	rjmp	.+3312   	; 0x1152 <puts>
		return 1;
     462:	08 95       	ret
	}

	// Enable interrupts for receive and error
	MCP2515_bit_modify(MCP_CANINTE, 0xFF, MCP_RX_INT | MCP_ERRIE);
     464:	43 e2       	ldi	r20, 0x23	; 35
     466:	6f ef       	ldi	r22, 0xFF	; 255
     468:	8b e2       	ldi	r24, 0x2B	; 43
     46a:	7e d1       	rcall	.+764    	; 0x768 <MCP2515_bit_modify>
	
	EICRA	|= (1 << ISC21);
     46c:	e9 e6       	ldi	r30, 0x69	; 105
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	80 62       	ori	r24, 0x20	; 32
     474:	80 83       	st	Z, r24
	EIMSK	|= (1 << INT2);
     476:	ea 9a       	sbi	0x1d, 2	; 29
	sei();
     478:	78 94       	sei
     47a:	08 95       	ret

0000047c <CAN_message_send>:
		rx_flag = 1;
	}
	MCP2515_bit_modify(MCP_CANINTF, 0xFF, 0);
}

void CAN_message_send(struct can_message_t* msg){
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	dc 01       	movw	r26, r24
	}
	// Write starting from TXB0SIDH
	MCP2515_write_data(MCP_TXB0SIDH, data, data_length); 
	// Request to send from buffer TX0
	MCP2515_request_to_send(1);
}
     48a:	0d b7       	in	r16, 0x3d	; 61
     48c:	1e b7       	in	r17, 0x3e	; 62
	}
	MCP2515_bit_modify(MCP_CANINTF, 0xFF, 0);
}

void CAN_message_send(struct can_message_t* msg){
	int data_length = 5 + msg->length;
     48e:	12 96       	adiw	r26, 0x02	; 2
     490:	4c 91       	ld	r20, X
     492:	12 97       	sbiw	r26, 0x02	; 2
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	4b 5f       	subi	r20, 0xFB	; 251
     498:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t data[data_length];
     49a:	8d b7       	in	r24, 0x3d	; 61
     49c:	9e b7       	in	r25, 0x3e	; 62
     49e:	84 1b       	sub	r24, r20
     4a0:	95 0b       	sbc	r25, r21
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	9e bf       	out	0x3e, r25	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	8d bf       	out	0x3d, r24	; 61
     4ac:	6d b7       	in	r22, 0x3d	; 61
     4ae:	7e b7       	in	r23, 0x3e	; 62
     4b0:	6f 5f       	subi	r22, 0xFF	; 255
     4b2:	7f 4f       	sbci	r23, 0xFF	; 255
	data[0] = msg->id >> 3; // Bit 0 to 2 to TXB0SIDH
     4b4:	8d 91       	ld	r24, X+
     4b6:	9c 91       	ld	r25, X
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	96 95       	lsr	r25
     4bc:	87 95       	ror	r24
     4be:	96 95       	lsr	r25
     4c0:	87 95       	ror	r24
     4c2:	96 95       	lsr	r25
     4c4:	87 95       	ror	r24
     4c6:	ed b7       	in	r30, 0x3d	; 61
     4c8:	fe b7       	in	r31, 0x3e	; 62
     4ca:	81 83       	std	Z+1, r24	; 0x01
	data[1] = msg->id << 5; // Bit 3 to 10 to TXB0SIDL
     4cc:	8c 91       	ld	r24, X
     4ce:	82 95       	swap	r24
     4d0:	88 0f       	add	r24, r24
     4d2:	80 7e       	andi	r24, 0xE0	; 224
     4d4:	fb 01       	movw	r30, r22
     4d6:	81 83       	std	Z+1, r24	; 0x01
	// Not using extended ID
	data[2] = 0;
     4d8:	12 82       	std	Z+2, r1	; 0x02
	data[3] = 0;
     4da:	13 82       	std	Z+3, r1	; 0x03
	// length to TXB0DLC
	data[4] = msg->length;
     4dc:	12 96       	adiw	r26, 0x02	; 2
     4de:	8c 91       	ld	r24, X
     4e0:	12 97       	sbiw	r26, 0x02	; 2
     4e2:	84 83       	std	Z+4, r24	; 0x04
	// Fill rest of array with message data
	for(int i = 5; i < data_length; i++) {
     4e4:	46 30       	cpi	r20, 0x06	; 6
     4e6:	51 05       	cpc	r21, r1
     4e8:	5c f0       	brlt	.+22     	; 0x500 <CAN_message_send+0x84>
     4ea:	13 96       	adiw	r26, 0x03	; 3
     4ec:	35 96       	adiw	r30, 0x05	; 5
     4ee:	25 e0       	ldi	r18, 0x05	; 5
     4f0:	30 e0       	ldi	r19, 0x00	; 0
		data[i] = msg->data[i - 5];
     4f2:	8d 91       	ld	r24, X+
     4f4:	81 93       	st	Z+, r24
	data[2] = 0;
	data[3] = 0;
	// length to TXB0DLC
	data[4] = msg->length;
	// Fill rest of array with message data
	for(int i = 5; i < data_length; i++) {
     4f6:	2f 5f       	subi	r18, 0xFF	; 255
     4f8:	3f 4f       	sbci	r19, 0xFF	; 255
     4fa:	24 17       	cp	r18, r20
     4fc:	35 07       	cpc	r19, r21
     4fe:	cc f3       	brlt	.-14     	; 0x4f2 <CAN_message_send+0x76>
		data[i] = msg->data[i - 5];
	}
	// Write starting from TXB0SIDH
	MCP2515_write_data(MCP_TXB0SIDH, data, data_length); 
     500:	81 e3       	ldi	r24, 0x31	; 49
     502:	03 d1       	rcall	.+518    	; 0x70a <MCP2515_write_data>
	// Request to send from buffer TX0
	MCP2515_request_to_send(1);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	24 d1       	rcall	.+584    	; 0x750 <MCP2515_request_to_send>
}
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	1e bf       	out	0x3e, r17	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0d bf       	out	0x3d, r16	; 61
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <CAN_data_receive>:

struct can_message_t CAN_data_receive() {
     51c:	8f 92       	push	r8
     51e:	9f 92       	push	r9
     520:	af 92       	push	r10
     522:	bf 92       	push	r11
     524:	cf 92       	push	r12
     526:	df 92       	push	r13
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	2b 97       	sbiw	r28, 0x0b	; 11
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	7c 01       	movw	r14, r24
	struct can_message_t msg;

	if(rx_flag) {
     546:	80 91 e4 02 	lds	r24, 0x02E4
     54a:	88 23       	and	r24, r24
     54c:	b1 f1       	breq	.+108    	; 0x5ba <CAN_data_receive+0x9e>
		msg.id = (MCP2515_read_data(MCP_RXB0SIDH) << 3) | (MCP2515_read_data(MCP_RXB0SIDL) >> 5);
     54e:	81 e6       	ldi	r24, 0x61	; 97
     550:	cc d0       	rcall	.+408    	; 0x6ea <MCP2515_read_data>
     552:	a8 2e       	mov	r10, r24
     554:	82 e6       	ldi	r24, 0x62	; 98
     556:	c9 d0       	rcall	.+402    	; 0x6ea <MCP2515_read_data>
     558:	82 95       	swap	r24
     55a:	86 95       	lsr	r24
     55c:	87 70       	andi	r24, 0x07	; 7
     55e:	b1 2c       	mov	r11, r1
     560:	aa 0c       	add	r10, r10
     562:	bb 1c       	adc	r11, r11
     564:	aa 0c       	add	r10, r10
     566:	bb 1c       	adc	r11, r11
     568:	aa 0c       	add	r10, r10
     56a:	bb 1c       	adc	r11, r11
     56c:	a8 2a       	or	r10, r24
		msg.length = (0x0F) & MCP2515_read_data(MCP_RXB0DLC);
     56e:	85 e6       	ldi	r24, 0x65	; 101
     570:	bc d0       	rcall	.+376    	; 0x6ea <MCP2515_read_data>
     572:	8f 70       	andi	r24, 0x0F	; 15
     574:	88 2e       	mov	r8, r24
		for(int i = 0; i < msg.length; i++) {
     576:	99 f0       	breq	.+38     	; 0x59e <CAN_data_receive+0x82>
     578:	8e 01       	movw	r16, r28
     57a:	0c 5f       	subi	r16, 0xFC	; 252
     57c:	1f 4f       	sbci	r17, 0xFF	; 255
     57e:	68 01       	movw	r12, r16
     580:	c8 0e       	add	r12, r24
     582:	d1 1c       	adc	r13, r1
     584:	0f 2e       	mov	r0, r31
     586:	f6 e6       	ldi	r31, 0x66	; 102
     588:	9f 2e       	mov	r9, r31
     58a:	f0 2d       	mov	r31, r0
			msg.data[i] = MCP2515_read_data(MCP_RXB0D0 + i);
     58c:	89 2d       	mov	r24, r9
     58e:	ad d0       	rcall	.+346    	; 0x6ea <MCP2515_read_data>
     590:	f8 01       	movw	r30, r16
     592:	81 93       	st	Z+, r24
     594:	8f 01       	movw	r16, r30
     596:	93 94       	inc	r9
	struct can_message_t msg;

	if(rx_flag) {
		msg.id = (MCP2515_read_data(MCP_RXB0SIDH) << 3) | (MCP2515_read_data(MCP_RXB0SIDL) >> 5);
		msg.length = (0x0F) & MCP2515_read_data(MCP_RXB0DLC);
		for(int i = 0; i < msg.length; i++) {
     598:	ec 15       	cp	r30, r12
     59a:	fd 05       	cpc	r31, r13
     59c:	b9 f7       	brne	.-18     	; 0x58c <CAN_data_receive+0x70>
			msg.data[i] = MCP2515_read_data(MCP_RXB0D0 + i);
		}
		rx_flag = 0;
     59e:	10 92 e4 02 	sts	0x02E4, r1
	} else {
		return empty_msg;
	}
	return msg;
     5a2:	ba 82       	std	Y+2, r11	; 0x02
     5a4:	a9 82       	std	Y+1, r10	; 0x01
     5a6:	8b 82       	std	Y+3, r8	; 0x03
     5a8:	8b e0       	ldi	r24, 0x0B	; 11
     5aa:	fe 01       	movw	r30, r28
     5ac:	31 96       	adiw	r30, 0x01	; 1
     5ae:	d7 01       	movw	r26, r14
     5b0:	01 90       	ld	r0, Z+
     5b2:	0d 92       	st	X+, r0
     5b4:	8a 95       	dec	r24
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <CAN_data_receive+0x94>
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <CAN_data_receive+0xae>
		for(int i = 0; i < msg.length; i++) {
			msg.data[i] = MCP2515_read_data(MCP_RXB0D0 + i);
		}
		rx_flag = 0;
	} else {
		return empty_msg;
     5ba:	8b e0       	ldi	r24, 0x0B	; 11
     5bc:	e8 e0       	ldi	r30, 0x08	; 8
     5be:	f2 e0       	ldi	r31, 0x02	; 2
     5c0:	d7 01       	movw	r26, r14
     5c2:	01 90       	ld	r0, Z+
     5c4:	0d 92       	st	X+, r0
     5c6:	8a 95       	dec	r24
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <CAN_data_receive+0xa6>
	}
	return msg;
}
     5ca:	c7 01       	movw	r24, r14
     5cc:	2b 96       	adiw	r28, 0x0b	; 11
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	bf 90       	pop	r11
     5ea:	af 90       	pop	r10
     5ec:	9f 90       	pop	r9
     5ee:	8f 90       	pop	r8
     5f0:	08 95       	ret

000005f2 <CAN_error>:

void CAN_error() {
     5f2:	cf 93       	push	r28
	uint8_t error = MCP2515_read_data(MCP_EFLG);
     5f4:	8d e2       	ldi	r24, 0x2D	; 45
     5f6:	79 d0       	rcall	.+242    	; 0x6ea <MCP2515_read_data>
     5f8:	c8 2f       	mov	r28, r24
	if(error & MCP_TXWAR) {
     5fa:	82 ff       	sbrs	r24, 2
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <CAN_error+0x12>
		printf("(E) can.c: Transmission error\n");
     5fe:	8f e4       	ldi	r24, 0x4F	; 79
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	a7 d5       	rcall	.+2894   	; 0x1152 <puts>
	}
	if(error & MCP_RXWAR) {
     604:	c1 ff       	sbrs	r28, 1
     606:	03 c0       	rjmp	.+6      	; 0x60e <CAN_error+0x1c>
		printf("(E) can.c: Receive error\n");
     608:	8d e6       	ldi	r24, 0x6D	; 109
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	a2 d5       	rcall	.+2884   	; 0x1152 <puts>
	}
}
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <CAN_int_vect>:

ISR(INT2_vect) {
	CAN_int_vect();
}

void CAN_int_vect() {
     612:	cf 93       	push	r28
	uint8_t interrupt = MCP2515_read_data(MCP_CANINTF);
     614:	8c e2       	ldi	r24, 0x2C	; 44
     616:	69 d0       	rcall	.+210    	; 0x6ea <MCP2515_read_data>
     618:	c8 2f       	mov	r28, r24
	if(interrupt & MCP_ERRIF) {
     61a:	85 fd       	sbrc	r24, 5
		CAN_error();
     61c:	ea df       	rcall	.-44     	; 0x5f2 <CAN_error>
	}
	if(interrupt & MCP_RX0IF) {
     61e:	c0 ff       	sbrs	r28, 0
     620:	03 c0       	rjmp	.+6      	; 0x628 <CAN_int_vect+0x16>
		rx_flag = 1;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 e4 02 	sts	0x02E4, r24
	}
	MCP2515_bit_modify(MCP_CANINTF, 0xFF, 0);
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	6f ef       	ldi	r22, 0xFF	; 255
     62c:	8c e2       	ldi	r24, 0x2C	; 44
     62e:	9c d0       	rcall	.+312    	; 0x768 <MCP2515_bit_modify>
}
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <__vector_3>:
	EICRA	|= (1 << ISC21);
	EIMSK	|= (1 << INT2);
	sei();
}

ISR(INT2_vect) {
     634:	1f 92       	push	r1
     636:	0f 92       	push	r0
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	0f 92       	push	r0
     63c:	11 24       	eor	r1, r1
     63e:	0b b6       	in	r0, 0x3b	; 59
     640:	0f 92       	push	r0
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
	CAN_int_vect();
     65a:	db df       	rcall	.-74     	; 0x612 <CAN_int_vect>
}
     65c:	ff 91       	pop	r31
     65e:	ef 91       	pop	r30
     660:	bf 91       	pop	r27
     662:	af 91       	pop	r26
     664:	9f 91       	pop	r25
     666:	8f 91       	pop	r24
     668:	7f 91       	pop	r23
     66a:	6f 91       	pop	r22
     66c:	5f 91       	pop	r21
     66e:	4f 91       	pop	r20
     670:	3f 91       	pop	r19
     672:	2f 91       	pop	r18
     674:	0f 90       	pop	r0
     676:	0b be       	out	0x3b, r0	; 59
     678:	0f 90       	pop	r0
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	0f 90       	pop	r0
     67e:	1f 90       	pop	r1
     680:	18 95       	reti

00000682 <DAC_init>:
     682:	1d c2       	rjmp	.+1082   	; 0xabe <TWI_Master_Initialise>
     684:	08 95       	ret

00000686 <DAC_write>:
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	00 d0       	rcall	.+0      	; 0x68c <DAC_write+0x6>
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	90 e5       	ldi	r25, 0x50	; 80
     692:	99 83       	std	Y+1, r25	; 0x01
     694:	1a 82       	std	Y+2, r1	; 0x02
     696:	8b 83       	std	Y+3, r24	; 0x03
     698:	63 e0       	ldi	r22, 0x03	; 3
     69a:	ce 01       	movw	r24, r28
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	19 d2       	rcall	.+1074   	; 0xad2 <TWI_Start_Transceiver_With_Data>
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <IR_init>:
#include "adc.h"

const uint8_t threshold = 50;

void IR_init() {
	ADC_init();
     6ac:	b6 ce       	rjmp	.-660    	; 0x41a <ADC_init>
     6ae:	08 95       	ret

000006b0 <IR_read>:
}

uint8_t IR_read() {
	// Using a 4th order moving average filter
	static uint8_t filter[4];
	uint8_t value = ADC_read(IR_CHANNEL);
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	bc de       	rcall	.-648    	; 0x42c <ADC_read>
	uint16_t avg_value = value;
	for(int i = 1; i < 4; i++) {
		avg_value += filter[i];
     6b4:	e9 ed       	ldi	r30, 0xD9	; 217
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	20 81       	ld	r18, Z
		filter[i - 1] = filter[i];
     6ba:	20 93 d8 02 	sts	0x02D8, r18
	// Using a 4th order moving average filter
	static uint8_t filter[4];
	uint8_t value = ADC_read(IR_CHANNEL);
	uint16_t avg_value = value;
	for(int i = 1; i < 4; i++) {
		avg_value += filter[i];
     6be:	aa ed       	ldi	r26, 0xDA	; 218
     6c0:	b2 e0       	ldi	r27, 0x02	; 2
     6c2:	4c 91       	ld	r20, X
		filter[i - 1] = filter[i];
     6c4:	40 83       	st	Z, r20
	// Using a 4th order moving average filter
	static uint8_t filter[4];
	uint8_t value = ADC_read(IR_CHANNEL);
	uint16_t avg_value = value;
	for(int i = 1; i < 4; i++) {
		avg_value += filter[i];
     6c6:	eb ed       	ldi	r30, 0xDB	; 219
     6c8:	f2 e0       	ldi	r31, 0x02	; 2
     6ca:	90 81       	ld	r25, Z
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	24 0f       	add	r18, r20
     6d0:	31 1d       	adc	r19, r1
     6d2:	29 0f       	add	r18, r25
     6d4:	31 1d       	adc	r19, r1
		filter[i - 1] = filter[i];
     6d6:	9c 93       	st	X, r25
	}
	avg_value /= 4;
	filter[3] = value;
     6d8:	80 83       	st	Z, r24
	// Using a 4th order moving average filter
	static uint8_t filter[4];
	uint8_t value = ADC_read(IR_CHANNEL);
	uint16_t avg_value = value;
	for(int i = 1; i < 4; i++) {
		avg_value += filter[i];
     6da:	28 0f       	add	r18, r24
     6dc:	31 1d       	adc	r19, r1
		filter[i - 1] = filter[i];
	}
	avg_value /= 4;
	filter[3] = value;

	return (avg_value < threshold);
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	28 3c       	cpi	r18, 0xC8	; 200
     6e2:	31 05       	cpc	r19, r1
     6e4:	08 f0       	brcs	.+2      	; 0x6e8 <IR_read+0x38>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret

000006ea <MCP2515_read_data>:
     6ea:	cf 93       	push	r28
     6ec:	c8 2f       	mov	r28, r24
     6ee:	f8 94       	cli
     6f0:	e2 d1       	rcall	.+964    	; 0xab6 <SPI_SS_low>
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	da d1       	rcall	.+948    	; 0xaaa <SPI_transcieve>
     6f6:	8c 2f       	mov	r24, r28
     6f8:	d8 d1       	rcall	.+944    	; 0xaaa <SPI_transcieve>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	d6 d1       	rcall	.+940    	; 0xaaa <SPI_transcieve>
     6fe:	c8 2f       	mov	r28, r24
     700:	dc d1       	rcall	.+952    	; 0xaba <SPI_SS_high>
     702:	78 94       	sei
     704:	8c 2f       	mov	r24, r28
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <MCP2515_write_data>:
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	c8 2f       	mov	r28, r24
     718:	7b 01       	movw	r14, r22
     71a:	8a 01       	movw	r16, r20
     71c:	f8 94       	cli
     71e:	cb d1       	rcall	.+918    	; 0xab6 <SPI_SS_low>
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	c3 d1       	rcall	.+902    	; 0xaaa <SPI_transcieve>
     724:	8c 2f       	mov	r24, r28
     726:	c1 d1       	rcall	.+898    	; 0xaaa <SPI_transcieve>
     728:	10 16       	cp	r1, r16
     72a:	11 06       	cpc	r1, r17
     72c:	44 f4       	brge	.+16     	; 0x73e <MCP2515_write_data+0x34>
     72e:	e7 01       	movw	r28, r14
     730:	0e 0d       	add	r16, r14
     732:	1f 1d       	adc	r17, r15
     734:	89 91       	ld	r24, Y+
     736:	b9 d1       	rcall	.+882    	; 0xaaa <SPI_transcieve>
     738:	c0 17       	cp	r28, r16
     73a:	d1 07       	cpc	r29, r17
     73c:	d9 f7       	brne	.-10     	; 0x734 <MCP2515_write_data+0x2a>
     73e:	bd d1       	rcall	.+890    	; 0xaba <SPI_SS_high>
     740:	78 94       	sei
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	08 95       	ret

00000750 <MCP2515_request_to_send>:
     750:	cf 93       	push	r28
     752:	c8 2f       	mov	r28, r24
     754:	f8 94       	cli
     756:	af d1       	rcall	.+862    	; 0xab6 <SPI_SS_low>
     758:	8c 2f       	mov	r24, r28
     75a:	87 70       	andi	r24, 0x07	; 7
     75c:	80 68       	ori	r24, 0x80	; 128
     75e:	a5 d1       	rcall	.+842    	; 0xaaa <SPI_transcieve>
     760:	ac d1       	rcall	.+856    	; 0xaba <SPI_SS_high>
     762:	78 94       	sei
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <MCP2515_bit_modify>:
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	18 2f       	mov	r17, r24
     770:	d6 2f       	mov	r29, r22
     772:	c4 2f       	mov	r28, r20
     774:	f8 94       	cli
     776:	9f d1       	rcall	.+830    	; 0xab6 <SPI_SS_low>
     778:	85 e0       	ldi	r24, 0x05	; 5
     77a:	97 d1       	rcall	.+814    	; 0xaaa <SPI_transcieve>
     77c:	81 2f       	mov	r24, r17
     77e:	95 d1       	rcall	.+810    	; 0xaaa <SPI_transcieve>
     780:	8d 2f       	mov	r24, r29
     782:	93 d1       	rcall	.+806    	; 0xaaa <SPI_transcieve>
     784:	8c 2f       	mov	r24, r28
     786:	91 d1       	rcall	.+802    	; 0xaaa <SPI_transcieve>
     788:	98 d1       	rcall	.+816    	; 0xaba <SPI_SS_high>
     78a:	78 94       	sei
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	08 95       	ret

00000794 <MCP2515_reset>:
     794:	f8 94       	cli
     796:	8f d1       	rcall	.+798    	; 0xab6 <SPI_SS_low>
     798:	80 ec       	ldi	r24, 0xC0	; 192
     79a:	87 d1       	rcall	.+782    	; 0xaaa <SPI_transcieve>
     79c:	8e d1       	rcall	.+796    	; 0xaba <SPI_SS_high>
     79e:	78 94       	sei
     7a0:	08 95       	ret

000007a2 <MCP2515_init>:
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	1f 92       	push	r1
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	77 d1       	rcall	.+750    	; 0xa9c <SPI_master_init>
     7ae:	f2 df       	rcall	.-28     	; 0x794 <MCP2515_reset>
     7b0:	8f e3       	ldi	r24, 0x3F	; 63
     7b2:	9c e9       	ldi	r25, 0x9C	; 156
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <MCP2515_init+0x12>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <MCP2515_init+0x18>
     7ba:	00 00       	nop
     7bc:	8e e0       	ldi	r24, 0x0E	; 14
     7be:	95 df       	rcall	.-214    	; 0x6ea <MCP2515_read_data>
     7c0:	89 83       	std	Y+1, r24	; 0x01
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	80 7e       	andi	r24, 0xE0	; 224
     7c6:	80 38       	cpi	r24, 0x80	; 128
     7c8:	29 f0       	breq	.+10     	; 0x7d4 <MCP2515_init+0x32>
     7ca:	86 e8       	ldi	r24, 0x86	; 134
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	c1 d4       	rcall	.+2434   	; 0x1152 <puts>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <MCP2515_init+0x34>
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	0f 90       	pop	r0
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <MOTOR_max_encoder_value>:
		if(byte & (1 << i)) {
			reversed_byte |= (1 << (7 - i));
		}
	}
	return reversed_byte;
}
     7de:	80 91 e5 02 	lds	r24, 0x02E5
     7e2:	90 91 e6 02 	lds	r25, 0x02E6
     7e6:	08 95       	ret

000007e8 <MOTOR_set_velocity>:
     7e8:	80 37       	cpi	r24, 0x70	; 112
     7ea:	10 f4       	brcc	.+4      	; 0x7f0 <MOTOR_set_velocity+0x8>
     7ec:	4c cf       	rjmp	.-360    	; 0x686 <DAC_write>
     7ee:	08 95       	ret
     7f0:	80 e7       	ldi	r24, 0x70	; 112
     7f2:	49 cf       	rjmp	.-366    	; 0x686 <DAC_write>
     7f4:	08 95       	ret

000007f6 <MOTOR_set_dir_right>:
     7f6:	88 23       	and	r24, r24
     7f8:	31 f0       	breq	.+12     	; 0x806 <MOTOR_set_dir_right+0x10>
     7fa:	e2 e0       	ldi	r30, 0x02	; 2
     7fc:	f1 e0       	ldi	r31, 0x01	; 1
     7fe:	80 81       	ld	r24, Z
     800:	82 60       	ori	r24, 0x02	; 2
     802:	80 83       	st	Z, r24
     804:	08 95       	ret
     806:	e2 e0       	ldi	r30, 0x02	; 2
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	80 81       	ld	r24, Z
     80c:	8d 7f       	andi	r24, 0xFD	; 253
     80e:	80 83       	st	Z, r24
     810:	08 95       	ret

00000812 <MOTOR_read_encoder>:

int16_t MOTOR_read_encoder() {
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	1f 92       	push	r1
     818:	1f 92       	push	r1
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t encoder_value = 0;
     81e:	1a 82       	std	Y+2, r1	; 0x02
     820:	19 82       	std	Y+1, r1	; 0x01

	MJ1_PORT &= ~(1 << OE); // Set !OE low to enable output of encoder
     822:	e2 e0       	ldi	r30, 0x02	; 2
     824:	f1 e0       	ldi	r31, 0x01	; 1
     826:	80 81       	ld	r24, Z
     828:	8f 7d       	andi	r24, 0xDF	; 223
     82a:	80 83       	st	Z, r24

	MJ1_PORT |= (1 << SEL); // Set SEL low to get low byte
     82c:	80 81       	ld	r24, Z
     82e:	88 60       	ori	r24, 0x08	; 8
     830:	80 83       	st	Z, r24
     832:	2f ef       	ldi	r18, 0xFF	; 255
     834:	89 ef       	ldi	r24, 0xF9	; 249
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	80 40       	sbci	r24, 0x00	; 0
     83c:	90 40       	sbci	r25, 0x00	; 0
     83e:	e1 f7       	brne	.-8      	; 0x838 <MOTOR_read_encoder+0x26>
     840:	00 c0       	rjmp	.+0      	; 0x842 <MOTOR_read_encoder+0x30>
     842:	00 00       	nop
	_delay_ms(20);
	encoder_value |= (MJ2_DATA << 0);
     844:	20 91 06 01 	lds	r18, 0x0106
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	82 2b       	or	r24, r18
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01

	MJ1_PORT &= ~(1 << SEL); // Set SEL high to get high byte
     852:	80 81       	ld	r24, Z
     854:	87 7f       	andi	r24, 0xF7	; 247
     856:	80 83       	st	Z, r24
     858:	2f ef       	ldi	r18, 0xFF	; 255
     85a:	89 ef       	ldi	r24, 0xF9	; 249
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	80 40       	sbci	r24, 0x00	; 0
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <MOTOR_read_encoder+0x4c>
     866:	00 c0       	rjmp	.+0      	; 0x868 <MOTOR_read_encoder+0x56>
     868:	00 00       	nop
	_delay_ms(20);
	encoder_value |= (MJ2_DATA << 8);
     86a:	20 91 06 01 	lds	r18, 0x0106
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	9a 81       	ldd	r25, Y+2	; 0x02
     872:	92 2b       	or	r25, r18
     874:	9a 83       	std	Y+2, r25	; 0x02
     876:	89 83       	std	Y+1, r24	; 0x01

	/*MJ1_PORT &= ~(1 << RST); // Toggle !RST to reset encoder
	_delay_ms(20);
	MJ1_PORT |= (1 << RST);*/

	MJ1_PORT |= (1 << OE); // Set !OE high to disable output of encoder
     878:	80 81       	ld	r24, Z
     87a:	80 62       	ori	r24, 0x20	; 32
     87c:	80 83       	st	Z, r24
	
	// Return negative of encoder value as we want right to be the positive direction
	return -encoder_value;
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	9a 81       	ldd	r25, Y+2	; 0x02
     882:	91 95       	neg	r25
     884:	81 95       	neg	r24
     886:	91 09       	sbc	r25, r1
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <MOTOR_calibrate>:
	
	MOTOR_calibrate();
}

void MOTOR_calibrate() {
	MOTOR_set_dir_right(0);
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	b0 df       	rcall	.-160    	; 0x7f6 <MOTOR_set_dir_right>
}

void MOTOR_set_velocity(uint8_t vel) {
	vel < max_velocity ?
		DAC_write(vel) :
		DAC_write(max_velocity);
     896:	80 e7       	ldi	r24, 0x70	; 112
     898:	f6 de       	rcall	.-532    	; 0x686 <DAC_write>
     89a:	2f ef       	ldi	r18, 0xFF	; 255
     89c:	8b e7       	ldi	r24, 0x7B	; 123
     89e:	92 e9       	ldi	r25, 0x92	; 146
     8a0:	21 50       	subi	r18, 0x01	; 1
     8a2:	80 40       	sbci	r24, 0x00	; 0
     8a4:	90 40       	sbci	r25, 0x00	; 0
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <MOTOR_calibrate+0xe>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <MOTOR_calibrate+0x18>
     8aa:	00 00       	nop
	return max_encoder_value;
}

void MOTOR_set_velocity(uint8_t vel) {
	vel < max_velocity ?
		DAC_write(vel) :
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	eb de       	rcall	.-554    	; 0x686 <DAC_write>
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	89 ef       	ldi	r24, 0xF9	; 249
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	21 50       	subi	r18, 0x01	; 1
     8b8:	80 40       	sbci	r24, 0x00	; 0
     8ba:	90 40       	sbci	r25, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <MOTOR_calibrate+0x24>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <MOTOR_calibrate+0x2e>
     8c0:	00 00       	nop
	_delay_ms(3000);
	MOTOR_set_velocity(0);
	_delay_ms(20);
	
	// Toggle !RST to reset encoder
	MJ1_PORT &= ~(1 << RST);
     8c2:	e2 e0       	ldi	r30, 0x02	; 2
     8c4:	f1 e0       	ldi	r31, 0x01	; 1
     8c6:	80 81       	ld	r24, Z
     8c8:	8f 7b       	andi	r24, 0xBF	; 191
     8ca:	80 83       	st	Z, r24
     8cc:	2f ef       	ldi	r18, 0xFF	; 255
     8ce:	89 ef       	ldi	r24, 0xF9	; 249
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	21 50       	subi	r18, 0x01	; 1
     8d4:	80 40       	sbci	r24, 0x00	; 0
     8d6:	90 40       	sbci	r25, 0x00	; 0
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <MOTOR_calibrate+0x40>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <MOTOR_calibrate+0x4a>
     8dc:	00 00       	nop
	_delay_ms(20);
	MJ1_PORT |= (1 << RST);
     8de:	80 81       	ld	r24, Z
     8e0:	80 64       	ori	r24, 0x40	; 64
     8e2:	80 83       	st	Z, r24
	
	printf("Zero: %d\n", MOTOR_read_encoder());
     8e4:	96 df       	rcall	.-212    	; 0x812 <MOTOR_read_encoder>
     8e6:	9f 93       	push	r25
     8e8:	8f 93       	push	r24
     8ea:	88 eb       	ldi	r24, 0xB8	; 184
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	9f 93       	push	r25
     8f0:	8f 93       	push	r24
     8f2:	1e d4       	rcall	.+2108   	; 0x1130 <printf>
	
	MOTOR_set_dir_right(1);
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	7f df       	rcall	.-258    	; 0x7f6 <MOTOR_set_dir_right>
}

void MOTOR_set_velocity(uint8_t vel) {
	vel < max_velocity ?
		DAC_write(vel) :
		DAC_write(max_velocity);
     8f8:	80 e7       	ldi	r24, 0x70	; 112
     8fa:	c5 de       	rcall	.-630    	; 0x686 <DAC_write>
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	8b e7       	ldi	r24, 0x7B	; 123
     900:	92 e9       	ldi	r25, 0x92	; 146
     902:	21 50       	subi	r18, 0x01	; 1
     904:	80 40       	sbci	r24, 0x00	; 0
     906:	90 40       	sbci	r25, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <MOTOR_calibrate+0x70>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <MOTOR_calibrate+0x7a>
     90c:	00 00       	nop
	MOTOR_set_dir_right(1);
	MOTOR_set_velocity(max_velocity);
	_delay_ms(3000);
	//MOTOR_set_velocity(0);

	max_encoder_value = MOTOR_read_encoder();
     90e:	81 df       	rcall	.-254    	; 0x812 <MOTOR_read_encoder>
     910:	80 93 e5 02 	sts	0x02E5, r24
     914:	90 93 e6 02 	sts	0x02E6, r25
	
	printf("Max: %d\n", max_encoder_value);
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	82 ec       	ldi	r24, 0xC2	; 194
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	05 d4       	rcall	.+2058   	; 0x1130 <printf>
     926:	2f ef       	ldi	r18, 0xFF	; 255
     928:	83 ed       	ldi	r24, 0xD3	; 211
     92a:	90 e3       	ldi	r25, 0x30	; 48
     92c:	21 50       	subi	r18, 0x01	; 1
     92e:	80 40       	sbci	r24, 0x00	; 0
     930:	90 40       	sbci	r25, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <MOTOR_calibrate+0x9a>
     934:	00 c0       	rjmp	.+0      	; 0x936 <MOTOR_calibrate+0xa4>
     936:	00 00       	nop
     938:	8d b7       	in	r24, 0x3d	; 61
     93a:	9e b7       	in	r25, 0x3e	; 62
     93c:	08 96       	adiw	r24, 0x08	; 8
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	9e bf       	out	0x3e, r25	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	8d bf       	out	0x3d, r24	; 61
     948:	08 95       	ret

0000094a <MOTOR_init>:
const uint8_t max_velocity = 0x70;

int16_t max_encoder_value;

void MOTOR_init() {
	DAC_init();
     94a:	9b de       	rcall	.-714    	; 0x682 <DAC_init>
	// Set MJ1_PORT to input
	MJ1_DDR		|= (1 << DIR) | (1 << EN) | (1 << SEL) | (1 << OE) | (1 << RST);
     94c:	e1 e0       	ldi	r30, 0x01	; 1
     94e:	f1 e0       	ldi	r31, 0x01	; 1
     950:	80 81       	ld	r24, Z
     952:	8a 67       	ori	r24, 0x7A	; 122
     954:	80 83       	st	Z, r24
	// Set MJ2_PORT to output
	MJ2_DDR		= 0x00;
     956:	10 92 07 01 	sts	0x0107, r1
	// Enable motor and set direction to 1
	MJ1_PORT	|= (1 << EN) | (1 << DIR);
     95a:	e2 e0       	ldi	r30, 0x02	; 2
     95c:	f1 e0       	ldi	r31, 0x01	; 1
     95e:	80 81       	ld	r24, Z
     960:	82 61       	ori	r24, 0x12	; 18
     962:	80 83       	st	Z, r24
	// Toggle !RST to reset encoder
	MJ1_PORT &= ~(1 << RST); 
     964:	80 81       	ld	r24, Z
     966:	8f 7b       	andi	r24, 0xBF	; 191
     968:	80 83       	st	Z, r24
     96a:	2f ef       	ldi	r18, 0xFF	; 255
     96c:	89 ef       	ldi	r24, 0xF9	; 249
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	21 50       	subi	r18, 0x01	; 1
     972:	80 40       	sbci	r24, 0x00	; 0
     974:	90 40       	sbci	r25, 0x00	; 0
     976:	e1 f7       	brne	.-8      	; 0x970 <MOTOR_init+0x26>
     978:	00 c0       	rjmp	.+0      	; 0x97a <MOTOR_init+0x30>
     97a:	00 00       	nop
	_delay_ms(20);
	MJ1_PORT |= (1 << RST);
     97c:	80 81       	ld	r24, Z
     97e:	80 64       	ori	r24, 0x40	; 64
     980:	80 83       	st	Z, r24
	
	MOTOR_calibrate();
     982:	87 cf       	rjmp	.-242    	; 0x892 <MOTOR_calibrate>
     984:	08 95       	ret

00000986 <PWM_set_period>:
     986:	a0 e8       	ldi	r26, 0x80	; 128
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	22 e0       	ldi	r18, 0x02	; 2
     98c:	2c 93       	st	X, r18
     98e:	e1 e8       	ldi	r30, 0x81	; 129
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	28 e1       	ldi	r18, 0x18	; 24
     994:	20 83       	st	Z, r18
     996:	2c 91       	ld	r18, X
     998:	20 68       	ori	r18, 0x80	; 128
     99a:	2c 93       	st	X, r18
     99c:	20 81       	ld	r18, Z
     99e:	23 60       	ori	r18, 0x03	; 3
     9a0:	20 83       	st	Z, r18
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	4a e7       	ldi	r20, 0x7A	; 122
     9a8:	53 e4       	ldi	r21, 0x43	; 67
     9aa:	0f d3       	rcall	.+1566   	; 0xfca <__mulsf3>
     9ac:	2c d2       	rcall	.+1112   	; 0xe06 <__fixunssfsi>
     9ae:	70 93 87 00 	sts	0x0087, r23
     9b2:	60 93 86 00 	sts	0x0086, r22
     9b6:	25 9a       	sbi	0x04, 5	; 4
     9b8:	08 95       	ret

000009ba <PWM_set_pulse_width>:
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	4a e7       	ldi	r20, 0x7A	; 122
     9c0:	53 e4       	ldi	r21, 0x43	; 67
     9c2:	03 d3       	rcall	.+1542   	; 0xfca <__mulsf3>
     9c4:	20 d2       	rcall	.+1088   	; 0xe06 <__fixunssfsi>
     9c6:	70 93 89 00 	sts	0x0089, r23
     9ca:	60 93 88 00 	sts	0x0088, r22
     9ce:	08 95       	ret

000009d0 <SERVO_init>:

const float min = 0.9;
const float max = 2.1;

void SERVO_init() {
	PWM_set_period(20.0f);
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	80 ea       	ldi	r24, 0xA0	; 160
     9d6:	91 e4       	ldi	r25, 0x41	; 65
     9d8:	d6 df       	rcall	.-84     	; 0x986 <PWM_set_period>
		pulse_width = max;
	}
	if(pulse_width < min) {
		pulse_width = min;
	}
	PWM_set_pulse_width(pulse_width);
     9da:	67 ed       	ldi	r22, 0xD7	; 215
     9dc:	73 ea       	ldi	r23, 0xA3	; 163
     9de:	80 ec       	ldi	r24, 0xC0	; 192
     9e0:	9f e3       	ldi	r25, 0x3F	; 63
     9e2:	eb cf       	rjmp	.-42     	; 0x9ba <PWM_set_pulse_width>
     9e4:	08 95       	ret

000009e6 <SERVO_write>:
void SERVO_init() {
	PWM_set_period(20.0f);
	SERVO_write((max + min)/2);
}

void SERVO_write(int8_t value) {
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
	float pulse_width = value/100.0f * 0.5f + (max + min)/2;
     9ee:	68 2f       	mov	r22, r24
     9f0:	77 27       	eor	r23, r23
     9f2:	67 fd       	sbrc	r22, 7
     9f4:	70 95       	com	r23
     9f6:	87 2f       	mov	r24, r23
     9f8:	97 2f       	mov	r25, r23
     9fa:	33 d2       	rcall	.+1126   	; 0xe62 <__floatsisf>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	48 ec       	ldi	r20, 0xC8	; 200
     a02:	52 e4       	ldi	r21, 0x42	; 66
     a04:	98 d1       	rcall	.+816    	; 0xd36 <__divsf3>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	5f e3       	ldi	r21, 0x3F	; 63
     a0e:	dd d2       	rcall	.+1466   	; 0xfca <__mulsf3>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 ec       	ldi	r20, 0xC0	; 192
     a16:	5f e3       	ldi	r21, 0x3F	; 63
     a18:	26 d1       	rcall	.+588    	; 0xc66 <__addsf3>
     a1a:	6b 01       	movw	r12, r22
     a1c:	7c 01       	movw	r14, r24
	if(pulse_width > max) {
     a1e:	26 e6       	ldi	r18, 0x66	; 102
     a20:	36 e6       	ldi	r19, 0x66	; 102
     a22:	46 e0       	ldi	r20, 0x06	; 6
     a24:	50 e4       	ldi	r21, 0x40	; 64
     a26:	cd d2       	rcall	.+1434   	; 0xfc2 <__gesf2>
     a28:	18 16       	cp	r1, r24
     a2a:	54 f0       	brlt	.+20     	; 0xa40 <SERVO_write+0x5a>
		pulse_width = max;
	}
	if(pulse_width < min) {
     a2c:	26 e6       	ldi	r18, 0x66	; 102
     a2e:	36 e6       	ldi	r19, 0x66	; 102
     a30:	46 e6       	ldi	r20, 0x66	; 102
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	c7 01       	movw	r24, r14
     a36:	b6 01       	movw	r22, r12
     a38:	7a d1       	rcall	.+756    	; 0xd2e <__cmpsf2>
     a3a:	88 23       	and	r24, r24
     a3c:	5c f0       	brlt	.+22     	; 0xa54 <SERVO_write+0x6e>
     a3e:	12 c0       	rjmp	.+36     	; 0xa64 <SERVO_write+0x7e>
}

void SERVO_write(int8_t value) {
	float pulse_width = value/100.0f * 0.5f + (max + min)/2;
	if(pulse_width > max) {
		pulse_width = max;
     a40:	0f 2e       	mov	r0, r31
     a42:	f6 e6       	ldi	r31, 0x66	; 102
     a44:	cf 2e       	mov	r12, r31
     a46:	dc 2c       	mov	r13, r12
     a48:	f6 e0       	ldi	r31, 0x06	; 6
     a4a:	ef 2e       	mov	r14, r31
     a4c:	f0 e4       	ldi	r31, 0x40	; 64
     a4e:	ff 2e       	mov	r15, r31
     a50:	f0 2d       	mov	r31, r0
     a52:	08 c0       	rjmp	.+16     	; 0xa64 <SERVO_write+0x7e>
	}
	if(pulse_width < min) {
		pulse_width = min;
     a54:	0f 2e       	mov	r0, r31
     a56:	f6 e6       	ldi	r31, 0x66	; 102
     a58:	cf 2e       	mov	r12, r31
     a5a:	dc 2c       	mov	r13, r12
     a5c:	ec 2c       	mov	r14, r12
     a5e:	ff e3       	ldi	r31, 0x3F	; 63
     a60:	ff 2e       	mov	r15, r31
     a62:	f0 2d       	mov	r31, r0
	}
	PWM_set_pulse_width(pulse_width);
     a64:	c7 01       	movw	r24, r14
     a66:	b6 01       	movw	r22, r12
     a68:	a8 df       	rcall	.-176    	; 0x9ba <PWM_set_pulse_width>
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	08 95       	ret

00000a74 <SOLENOID_init>:
#include <util/delay.h>

#include "solenoid.h"

void SOLENOID_init() {
	SOLENOID_DDR |= (1 << SOLENOID_PIN);
     a74:	6c 9a       	sbi	0x0d, 4	; 13
     a76:	08 95       	ret

00000a78 <SOLENOID_shoot>:
}

void SOLENOID_shoot(uint8_t enable) {
	static uint8_t enabled = 0;
	if(enable != enabled) {
     a78:	90 91 dc 02 	lds	r25, 0x02DC
     a7c:	89 17       	cp	r24, r25
     a7e:	69 f0       	breq	.+26     	; 0xa9a <SOLENOID_shoot+0x22>
		if(enable) {
     a80:	88 23       	and	r24, r24
     a82:	11 f0       	breq	.+4      	; 0xa88 <SOLENOID_shoot+0x10>
			SOLENOID_PORT &= ~(1 << SOLENOID_PIN);
     a84:	74 98       	cbi	0x0e, 4	; 14
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <SOLENOID_shoot+0x12>
		} else {
			SOLENOID_PORT |= (1 << SOLENOID_PIN);
     a88:	74 9a       	sbi	0x0e, 4	; 14
     a8a:	ef e3       	ldi	r30, 0x3F	; 63
     a8c:	fc e9       	ldi	r31, 0x9C	; 156
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <SOLENOID_shoot+0x16>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <SOLENOID_shoot+0x1c>
     a94:	00 00       	nop
		}
		_delay_ms(10);
		enabled = enable;
     a96:	80 93 dc 02 	sts	0x02DC, r24
     a9a:	08 95       	ret

00000a9c <SPI_master_init>:
     a9c:	87 e8       	ldi	r24, 0x87	; 135
     a9e:	84 b9       	out	0x04, r24	; 4
     aa0:	28 9a       	sbi	0x05, 0	; 5
     aa2:	8c b5       	in	r24, 0x2c	; 44
     aa4:	81 65       	ori	r24, 0x51	; 81
     aa6:	8c bd       	out	0x2c, r24	; 44
     aa8:	08 95       	ret

00000aaa <SPI_transcieve>:
     aaa:	8e bd       	out	0x2e, r24	; 46
     aac:	0d b4       	in	r0, 0x2d	; 45
     aae:	07 fe       	sbrs	r0, 7
     ab0:	fd cf       	rjmp	.-6      	; 0xaac <SPI_transcieve+0x2>
     ab2:	8e b5       	in	r24, 0x2e	; 46
     ab4:	08 95       	ret

00000ab6 <SPI_SS_low>:
     ab6:	2f 98       	cbi	0x05, 7	; 5
     ab8:	08 95       	ret

00000aba <SPI_SS_high>:
     aba:	2f 9a       	sbi	0x05, 7	; 5
     abc:	08 95       	ret

00000abe <TWI_Master_Initialise>:
     abe:	8c e0       	ldi	r24, 0x0C	; 12
     ac0:	80 93 b8 00 	sts	0x00B8, r24
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	80 93 bb 00 	sts	0x00BB, r24
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	80 93 bc 00 	sts	0x00BC, r24
     ad0:	08 95       	ret

00000ad2 <TWI_Start_Transceiver_With_Data>:
     ad2:	ec eb       	ldi	r30, 0xBC	; 188
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	20 81       	ld	r18, Z
     ad8:	20 fd       	sbrc	r18, 0
     ada:	fd cf       	rjmp	.-6      	; 0xad6 <TWI_Start_Transceiver_With_Data+0x4>
     adc:	60 93 df 02 	sts	0x02DF, r22
     ae0:	fc 01       	movw	r30, r24
     ae2:	20 81       	ld	r18, Z
     ae4:	20 93 e0 02 	sts	0x02E0, r18
     ae8:	20 fd       	sbrc	r18, 0
     aea:	0c c0       	rjmp	.+24     	; 0xb04 <TWI_Start_Transceiver_With_Data+0x32>
     aec:	62 30       	cpi	r22, 0x02	; 2
     aee:	50 f0       	brcs	.+20     	; 0xb04 <TWI_Start_Transceiver_With_Data+0x32>
     af0:	dc 01       	movw	r26, r24
     af2:	11 96       	adiw	r26, 0x01	; 1
     af4:	e1 ee       	ldi	r30, 0xE1	; 225
     af6:	f2 e0       	ldi	r31, 0x02	; 2
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	9d 91       	ld	r25, X+
     afc:	91 93       	st	Z+, r25
     afe:	8f 5f       	subi	r24, 0xFF	; 255
     b00:	86 13       	cpse	r24, r22
     b02:	fb cf       	rjmp	.-10     	; 0xafa <TWI_Start_Transceiver_With_Data+0x28>
     b04:	10 92 de 02 	sts	0x02DE, r1
     b08:	88 ef       	ldi	r24, 0xF8	; 248
     b0a:	80 93 13 02 	sts	0x0213, r24
     b0e:	85 ea       	ldi	r24, 0xA5	; 165
     b10:	80 93 bc 00 	sts	0x00BC, r24
     b14:	08 95       	ret

00000b16 <__vector_39>:
     b16:	1f 92       	push	r1
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	0f 92       	push	r0
     b1e:	11 24       	eor	r1, r1
     b20:	0b b6       	in	r0, 0x3b	; 59
     b22:	0f 92       	push	r0
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
     b34:	80 91 b9 00 	lds	r24, 0x00B9
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	fc 01       	movw	r30, r24
     b3c:	38 97       	sbiw	r30, 0x08	; 8
     b3e:	e1 35       	cpi	r30, 0x51	; 81
     b40:	f1 05       	cpc	r31, r1
     b42:	08 f0       	brcs	.+2      	; 0xb46 <__vector_39+0x30>
     b44:	55 c0       	rjmp	.+170    	; 0xbf0 <__vector_39+0xda>
     b46:	ee 58       	subi	r30, 0x8E	; 142
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	a2 c2       	rjmp	.+1348   	; 0x1090 <__tablejump2__>
     b4c:	10 92 dd 02 	sts	0x02DD, r1
     b50:	e0 91 dd 02 	lds	r30, 0x02DD
     b54:	80 91 df 02 	lds	r24, 0x02DF
     b58:	e8 17       	cp	r30, r24
     b5a:	70 f4       	brcc	.+28     	; 0xb78 <__vector_39+0x62>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	8e 0f       	add	r24, r30
     b60:	80 93 dd 02 	sts	0x02DD, r24
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	e0 52       	subi	r30, 0x20	; 32
     b68:	fd 4f       	sbci	r31, 0xFD	; 253
     b6a:	80 81       	ld	r24, Z
     b6c:	80 93 bb 00 	sts	0x00BB, r24
     b70:	85 e8       	ldi	r24, 0x85	; 133
     b72:	80 93 bc 00 	sts	0x00BC, r24
     b76:	43 c0       	rjmp	.+134    	; 0xbfe <__vector_39+0xe8>
     b78:	80 91 de 02 	lds	r24, 0x02DE
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	80 93 de 02 	sts	0x02DE, r24
     b82:	84 e9       	ldi	r24, 0x94	; 148
     b84:	80 93 bc 00 	sts	0x00BC, r24
     b88:	3a c0       	rjmp	.+116    	; 0xbfe <__vector_39+0xe8>
     b8a:	e0 91 dd 02 	lds	r30, 0x02DD
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	8e 0f       	add	r24, r30
     b92:	80 93 dd 02 	sts	0x02DD, r24
     b96:	80 91 bb 00 	lds	r24, 0x00BB
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	e0 52       	subi	r30, 0x20	; 32
     b9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ba0:	80 83       	st	Z, r24
     ba2:	20 91 dd 02 	lds	r18, 0x02DD
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	80 91 df 02 	lds	r24, 0x02DF
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	28 17       	cp	r18, r24
     bb2:	39 07       	cpc	r19, r25
     bb4:	24 f4       	brge	.+8      	; 0xbbe <__vector_39+0xa8>
     bb6:	85 ec       	ldi	r24, 0xC5	; 197
     bb8:	80 93 bc 00 	sts	0x00BC, r24
     bbc:	20 c0       	rjmp	.+64     	; 0xbfe <__vector_39+0xe8>
     bbe:	85 e8       	ldi	r24, 0x85	; 133
     bc0:	80 93 bc 00 	sts	0x00BC, r24
     bc4:	1c c0       	rjmp	.+56     	; 0xbfe <__vector_39+0xe8>
     bc6:	80 91 bb 00 	lds	r24, 0x00BB
     bca:	e0 91 dd 02 	lds	r30, 0x02DD
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	e0 52       	subi	r30, 0x20	; 32
     bd2:	fd 4f       	sbci	r31, 0xFD	; 253
     bd4:	80 83       	st	Z, r24
     bd6:	80 91 de 02 	lds	r24, 0x02DE
     bda:	81 60       	ori	r24, 0x01	; 1
     bdc:	80 93 de 02 	sts	0x02DE, r24
     be0:	84 e9       	ldi	r24, 0x94	; 148
     be2:	80 93 bc 00 	sts	0x00BC, r24
     be6:	0b c0       	rjmp	.+22     	; 0xbfe <__vector_39+0xe8>
     be8:	85 ea       	ldi	r24, 0xA5	; 165
     bea:	80 93 bc 00 	sts	0x00BC, r24
     bee:	07 c0       	rjmp	.+14     	; 0xbfe <__vector_39+0xe8>
     bf0:	80 91 b9 00 	lds	r24, 0x00B9
     bf4:	80 93 13 02 	sts	0x0213, r24
     bf8:	84 e0       	ldi	r24, 0x04	; 4
     bfa:	80 93 bc 00 	sts	0x00BC, r24
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	3f 91       	pop	r19
     c0c:	2f 91       	pop	r18
     c0e:	0f 90       	pop	r0
     c10:	0b be       	out	0x3b, r0	; 59
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	0f 90       	pop	r0
     c18:	1f 90       	pop	r1
     c1a:	18 95       	reti

00000c1c <UART_transmit>:
	
	return 0;
}

int UART_transmit(char data){
	while ( !( UCSR0A & (1 << UDRE0)));
     c1c:	e0 ec       	ldi	r30, 0xC0	; 192
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	90 81       	ld	r25, Z
     c22:	95 ff       	sbrs	r25, 5
     c24:	fd cf       	rjmp	.-6      	; 0xc20 <UART_transmit+0x4>
	UDR0 = data;
     c26:	80 93 c6 00 	sts	0x00C6, r24
	
	return 0;
}
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	08 95       	ret

00000c30 <UART_receive>:

unsigned char UART_receive(void){
	while(!(UCSR0A & (1 << RXC0)));
     c30:	e0 ec       	ldi	r30, 0xC0	; 192
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	88 23       	and	r24, r24
     c38:	ec f7       	brge	.-6      	; 0xc34 <UART_receive+0x4>
	return UDR0;
     c3a:	80 91 c6 00 	lds	r24, 0x00C6
}
     c3e:	08 95       	ret

00000c40 <UART_init>:
#include <avr/io.h>
#include <util/delay.h>

int UART_init(unsigned int ubrr){
	/* Set Baud rate */
	UBRR0H = (unsigned char)(ubrr >> 8);
     c40:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     c44:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     c48:	88 e1       	ldi	r24, 0x18	; 24
     c4a:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0)|(3 << UCSZ00);
     c4e:	8e e0       	ldi	r24, 0x0E	; 14
     c50:	80 93 c2 00 	sts	0x00C2, r24
	//enable printf
	fdevopen(&UART_transmit, &UART_receive);
     c54:	68 e1       	ldi	r22, 0x18	; 24
     c56:	76 e0       	ldi	r23, 0x06	; 6
     c58:	8e e0       	ldi	r24, 0x0E	; 14
     c5a:	96 e0       	ldi	r25, 0x06	; 6
     c5c:	1f d2       	rcall	.+1086   	; 0x109c <fdevopen>
	
	return 0;
}
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	08 95       	ret

00000c64 <__subsf3>:
     c64:	50 58       	subi	r21, 0x80	; 128

00000c66 <__addsf3>:
     c66:	bb 27       	eor	r27, r27
     c68:	aa 27       	eor	r26, r26
     c6a:	0e d0       	rcall	.+28     	; 0xc88 <__addsf3x>
     c6c:	70 c1       	rjmp	.+736    	; 0xf4e <__fp_round>
     c6e:	61 d1       	rcall	.+706    	; 0xf32 <__fp_pscA>
     c70:	30 f0       	brcs	.+12     	; 0xc7e <__addsf3+0x18>
     c72:	66 d1       	rcall	.+716    	; 0xf40 <__fp_pscB>
     c74:	20 f0       	brcs	.+8      	; 0xc7e <__addsf3+0x18>
     c76:	31 f4       	brne	.+12     	; 0xc84 <__addsf3+0x1e>
     c78:	9f 3f       	cpi	r25, 0xFF	; 255
     c7a:	11 f4       	brne	.+4      	; 0xc80 <__addsf3+0x1a>
     c7c:	1e f4       	brtc	.+6      	; 0xc84 <__addsf3+0x1e>
     c7e:	56 c1       	rjmp	.+684    	; 0xf2c <__fp_nan>
     c80:	0e f4       	brtc	.+2      	; 0xc84 <__addsf3+0x1e>
     c82:	e0 95       	com	r30
     c84:	e7 fb       	bst	r30, 7
     c86:	4c c1       	rjmp	.+664    	; 0xf20 <__fp_inf>

00000c88 <__addsf3x>:
     c88:	e9 2f       	mov	r30, r25
     c8a:	72 d1       	rcall	.+740    	; 0xf70 <__fp_split3>
     c8c:	80 f3       	brcs	.-32     	; 0xc6e <__addsf3+0x8>
     c8e:	ba 17       	cp	r27, r26
     c90:	62 07       	cpc	r22, r18
     c92:	73 07       	cpc	r23, r19
     c94:	84 07       	cpc	r24, r20
     c96:	95 07       	cpc	r25, r21
     c98:	18 f0       	brcs	.+6      	; 0xca0 <__addsf3x+0x18>
     c9a:	71 f4       	brne	.+28     	; 0xcb8 <__addsf3x+0x30>
     c9c:	9e f5       	brtc	.+102    	; 0xd04 <__addsf3x+0x7c>
     c9e:	8a c1       	rjmp	.+788    	; 0xfb4 <__fp_zero>
     ca0:	0e f4       	brtc	.+2      	; 0xca4 <__addsf3x+0x1c>
     ca2:	e0 95       	com	r30
     ca4:	0b 2e       	mov	r0, r27
     ca6:	ba 2f       	mov	r27, r26
     ca8:	a0 2d       	mov	r26, r0
     caa:	0b 01       	movw	r0, r22
     cac:	b9 01       	movw	r22, r18
     cae:	90 01       	movw	r18, r0
     cb0:	0c 01       	movw	r0, r24
     cb2:	ca 01       	movw	r24, r20
     cb4:	a0 01       	movw	r20, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	ff 27       	eor	r31, r31
     cba:	59 1b       	sub	r21, r25
     cbc:	99 f0       	breq	.+38     	; 0xce4 <__addsf3x+0x5c>
     cbe:	59 3f       	cpi	r21, 0xF9	; 249
     cc0:	50 f4       	brcc	.+20     	; 0xcd6 <__addsf3x+0x4e>
     cc2:	50 3e       	cpi	r21, 0xE0	; 224
     cc4:	68 f1       	brcs	.+90     	; 0xd20 <__addsf3x+0x98>
     cc6:	1a 16       	cp	r1, r26
     cc8:	f0 40       	sbci	r31, 0x00	; 0
     cca:	a2 2f       	mov	r26, r18
     ccc:	23 2f       	mov	r18, r19
     cce:	34 2f       	mov	r19, r20
     cd0:	44 27       	eor	r20, r20
     cd2:	58 5f       	subi	r21, 0xF8	; 248
     cd4:	f3 cf       	rjmp	.-26     	; 0xcbc <__addsf3x+0x34>
     cd6:	46 95       	lsr	r20
     cd8:	37 95       	ror	r19
     cda:	27 95       	ror	r18
     cdc:	a7 95       	ror	r26
     cde:	f0 40       	sbci	r31, 0x00	; 0
     ce0:	53 95       	inc	r21
     ce2:	c9 f7       	brne	.-14     	; 0xcd6 <__addsf3x+0x4e>
     ce4:	7e f4       	brtc	.+30     	; 0xd04 <__addsf3x+0x7c>
     ce6:	1f 16       	cp	r1, r31
     ce8:	ba 0b       	sbc	r27, r26
     cea:	62 0b       	sbc	r22, r18
     cec:	73 0b       	sbc	r23, r19
     cee:	84 0b       	sbc	r24, r20
     cf0:	ba f0       	brmi	.+46     	; 0xd20 <__addsf3x+0x98>
     cf2:	91 50       	subi	r25, 0x01	; 1
     cf4:	a1 f0       	breq	.+40     	; 0xd1e <__addsf3x+0x96>
     cf6:	ff 0f       	add	r31, r31
     cf8:	bb 1f       	adc	r27, r27
     cfa:	66 1f       	adc	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	88 1f       	adc	r24, r24
     d00:	c2 f7       	brpl	.-16     	; 0xcf2 <__addsf3x+0x6a>
     d02:	0e c0       	rjmp	.+28     	; 0xd20 <__addsf3x+0x98>
     d04:	ba 0f       	add	r27, r26
     d06:	62 1f       	adc	r22, r18
     d08:	73 1f       	adc	r23, r19
     d0a:	84 1f       	adc	r24, r20
     d0c:	48 f4       	brcc	.+18     	; 0xd20 <__addsf3x+0x98>
     d0e:	87 95       	ror	r24
     d10:	77 95       	ror	r23
     d12:	67 95       	ror	r22
     d14:	b7 95       	ror	r27
     d16:	f7 95       	ror	r31
     d18:	9e 3f       	cpi	r25, 0xFE	; 254
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <__addsf3x+0x96>
     d1c:	b3 cf       	rjmp	.-154    	; 0xc84 <__addsf3+0x1e>
     d1e:	93 95       	inc	r25
     d20:	88 0f       	add	r24, r24
     d22:	08 f0       	brcs	.+2      	; 0xd26 <__addsf3x+0x9e>
     d24:	99 27       	eor	r25, r25
     d26:	ee 0f       	add	r30, r30
     d28:	97 95       	ror	r25
     d2a:	87 95       	ror	r24
     d2c:	08 95       	ret

00000d2e <__cmpsf2>:
     d2e:	d4 d0       	rcall	.+424    	; 0xed8 <__fp_cmp>
     d30:	08 f4       	brcc	.+2      	; 0xd34 <__cmpsf2+0x6>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	08 95       	ret

00000d36 <__divsf3>:
     d36:	0c d0       	rcall	.+24     	; 0xd50 <__divsf3x>
     d38:	0a c1       	rjmp	.+532    	; 0xf4e <__fp_round>
     d3a:	02 d1       	rcall	.+516    	; 0xf40 <__fp_pscB>
     d3c:	40 f0       	brcs	.+16     	; 0xd4e <__divsf3+0x18>
     d3e:	f9 d0       	rcall	.+498    	; 0xf32 <__fp_pscA>
     d40:	30 f0       	brcs	.+12     	; 0xd4e <__divsf3+0x18>
     d42:	21 f4       	brne	.+8      	; 0xd4c <__divsf3+0x16>
     d44:	5f 3f       	cpi	r21, 0xFF	; 255
     d46:	19 f0       	breq	.+6      	; 0xd4e <__divsf3+0x18>
     d48:	eb c0       	rjmp	.+470    	; 0xf20 <__fp_inf>
     d4a:	51 11       	cpse	r21, r1
     d4c:	34 c1       	rjmp	.+616    	; 0xfb6 <__fp_szero>
     d4e:	ee c0       	rjmp	.+476    	; 0xf2c <__fp_nan>

00000d50 <__divsf3x>:
     d50:	0f d1       	rcall	.+542    	; 0xf70 <__fp_split3>
     d52:	98 f3       	brcs	.-26     	; 0xd3a <__divsf3+0x4>

00000d54 <__divsf3_pse>:
     d54:	99 23       	and	r25, r25
     d56:	c9 f3       	breq	.-14     	; 0xd4a <__divsf3+0x14>
     d58:	55 23       	and	r21, r21
     d5a:	b1 f3       	breq	.-20     	; 0xd48 <__divsf3+0x12>
     d5c:	95 1b       	sub	r25, r21
     d5e:	55 0b       	sbc	r21, r21
     d60:	bb 27       	eor	r27, r27
     d62:	aa 27       	eor	r26, r26
     d64:	62 17       	cp	r22, r18
     d66:	73 07       	cpc	r23, r19
     d68:	84 07       	cpc	r24, r20
     d6a:	38 f0       	brcs	.+14     	; 0xd7a <__divsf3_pse+0x26>
     d6c:	9f 5f       	subi	r25, 0xFF	; 255
     d6e:	5f 4f       	sbci	r21, 0xFF	; 255
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	44 1f       	adc	r20, r20
     d76:	aa 1f       	adc	r26, r26
     d78:	a9 f3       	breq	.-22     	; 0xd64 <__divsf3_pse+0x10>
     d7a:	33 d0       	rcall	.+102    	; 0xde2 <__divsf3_pse+0x8e>
     d7c:	0e 2e       	mov	r0, r30
     d7e:	3a f0       	brmi	.+14     	; 0xd8e <__divsf3_pse+0x3a>
     d80:	e0 e8       	ldi	r30, 0x80	; 128
     d82:	30 d0       	rcall	.+96     	; 0xde4 <__divsf3_pse+0x90>
     d84:	91 50       	subi	r25, 0x01	; 1
     d86:	50 40       	sbci	r21, 0x00	; 0
     d88:	e6 95       	lsr	r30
     d8a:	00 1c       	adc	r0, r0
     d8c:	ca f7       	brpl	.-14     	; 0xd80 <__divsf3_pse+0x2c>
     d8e:	29 d0       	rcall	.+82     	; 0xde2 <__divsf3_pse+0x8e>
     d90:	fe 2f       	mov	r31, r30
     d92:	27 d0       	rcall	.+78     	; 0xde2 <__divsf3_pse+0x8e>
     d94:	66 0f       	add	r22, r22
     d96:	77 1f       	adc	r23, r23
     d98:	88 1f       	adc	r24, r24
     d9a:	bb 1f       	adc	r27, r27
     d9c:	26 17       	cp	r18, r22
     d9e:	37 07       	cpc	r19, r23
     da0:	48 07       	cpc	r20, r24
     da2:	ab 07       	cpc	r26, r27
     da4:	b0 e8       	ldi	r27, 0x80	; 128
     da6:	09 f0       	breq	.+2      	; 0xdaa <__divsf3_pse+0x56>
     da8:	bb 0b       	sbc	r27, r27
     daa:	80 2d       	mov	r24, r0
     dac:	bf 01       	movw	r22, r30
     dae:	ff 27       	eor	r31, r31
     db0:	93 58       	subi	r25, 0x83	; 131
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	2a f0       	brmi	.+10     	; 0xdc0 <__divsf3_pse+0x6c>
     db6:	9e 3f       	cpi	r25, 0xFE	; 254
     db8:	51 05       	cpc	r21, r1
     dba:	68 f0       	brcs	.+26     	; 0xdd6 <__divsf3_pse+0x82>
     dbc:	b1 c0       	rjmp	.+354    	; 0xf20 <__fp_inf>
     dbe:	fb c0       	rjmp	.+502    	; 0xfb6 <__fp_szero>
     dc0:	5f 3f       	cpi	r21, 0xFF	; 255
     dc2:	ec f3       	brlt	.-6      	; 0xdbe <__divsf3_pse+0x6a>
     dc4:	98 3e       	cpi	r25, 0xE8	; 232
     dc6:	dc f3       	brlt	.-10     	; 0xdbe <__divsf3_pse+0x6a>
     dc8:	86 95       	lsr	r24
     dca:	77 95       	ror	r23
     dcc:	67 95       	ror	r22
     dce:	b7 95       	ror	r27
     dd0:	f7 95       	ror	r31
     dd2:	9f 5f       	subi	r25, 0xFF	; 255
     dd4:	c9 f7       	brne	.-14     	; 0xdc8 <__divsf3_pse+0x74>
     dd6:	88 0f       	add	r24, r24
     dd8:	91 1d       	adc	r25, r1
     dda:	96 95       	lsr	r25
     ddc:	87 95       	ror	r24
     dde:	97 f9       	bld	r25, 7
     de0:	08 95       	ret
     de2:	e1 e0       	ldi	r30, 0x01	; 1
     de4:	66 0f       	add	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	bb 1f       	adc	r27, r27
     dec:	62 17       	cp	r22, r18
     dee:	73 07       	cpc	r23, r19
     df0:	84 07       	cpc	r24, r20
     df2:	ba 07       	cpc	r27, r26
     df4:	20 f0       	brcs	.+8      	; 0xdfe <__divsf3_pse+0xaa>
     df6:	62 1b       	sub	r22, r18
     df8:	73 0b       	sbc	r23, r19
     dfa:	84 0b       	sbc	r24, r20
     dfc:	ba 0b       	sbc	r27, r26
     dfe:	ee 1f       	adc	r30, r30
     e00:	88 f7       	brcc	.-30     	; 0xde4 <__divsf3_pse+0x90>
     e02:	e0 95       	com	r30
     e04:	08 95       	ret

00000e06 <__fixunssfsi>:
     e06:	bc d0       	rcall	.+376    	; 0xf80 <__fp_splitA>
     e08:	88 f0       	brcs	.+34     	; 0xe2c <__fixunssfsi+0x26>
     e0a:	9f 57       	subi	r25, 0x7F	; 127
     e0c:	90 f0       	brcs	.+36     	; 0xe32 <__fixunssfsi+0x2c>
     e0e:	b9 2f       	mov	r27, r25
     e10:	99 27       	eor	r25, r25
     e12:	b7 51       	subi	r27, 0x17	; 23
     e14:	a0 f0       	brcs	.+40     	; 0xe3e <__fixunssfsi+0x38>
     e16:	d1 f0       	breq	.+52     	; 0xe4c <__fixunssfsi+0x46>
     e18:	66 0f       	add	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	88 1f       	adc	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	1a f0       	brmi	.+6      	; 0xe28 <__fixunssfsi+0x22>
     e22:	ba 95       	dec	r27
     e24:	c9 f7       	brne	.-14     	; 0xe18 <__fixunssfsi+0x12>
     e26:	12 c0       	rjmp	.+36     	; 0xe4c <__fixunssfsi+0x46>
     e28:	b1 30       	cpi	r27, 0x01	; 1
     e2a:	81 f0       	breq	.+32     	; 0xe4c <__fixunssfsi+0x46>
     e2c:	c3 d0       	rcall	.+390    	; 0xfb4 <__fp_zero>
     e2e:	b1 e0       	ldi	r27, 0x01	; 1
     e30:	08 95       	ret
     e32:	c0 c0       	rjmp	.+384    	; 0xfb4 <__fp_zero>
     e34:	67 2f       	mov	r22, r23
     e36:	78 2f       	mov	r23, r24
     e38:	88 27       	eor	r24, r24
     e3a:	b8 5f       	subi	r27, 0xF8	; 248
     e3c:	39 f0       	breq	.+14     	; 0xe4c <__fixunssfsi+0x46>
     e3e:	b9 3f       	cpi	r27, 0xF9	; 249
     e40:	cc f3       	brlt	.-14     	; 0xe34 <__fixunssfsi+0x2e>
     e42:	86 95       	lsr	r24
     e44:	77 95       	ror	r23
     e46:	67 95       	ror	r22
     e48:	b3 95       	inc	r27
     e4a:	d9 f7       	brne	.-10     	; 0xe42 <__fixunssfsi+0x3c>
     e4c:	3e f4       	brtc	.+14     	; 0xe5c <__fixunssfsi+0x56>
     e4e:	90 95       	com	r25
     e50:	80 95       	com	r24
     e52:	70 95       	com	r23
     e54:	61 95       	neg	r22
     e56:	7f 4f       	sbci	r23, 0xFF	; 255
     e58:	8f 4f       	sbci	r24, 0xFF	; 255
     e5a:	9f 4f       	sbci	r25, 0xFF	; 255
     e5c:	08 95       	ret

00000e5e <__floatunsisf>:
     e5e:	e8 94       	clt
     e60:	09 c0       	rjmp	.+18     	; 0xe74 <__floatsisf+0x12>

00000e62 <__floatsisf>:
     e62:	97 fb       	bst	r25, 7
     e64:	3e f4       	brtc	.+14     	; 0xe74 <__floatsisf+0x12>
     e66:	90 95       	com	r25
     e68:	80 95       	com	r24
     e6a:	70 95       	com	r23
     e6c:	61 95       	neg	r22
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	8f 4f       	sbci	r24, 0xFF	; 255
     e72:	9f 4f       	sbci	r25, 0xFF	; 255
     e74:	99 23       	and	r25, r25
     e76:	a9 f0       	breq	.+42     	; 0xea2 <__floatsisf+0x40>
     e78:	f9 2f       	mov	r31, r25
     e7a:	96 e9       	ldi	r25, 0x96	; 150
     e7c:	bb 27       	eor	r27, r27
     e7e:	93 95       	inc	r25
     e80:	f6 95       	lsr	r31
     e82:	87 95       	ror	r24
     e84:	77 95       	ror	r23
     e86:	67 95       	ror	r22
     e88:	b7 95       	ror	r27
     e8a:	f1 11       	cpse	r31, r1
     e8c:	f8 cf       	rjmp	.-16     	; 0xe7e <__floatsisf+0x1c>
     e8e:	fa f4       	brpl	.+62     	; 0xece <__floatsisf+0x6c>
     e90:	bb 0f       	add	r27, r27
     e92:	11 f4       	brne	.+4      	; 0xe98 <__floatsisf+0x36>
     e94:	60 ff       	sbrs	r22, 0
     e96:	1b c0       	rjmp	.+54     	; 0xece <__floatsisf+0x6c>
     e98:	6f 5f       	subi	r22, 0xFF	; 255
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8f 4f       	sbci	r24, 0xFF	; 255
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	16 c0       	rjmp	.+44     	; 0xece <__floatsisf+0x6c>
     ea2:	88 23       	and	r24, r24
     ea4:	11 f0       	breq	.+4      	; 0xeaa <__floatsisf+0x48>
     ea6:	96 e9       	ldi	r25, 0x96	; 150
     ea8:	11 c0       	rjmp	.+34     	; 0xecc <__floatsisf+0x6a>
     eaa:	77 23       	and	r23, r23
     eac:	21 f0       	breq	.+8      	; 0xeb6 <__floatsisf+0x54>
     eae:	9e e8       	ldi	r25, 0x8E	; 142
     eb0:	87 2f       	mov	r24, r23
     eb2:	76 2f       	mov	r23, r22
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <__floatsisf+0x5e>
     eb6:	66 23       	and	r22, r22
     eb8:	71 f0       	breq	.+28     	; 0xed6 <__floatsisf+0x74>
     eba:	96 e8       	ldi	r25, 0x86	; 134
     ebc:	86 2f       	mov	r24, r22
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	2a f0       	brmi	.+10     	; 0xece <__floatsisf+0x6c>
     ec4:	9a 95       	dec	r25
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	88 1f       	adc	r24, r24
     ecc:	da f7       	brpl	.-10     	; 0xec4 <__floatsisf+0x62>
     ece:	88 0f       	add	r24, r24
     ed0:	96 95       	lsr	r25
     ed2:	87 95       	ror	r24
     ed4:	97 f9       	bld	r25, 7
     ed6:	08 95       	ret

00000ed8 <__fp_cmp>:
     ed8:	99 0f       	add	r25, r25
     eda:	00 08       	sbc	r0, r0
     edc:	55 0f       	add	r21, r21
     ede:	aa 0b       	sbc	r26, r26
     ee0:	e0 e8       	ldi	r30, 0x80	; 128
     ee2:	fe ef       	ldi	r31, 0xFE	; 254
     ee4:	16 16       	cp	r1, r22
     ee6:	17 06       	cpc	r1, r23
     ee8:	e8 07       	cpc	r30, r24
     eea:	f9 07       	cpc	r31, r25
     eec:	c0 f0       	brcs	.+48     	; 0xf1e <__fp_cmp+0x46>
     eee:	12 16       	cp	r1, r18
     ef0:	13 06       	cpc	r1, r19
     ef2:	e4 07       	cpc	r30, r20
     ef4:	f5 07       	cpc	r31, r21
     ef6:	98 f0       	brcs	.+38     	; 0xf1e <__fp_cmp+0x46>
     ef8:	62 1b       	sub	r22, r18
     efa:	73 0b       	sbc	r23, r19
     efc:	84 0b       	sbc	r24, r20
     efe:	95 0b       	sbc	r25, r21
     f00:	39 f4       	brne	.+14     	; 0xf10 <__fp_cmp+0x38>
     f02:	0a 26       	eor	r0, r26
     f04:	61 f0       	breq	.+24     	; 0xf1e <__fp_cmp+0x46>
     f06:	23 2b       	or	r18, r19
     f08:	24 2b       	or	r18, r20
     f0a:	25 2b       	or	r18, r21
     f0c:	21 f4       	brne	.+8      	; 0xf16 <__fp_cmp+0x3e>
     f0e:	08 95       	ret
     f10:	0a 26       	eor	r0, r26
     f12:	09 f4       	brne	.+2      	; 0xf16 <__fp_cmp+0x3e>
     f14:	a1 40       	sbci	r26, 0x01	; 1
     f16:	a6 95       	lsr	r26
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	81 1d       	adc	r24, r1
     f1c:	81 1d       	adc	r24, r1
     f1e:	08 95       	ret

00000f20 <__fp_inf>:
     f20:	97 f9       	bld	r25, 7
     f22:	9f 67       	ori	r25, 0x7F	; 127
     f24:	80 e8       	ldi	r24, 0x80	; 128
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	08 95       	ret

00000f2c <__fp_nan>:
     f2c:	9f ef       	ldi	r25, 0xFF	; 255
     f2e:	80 ec       	ldi	r24, 0xC0	; 192
     f30:	08 95       	ret

00000f32 <__fp_pscA>:
     f32:	00 24       	eor	r0, r0
     f34:	0a 94       	dec	r0
     f36:	16 16       	cp	r1, r22
     f38:	17 06       	cpc	r1, r23
     f3a:	18 06       	cpc	r1, r24
     f3c:	09 06       	cpc	r0, r25
     f3e:	08 95       	ret

00000f40 <__fp_pscB>:
     f40:	00 24       	eor	r0, r0
     f42:	0a 94       	dec	r0
     f44:	12 16       	cp	r1, r18
     f46:	13 06       	cpc	r1, r19
     f48:	14 06       	cpc	r1, r20
     f4a:	05 06       	cpc	r0, r21
     f4c:	08 95       	ret

00000f4e <__fp_round>:
     f4e:	09 2e       	mov	r0, r25
     f50:	03 94       	inc	r0
     f52:	00 0c       	add	r0, r0
     f54:	11 f4       	brne	.+4      	; 0xf5a <__fp_round+0xc>
     f56:	88 23       	and	r24, r24
     f58:	52 f0       	brmi	.+20     	; 0xf6e <__fp_round+0x20>
     f5a:	bb 0f       	add	r27, r27
     f5c:	40 f4       	brcc	.+16     	; 0xf6e <__fp_round+0x20>
     f5e:	bf 2b       	or	r27, r31
     f60:	11 f4       	brne	.+4      	; 0xf66 <__fp_round+0x18>
     f62:	60 ff       	sbrs	r22, 0
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <__fp_round+0x20>
     f66:	6f 5f       	subi	r22, 0xFF	; 255
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	8f 4f       	sbci	r24, 0xFF	; 255
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	08 95       	ret

00000f70 <__fp_split3>:
     f70:	57 fd       	sbrc	r21, 7
     f72:	90 58       	subi	r25, 0x80	; 128
     f74:	44 0f       	add	r20, r20
     f76:	55 1f       	adc	r21, r21
     f78:	59 f0       	breq	.+22     	; 0xf90 <__fp_splitA+0x10>
     f7a:	5f 3f       	cpi	r21, 0xFF	; 255
     f7c:	71 f0       	breq	.+28     	; 0xf9a <__fp_splitA+0x1a>
     f7e:	47 95       	ror	r20

00000f80 <__fp_splitA>:
     f80:	88 0f       	add	r24, r24
     f82:	97 fb       	bst	r25, 7
     f84:	99 1f       	adc	r25, r25
     f86:	61 f0       	breq	.+24     	; 0xfa0 <__fp_splitA+0x20>
     f88:	9f 3f       	cpi	r25, 0xFF	; 255
     f8a:	79 f0       	breq	.+30     	; 0xfaa <__fp_splitA+0x2a>
     f8c:	87 95       	ror	r24
     f8e:	08 95       	ret
     f90:	12 16       	cp	r1, r18
     f92:	13 06       	cpc	r1, r19
     f94:	14 06       	cpc	r1, r20
     f96:	55 1f       	adc	r21, r21
     f98:	f2 cf       	rjmp	.-28     	; 0xf7e <__fp_split3+0xe>
     f9a:	46 95       	lsr	r20
     f9c:	f1 df       	rcall	.-30     	; 0xf80 <__fp_splitA>
     f9e:	08 c0       	rjmp	.+16     	; 0xfb0 <__fp_splitA+0x30>
     fa0:	16 16       	cp	r1, r22
     fa2:	17 06       	cpc	r1, r23
     fa4:	18 06       	cpc	r1, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	f1 cf       	rjmp	.-30     	; 0xf8c <__fp_splitA+0xc>
     faa:	86 95       	lsr	r24
     fac:	71 05       	cpc	r23, r1
     fae:	61 05       	cpc	r22, r1
     fb0:	08 94       	sec
     fb2:	08 95       	ret

00000fb4 <__fp_zero>:
     fb4:	e8 94       	clt

00000fb6 <__fp_szero>:
     fb6:	bb 27       	eor	r27, r27
     fb8:	66 27       	eor	r22, r22
     fba:	77 27       	eor	r23, r23
     fbc:	cb 01       	movw	r24, r22
     fbe:	97 f9       	bld	r25, 7
     fc0:	08 95       	ret

00000fc2 <__gesf2>:
     fc2:	8a df       	rcall	.-236    	; 0xed8 <__fp_cmp>
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <__gesf2+0x6>
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	08 95       	ret

00000fca <__mulsf3>:
     fca:	0b d0       	rcall	.+22     	; 0xfe2 <__mulsf3x>
     fcc:	c0 cf       	rjmp	.-128    	; 0xf4e <__fp_round>
     fce:	b1 df       	rcall	.-158    	; 0xf32 <__fp_pscA>
     fd0:	28 f0       	brcs	.+10     	; 0xfdc <__mulsf3+0x12>
     fd2:	b6 df       	rcall	.-148    	; 0xf40 <__fp_pscB>
     fd4:	18 f0       	brcs	.+6      	; 0xfdc <__mulsf3+0x12>
     fd6:	95 23       	and	r25, r21
     fd8:	09 f0       	breq	.+2      	; 0xfdc <__mulsf3+0x12>
     fda:	a2 cf       	rjmp	.-188    	; 0xf20 <__fp_inf>
     fdc:	a7 cf       	rjmp	.-178    	; 0xf2c <__fp_nan>
     fde:	11 24       	eor	r1, r1
     fe0:	ea cf       	rjmp	.-44     	; 0xfb6 <__fp_szero>

00000fe2 <__mulsf3x>:
     fe2:	c6 df       	rcall	.-116    	; 0xf70 <__fp_split3>
     fe4:	a0 f3       	brcs	.-24     	; 0xfce <__mulsf3+0x4>

00000fe6 <__mulsf3_pse>:
     fe6:	95 9f       	mul	r25, r21
     fe8:	d1 f3       	breq	.-12     	; 0xfde <__mulsf3+0x14>
     fea:	95 0f       	add	r25, r21
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	55 1f       	adc	r21, r21
     ff0:	62 9f       	mul	r22, r18
     ff2:	f0 01       	movw	r30, r0
     ff4:	72 9f       	mul	r23, r18
     ff6:	bb 27       	eor	r27, r27
     ff8:	f0 0d       	add	r31, r0
     ffa:	b1 1d       	adc	r27, r1
     ffc:	63 9f       	mul	r22, r19
     ffe:	aa 27       	eor	r26, r26
    1000:	f0 0d       	add	r31, r0
    1002:	b1 1d       	adc	r27, r1
    1004:	aa 1f       	adc	r26, r26
    1006:	64 9f       	mul	r22, r20
    1008:	66 27       	eor	r22, r22
    100a:	b0 0d       	add	r27, r0
    100c:	a1 1d       	adc	r26, r1
    100e:	66 1f       	adc	r22, r22
    1010:	82 9f       	mul	r24, r18
    1012:	22 27       	eor	r18, r18
    1014:	b0 0d       	add	r27, r0
    1016:	a1 1d       	adc	r26, r1
    1018:	62 1f       	adc	r22, r18
    101a:	73 9f       	mul	r23, r19
    101c:	b0 0d       	add	r27, r0
    101e:	a1 1d       	adc	r26, r1
    1020:	62 1f       	adc	r22, r18
    1022:	83 9f       	mul	r24, r19
    1024:	a0 0d       	add	r26, r0
    1026:	61 1d       	adc	r22, r1
    1028:	22 1f       	adc	r18, r18
    102a:	74 9f       	mul	r23, r20
    102c:	33 27       	eor	r19, r19
    102e:	a0 0d       	add	r26, r0
    1030:	61 1d       	adc	r22, r1
    1032:	23 1f       	adc	r18, r19
    1034:	84 9f       	mul	r24, r20
    1036:	60 0d       	add	r22, r0
    1038:	21 1d       	adc	r18, r1
    103a:	82 2f       	mov	r24, r18
    103c:	76 2f       	mov	r23, r22
    103e:	6a 2f       	mov	r22, r26
    1040:	11 24       	eor	r1, r1
    1042:	9f 57       	subi	r25, 0x7F	; 127
    1044:	50 40       	sbci	r21, 0x00	; 0
    1046:	8a f0       	brmi	.+34     	; 0x106a <__mulsf3_pse+0x84>
    1048:	e1 f0       	breq	.+56     	; 0x1082 <__mulsf3_pse+0x9c>
    104a:	88 23       	and	r24, r24
    104c:	4a f0       	brmi	.+18     	; 0x1060 <__mulsf3_pse+0x7a>
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	bb 1f       	adc	r27, r27
    1054:	66 1f       	adc	r22, r22
    1056:	77 1f       	adc	r23, r23
    1058:	88 1f       	adc	r24, r24
    105a:	91 50       	subi	r25, 0x01	; 1
    105c:	50 40       	sbci	r21, 0x00	; 0
    105e:	a9 f7       	brne	.-22     	; 0x104a <__mulsf3_pse+0x64>
    1060:	9e 3f       	cpi	r25, 0xFE	; 254
    1062:	51 05       	cpc	r21, r1
    1064:	70 f0       	brcs	.+28     	; 0x1082 <__mulsf3_pse+0x9c>
    1066:	5c cf       	rjmp	.-328    	; 0xf20 <__fp_inf>
    1068:	a6 cf       	rjmp	.-180    	; 0xfb6 <__fp_szero>
    106a:	5f 3f       	cpi	r21, 0xFF	; 255
    106c:	ec f3       	brlt	.-6      	; 0x1068 <__mulsf3_pse+0x82>
    106e:	98 3e       	cpi	r25, 0xE8	; 232
    1070:	dc f3       	brlt	.-10     	; 0x1068 <__mulsf3_pse+0x82>
    1072:	86 95       	lsr	r24
    1074:	77 95       	ror	r23
    1076:	67 95       	ror	r22
    1078:	b7 95       	ror	r27
    107a:	f7 95       	ror	r31
    107c:	e7 95       	ror	r30
    107e:	9f 5f       	subi	r25, 0xFF	; 255
    1080:	c1 f7       	brne	.-16     	; 0x1072 <__mulsf3_pse+0x8c>
    1082:	fe 2b       	or	r31, r30
    1084:	88 0f       	add	r24, r24
    1086:	91 1d       	adc	r25, r1
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	97 f9       	bld	r25, 7
    108e:	08 95       	ret

00001090 <__tablejump2__>:
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31

00001094 <__tablejump__>:
    1094:	05 90       	lpm	r0, Z+
    1096:	f4 91       	lpm	r31, Z
    1098:	e0 2d       	mov	r30, r0
    109a:	19 94       	eijmp

0000109c <fdevopen>:
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	ec 01       	movw	r28, r24
    10a6:	8b 01       	movw	r16, r22
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	31 f4       	brne	.+12     	; 0x10b8 <fdevopen+0x1c>
    10ac:	61 15       	cp	r22, r1
    10ae:	71 05       	cpc	r23, r1
    10b0:	19 f4       	brne	.+6      	; 0x10b8 <fdevopen+0x1c>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	37 c0       	rjmp	.+110    	; 0x1126 <fdevopen+0x8a>
    10b8:	6e e0       	ldi	r22, 0x0E	; 14
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	63 d2       	rcall	.+1222   	; 0x1588 <calloc>
    10c2:	fc 01       	movw	r30, r24
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	a9 f3       	breq	.-22     	; 0x10b2 <fdevopen+0x16>
    10c8:	80 e8       	ldi	r24, 0x80	; 128
    10ca:	83 83       	std	Z+3, r24	; 0x03
    10cc:	01 15       	cp	r16, r1
    10ce:	11 05       	cpc	r17, r1
    10d0:	71 f0       	breq	.+28     	; 0x10ee <fdevopen+0x52>
    10d2:	13 87       	std	Z+11, r17	; 0x0b
    10d4:	02 87       	std	Z+10, r16	; 0x0a
    10d6:	81 e8       	ldi	r24, 0x81	; 129
    10d8:	83 83       	std	Z+3, r24	; 0x03
    10da:	80 91 e7 02 	lds	r24, 0x02E7
    10de:	90 91 e8 02 	lds	r25, 0x02E8
    10e2:	89 2b       	or	r24, r25
    10e4:	21 f4       	brne	.+8      	; 0x10ee <fdevopen+0x52>
    10e6:	f0 93 e8 02 	sts	0x02E8, r31
    10ea:	e0 93 e7 02 	sts	0x02E7, r30
    10ee:	20 97       	sbiw	r28, 0x00	; 0
    10f0:	c9 f0       	breq	.+50     	; 0x1124 <fdevopen+0x88>
    10f2:	d1 87       	std	Z+9, r29	; 0x09
    10f4:	c0 87       	std	Z+8, r28	; 0x08
    10f6:	83 81       	ldd	r24, Z+3	; 0x03
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	83 83       	std	Z+3, r24	; 0x03
    10fc:	80 91 e9 02 	lds	r24, 0x02E9
    1100:	90 91 ea 02 	lds	r25, 0x02EA
    1104:	89 2b       	or	r24, r25
    1106:	71 f4       	brne	.+28     	; 0x1124 <fdevopen+0x88>
    1108:	f0 93 ea 02 	sts	0x02EA, r31
    110c:	e0 93 e9 02 	sts	0x02E9, r30
    1110:	80 91 eb 02 	lds	r24, 0x02EB
    1114:	90 91 ec 02 	lds	r25, 0x02EC
    1118:	89 2b       	or	r24, r25
    111a:	21 f4       	brne	.+8      	; 0x1124 <fdevopen+0x88>
    111c:	f0 93 ec 02 	sts	0x02EC, r31
    1120:	e0 93 eb 02 	sts	0x02EB, r30
    1124:	cf 01       	movw	r24, r30
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	08 95       	ret

00001130 <printf>:
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	fe 01       	movw	r30, r28
    113a:	36 96       	adiw	r30, 0x06	; 6
    113c:	61 91       	ld	r22, Z+
    113e:	71 91       	ld	r23, Z+
    1140:	af 01       	movw	r20, r30
    1142:	80 91 e9 02 	lds	r24, 0x02E9
    1146:	90 91 ea 02 	lds	r25, 0x02EA
    114a:	30 d0       	rcall	.+96     	; 0x11ac <vfprintf>
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <puts>:
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	e0 91 e9 02 	lds	r30, 0x02E9
    115e:	f0 91 ea 02 	lds	r31, 0x02EA
    1162:	23 81       	ldd	r18, Z+3	; 0x03
    1164:	21 ff       	sbrs	r18, 1
    1166:	1b c0       	rjmp	.+54     	; 0x119e <puts+0x4c>
    1168:	ec 01       	movw	r28, r24
    116a:	00 e0       	ldi	r16, 0x00	; 0
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	89 91       	ld	r24, Y+
    1170:	60 91 e9 02 	lds	r22, 0x02E9
    1174:	70 91 ea 02 	lds	r23, 0x02EA
    1178:	db 01       	movw	r26, r22
    117a:	18 96       	adiw	r26, 0x08	; 8
    117c:	ed 91       	ld	r30, X+
    117e:	fc 91       	ld	r31, X
    1180:	19 97       	sbiw	r26, 0x09	; 9
    1182:	88 23       	and	r24, r24
    1184:	31 f0       	breq	.+12     	; 0x1192 <puts+0x40>
    1186:	19 95       	eicall
    1188:	89 2b       	or	r24, r25
    118a:	89 f3       	breq	.-30     	; 0x116e <puts+0x1c>
    118c:	0f ef       	ldi	r16, 0xFF	; 255
    118e:	1f ef       	ldi	r17, 0xFF	; 255
    1190:	ee cf       	rjmp	.-36     	; 0x116e <puts+0x1c>
    1192:	8a e0       	ldi	r24, 0x0A	; 10
    1194:	19 95       	eicall
    1196:	89 2b       	or	r24, r25
    1198:	11 f4       	brne	.+4      	; 0x119e <puts+0x4c>
    119a:	c8 01       	movw	r24, r16
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <puts+0x50>
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	08 95       	ret

000011ac <vfprintf>:
    11ac:	2f 92       	push	r2
    11ae:	3f 92       	push	r3
    11b0:	4f 92       	push	r4
    11b2:	5f 92       	push	r5
    11b4:	6f 92       	push	r6
    11b6:	7f 92       	push	r7
    11b8:	8f 92       	push	r8
    11ba:	9f 92       	push	r9
    11bc:	af 92       	push	r10
    11be:	bf 92       	push	r11
    11c0:	cf 92       	push	r12
    11c2:	df 92       	push	r13
    11c4:	ef 92       	push	r14
    11c6:	ff 92       	push	r15
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	2c 97       	sbiw	r28, 0x0c	; 12
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	7c 01       	movw	r14, r24
    11e2:	6b 01       	movw	r12, r22
    11e4:	8a 01       	movw	r16, r20
    11e6:	fc 01       	movw	r30, r24
    11e8:	17 82       	std	Z+7, r1	; 0x07
    11ea:	16 82       	std	Z+6, r1	; 0x06
    11ec:	83 81       	ldd	r24, Z+3	; 0x03
    11ee:	81 ff       	sbrs	r24, 1
    11f0:	b0 c1       	rjmp	.+864    	; 0x1552 <vfprintf+0x3a6>
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	4c 01       	movw	r8, r24
    11f8:	f7 01       	movw	r30, r14
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	f6 01       	movw	r30, r12
    11fe:	93 fd       	sbrc	r25, 3
    1200:	85 91       	lpm	r24, Z+
    1202:	93 ff       	sbrs	r25, 3
    1204:	81 91       	ld	r24, Z+
    1206:	6f 01       	movw	r12, r30
    1208:	88 23       	and	r24, r24
    120a:	09 f4       	brne	.+2      	; 0x120e <vfprintf+0x62>
    120c:	9e c1       	rjmp	.+828    	; 0x154a <vfprintf+0x39e>
    120e:	85 32       	cpi	r24, 0x25	; 37
    1210:	39 f4       	brne	.+14     	; 0x1220 <vfprintf+0x74>
    1212:	93 fd       	sbrc	r25, 3
    1214:	85 91       	lpm	r24, Z+
    1216:	93 ff       	sbrs	r25, 3
    1218:	81 91       	ld	r24, Z+
    121a:	6f 01       	movw	r12, r30
    121c:	85 32       	cpi	r24, 0x25	; 37
    121e:	21 f4       	brne	.+8      	; 0x1228 <vfprintf+0x7c>
    1220:	b7 01       	movw	r22, r14
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0f d3       	rcall	.+1566   	; 0x1844 <fputc>
    1226:	e8 cf       	rjmp	.-48     	; 0x11f8 <vfprintf+0x4c>
    1228:	51 2c       	mov	r5, r1
    122a:	31 2c       	mov	r3, r1
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	20 32       	cpi	r18, 0x20	; 32
    1230:	a0 f4       	brcc	.+40     	; 0x125a <vfprintf+0xae>
    1232:	8b 32       	cpi	r24, 0x2B	; 43
    1234:	69 f0       	breq	.+26     	; 0x1250 <vfprintf+0xa4>
    1236:	30 f4       	brcc	.+12     	; 0x1244 <vfprintf+0x98>
    1238:	80 32       	cpi	r24, 0x20	; 32
    123a:	59 f0       	breq	.+22     	; 0x1252 <vfprintf+0xa6>
    123c:	83 32       	cpi	r24, 0x23	; 35
    123e:	69 f4       	brne	.+26     	; 0x125a <vfprintf+0xae>
    1240:	20 61       	ori	r18, 0x10	; 16
    1242:	2c c0       	rjmp	.+88     	; 0x129c <vfprintf+0xf0>
    1244:	8d 32       	cpi	r24, 0x2D	; 45
    1246:	39 f0       	breq	.+14     	; 0x1256 <vfprintf+0xaa>
    1248:	80 33       	cpi	r24, 0x30	; 48
    124a:	39 f4       	brne	.+14     	; 0x125a <vfprintf+0xae>
    124c:	21 60       	ori	r18, 0x01	; 1
    124e:	26 c0       	rjmp	.+76     	; 0x129c <vfprintf+0xf0>
    1250:	22 60       	ori	r18, 0x02	; 2
    1252:	24 60       	ori	r18, 0x04	; 4
    1254:	23 c0       	rjmp	.+70     	; 0x129c <vfprintf+0xf0>
    1256:	28 60       	ori	r18, 0x08	; 8
    1258:	21 c0       	rjmp	.+66     	; 0x129c <vfprintf+0xf0>
    125a:	27 fd       	sbrc	r18, 7
    125c:	27 c0       	rjmp	.+78     	; 0x12ac <vfprintf+0x100>
    125e:	30 ed       	ldi	r19, 0xD0	; 208
    1260:	38 0f       	add	r19, r24
    1262:	3a 30       	cpi	r19, 0x0A	; 10
    1264:	78 f4       	brcc	.+30     	; 0x1284 <vfprintf+0xd8>
    1266:	26 ff       	sbrs	r18, 6
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <vfprintf+0xca>
    126a:	fa e0       	ldi	r31, 0x0A	; 10
    126c:	5f 9e       	mul	r5, r31
    126e:	30 0d       	add	r19, r0
    1270:	11 24       	eor	r1, r1
    1272:	53 2e       	mov	r5, r19
    1274:	13 c0       	rjmp	.+38     	; 0x129c <vfprintf+0xf0>
    1276:	8a e0       	ldi	r24, 0x0A	; 10
    1278:	38 9e       	mul	r3, r24
    127a:	30 0d       	add	r19, r0
    127c:	11 24       	eor	r1, r1
    127e:	33 2e       	mov	r3, r19
    1280:	20 62       	ori	r18, 0x20	; 32
    1282:	0c c0       	rjmp	.+24     	; 0x129c <vfprintf+0xf0>
    1284:	8e 32       	cpi	r24, 0x2E	; 46
    1286:	21 f4       	brne	.+8      	; 0x1290 <vfprintf+0xe4>
    1288:	26 fd       	sbrc	r18, 6
    128a:	5f c1       	rjmp	.+702    	; 0x154a <vfprintf+0x39e>
    128c:	20 64       	ori	r18, 0x40	; 64
    128e:	06 c0       	rjmp	.+12     	; 0x129c <vfprintf+0xf0>
    1290:	8c 36       	cpi	r24, 0x6C	; 108
    1292:	11 f4       	brne	.+4      	; 0x1298 <vfprintf+0xec>
    1294:	20 68       	ori	r18, 0x80	; 128
    1296:	02 c0       	rjmp	.+4      	; 0x129c <vfprintf+0xf0>
    1298:	88 36       	cpi	r24, 0x68	; 104
    129a:	41 f4       	brne	.+16     	; 0x12ac <vfprintf+0x100>
    129c:	f6 01       	movw	r30, r12
    129e:	93 fd       	sbrc	r25, 3
    12a0:	85 91       	lpm	r24, Z+
    12a2:	93 ff       	sbrs	r25, 3
    12a4:	81 91       	ld	r24, Z+
    12a6:	6f 01       	movw	r12, r30
    12a8:	81 11       	cpse	r24, r1
    12aa:	c1 cf       	rjmp	.-126    	; 0x122e <vfprintf+0x82>
    12ac:	98 2f       	mov	r25, r24
    12ae:	9f 7d       	andi	r25, 0xDF	; 223
    12b0:	95 54       	subi	r25, 0x45	; 69
    12b2:	93 30       	cpi	r25, 0x03	; 3
    12b4:	28 f4       	brcc	.+10     	; 0x12c0 <vfprintf+0x114>
    12b6:	0c 5f       	subi	r16, 0xFC	; 252
    12b8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ba:	ff e3       	ldi	r31, 0x3F	; 63
    12bc:	f9 83       	std	Y+1, r31	; 0x01
    12be:	0d c0       	rjmp	.+26     	; 0x12da <vfprintf+0x12e>
    12c0:	83 36       	cpi	r24, 0x63	; 99
    12c2:	31 f0       	breq	.+12     	; 0x12d0 <vfprintf+0x124>
    12c4:	83 37       	cpi	r24, 0x73	; 115
    12c6:	71 f0       	breq	.+28     	; 0x12e4 <vfprintf+0x138>
    12c8:	83 35       	cpi	r24, 0x53	; 83
    12ca:	09 f0       	breq	.+2      	; 0x12ce <vfprintf+0x122>
    12cc:	57 c0       	rjmp	.+174    	; 0x137c <vfprintf+0x1d0>
    12ce:	21 c0       	rjmp	.+66     	; 0x1312 <vfprintf+0x166>
    12d0:	f8 01       	movw	r30, r16
    12d2:	80 81       	ld	r24, Z
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	0e 5f       	subi	r16, 0xFE	; 254
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	44 24       	eor	r4, r4
    12dc:	43 94       	inc	r4
    12de:	51 2c       	mov	r5, r1
    12e0:	54 01       	movw	r10, r8
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <vfprintf+0x160>
    12e4:	38 01       	movw	r6, r16
    12e6:	f2 e0       	ldi	r31, 0x02	; 2
    12e8:	6f 0e       	add	r6, r31
    12ea:	71 1c       	adc	r7, r1
    12ec:	f8 01       	movw	r30, r16
    12ee:	a0 80       	ld	r10, Z
    12f0:	b1 80       	ldd	r11, Z+1	; 0x01
    12f2:	26 ff       	sbrs	r18, 6
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <vfprintf+0x150>
    12f6:	65 2d       	mov	r22, r5
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <vfprintf+0x154>
    12fc:	6f ef       	ldi	r22, 0xFF	; 255
    12fe:	7f ef       	ldi	r23, 0xFF	; 255
    1300:	c5 01       	movw	r24, r10
    1302:	2c 87       	std	Y+12, r18	; 0x0c
    1304:	94 d2       	rcall	.+1320   	; 0x182e <strnlen>
    1306:	2c 01       	movw	r4, r24
    1308:	83 01       	movw	r16, r6
    130a:	2c 85       	ldd	r18, Y+12	; 0x0c
    130c:	2f 77       	andi	r18, 0x7F	; 127
    130e:	22 2e       	mov	r2, r18
    1310:	16 c0       	rjmp	.+44     	; 0x133e <vfprintf+0x192>
    1312:	38 01       	movw	r6, r16
    1314:	f2 e0       	ldi	r31, 0x02	; 2
    1316:	6f 0e       	add	r6, r31
    1318:	71 1c       	adc	r7, r1
    131a:	f8 01       	movw	r30, r16
    131c:	a0 80       	ld	r10, Z
    131e:	b1 80       	ldd	r11, Z+1	; 0x01
    1320:	26 ff       	sbrs	r18, 6
    1322:	03 c0       	rjmp	.+6      	; 0x132a <vfprintf+0x17e>
    1324:	65 2d       	mov	r22, r5
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	02 c0       	rjmp	.+4      	; 0x132e <vfprintf+0x182>
    132a:	6f ef       	ldi	r22, 0xFF	; 255
    132c:	7f ef       	ldi	r23, 0xFF	; 255
    132e:	c5 01       	movw	r24, r10
    1330:	2c 87       	std	Y+12, r18	; 0x0c
    1332:	6b d2       	rcall	.+1238   	; 0x180a <strnlen_P>
    1334:	2c 01       	movw	r4, r24
    1336:	2c 85       	ldd	r18, Y+12	; 0x0c
    1338:	20 68       	ori	r18, 0x80	; 128
    133a:	22 2e       	mov	r2, r18
    133c:	83 01       	movw	r16, r6
    133e:	23 fc       	sbrc	r2, 3
    1340:	19 c0       	rjmp	.+50     	; 0x1374 <vfprintf+0x1c8>
    1342:	83 2d       	mov	r24, r3
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	48 16       	cp	r4, r24
    1348:	59 06       	cpc	r5, r25
    134a:	a0 f4       	brcc	.+40     	; 0x1374 <vfprintf+0x1c8>
    134c:	b7 01       	movw	r22, r14
    134e:	80 e2       	ldi	r24, 0x20	; 32
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	78 d2       	rcall	.+1264   	; 0x1844 <fputc>
    1354:	3a 94       	dec	r3
    1356:	f5 cf       	rjmp	.-22     	; 0x1342 <vfprintf+0x196>
    1358:	f5 01       	movw	r30, r10
    135a:	27 fc       	sbrc	r2, 7
    135c:	85 91       	lpm	r24, Z+
    135e:	27 fe       	sbrs	r2, 7
    1360:	81 91       	ld	r24, Z+
    1362:	5f 01       	movw	r10, r30
    1364:	b7 01       	movw	r22, r14
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	6d d2       	rcall	.+1242   	; 0x1844 <fputc>
    136a:	31 10       	cpse	r3, r1
    136c:	3a 94       	dec	r3
    136e:	f1 e0       	ldi	r31, 0x01	; 1
    1370:	4f 1a       	sub	r4, r31
    1372:	51 08       	sbc	r5, r1
    1374:	41 14       	cp	r4, r1
    1376:	51 04       	cpc	r5, r1
    1378:	79 f7       	brne	.-34     	; 0x1358 <vfprintf+0x1ac>
    137a:	de c0       	rjmp	.+444    	; 0x1538 <vfprintf+0x38c>
    137c:	84 36       	cpi	r24, 0x64	; 100
    137e:	11 f0       	breq	.+4      	; 0x1384 <vfprintf+0x1d8>
    1380:	89 36       	cpi	r24, 0x69	; 105
    1382:	31 f5       	brne	.+76     	; 0x13d0 <vfprintf+0x224>
    1384:	f8 01       	movw	r30, r16
    1386:	27 ff       	sbrs	r18, 7
    1388:	07 c0       	rjmp	.+14     	; 0x1398 <vfprintf+0x1ec>
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	0c 5f       	subi	r16, 0xFC	; 252
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <vfprintf+0x1fc>
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	88 27       	eor	r24, r24
    139e:	77 fd       	sbrc	r23, 7
    13a0:	80 95       	com	r24
    13a2:	98 2f       	mov	r25, r24
    13a4:	0e 5f       	subi	r16, 0xFE	; 254
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	2f 76       	andi	r18, 0x6F	; 111
    13aa:	b2 2e       	mov	r11, r18
    13ac:	97 ff       	sbrs	r25, 7
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <vfprintf+0x216>
    13b0:	90 95       	com	r25
    13b2:	80 95       	com	r24
    13b4:	70 95       	com	r23
    13b6:	61 95       	neg	r22
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	8f 4f       	sbci	r24, 0xFF	; 255
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
    13be:	20 68       	ori	r18, 0x80	; 128
    13c0:	b2 2e       	mov	r11, r18
    13c2:	2a e0       	ldi	r18, 0x0A	; 10
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	a4 01       	movw	r20, r8
    13c8:	6f d2       	rcall	.+1246   	; 0x18a8 <__ultoa_invert>
    13ca:	a8 2e       	mov	r10, r24
    13cc:	a8 18       	sub	r10, r8
    13ce:	43 c0       	rjmp	.+134    	; 0x1456 <vfprintf+0x2aa>
    13d0:	85 37       	cpi	r24, 0x75	; 117
    13d2:	29 f4       	brne	.+10     	; 0x13de <vfprintf+0x232>
    13d4:	2f 7e       	andi	r18, 0xEF	; 239
    13d6:	b2 2e       	mov	r11, r18
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	25 c0       	rjmp	.+74     	; 0x1428 <vfprintf+0x27c>
    13de:	f2 2f       	mov	r31, r18
    13e0:	f9 7f       	andi	r31, 0xF9	; 249
    13e2:	bf 2e       	mov	r11, r31
    13e4:	8f 36       	cpi	r24, 0x6F	; 111
    13e6:	c1 f0       	breq	.+48     	; 0x1418 <vfprintf+0x26c>
    13e8:	18 f4       	brcc	.+6      	; 0x13f0 <vfprintf+0x244>
    13ea:	88 35       	cpi	r24, 0x58	; 88
    13ec:	79 f0       	breq	.+30     	; 0x140c <vfprintf+0x260>
    13ee:	ad c0       	rjmp	.+346    	; 0x154a <vfprintf+0x39e>
    13f0:	80 37       	cpi	r24, 0x70	; 112
    13f2:	19 f0       	breq	.+6      	; 0x13fa <vfprintf+0x24e>
    13f4:	88 37       	cpi	r24, 0x78	; 120
    13f6:	21 f0       	breq	.+8      	; 0x1400 <vfprintf+0x254>
    13f8:	a8 c0       	rjmp	.+336    	; 0x154a <vfprintf+0x39e>
    13fa:	2f 2f       	mov	r18, r31
    13fc:	20 61       	ori	r18, 0x10	; 16
    13fe:	b2 2e       	mov	r11, r18
    1400:	b4 fe       	sbrs	r11, 4
    1402:	0d c0       	rjmp	.+26     	; 0x141e <vfprintf+0x272>
    1404:	8b 2d       	mov	r24, r11
    1406:	84 60       	ori	r24, 0x04	; 4
    1408:	b8 2e       	mov	r11, r24
    140a:	09 c0       	rjmp	.+18     	; 0x141e <vfprintf+0x272>
    140c:	24 ff       	sbrs	r18, 4
    140e:	0a c0       	rjmp	.+20     	; 0x1424 <vfprintf+0x278>
    1410:	9f 2f       	mov	r25, r31
    1412:	96 60       	ori	r25, 0x06	; 6
    1414:	b9 2e       	mov	r11, r25
    1416:	06 c0       	rjmp	.+12     	; 0x1424 <vfprintf+0x278>
    1418:	28 e0       	ldi	r18, 0x08	; 8
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <vfprintf+0x27c>
    141e:	20 e1       	ldi	r18, 0x10	; 16
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <vfprintf+0x27c>
    1424:	20 e1       	ldi	r18, 0x10	; 16
    1426:	32 e0       	ldi	r19, 0x02	; 2
    1428:	f8 01       	movw	r30, r16
    142a:	b7 fe       	sbrs	r11, 7
    142c:	07 c0       	rjmp	.+14     	; 0x143c <vfprintf+0x290>
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	0c 5f       	subi	r16, 0xFC	; 252
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	06 c0       	rjmp	.+12     	; 0x1448 <vfprintf+0x29c>
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 5f       	subi	r16, 0xFE	; 254
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	a4 01       	movw	r20, r8
    144a:	2e d2       	rcall	.+1116   	; 0x18a8 <__ultoa_invert>
    144c:	a8 2e       	mov	r10, r24
    144e:	a8 18       	sub	r10, r8
    1450:	fb 2d       	mov	r31, r11
    1452:	ff 77       	andi	r31, 0x7F	; 127
    1454:	bf 2e       	mov	r11, r31
    1456:	b6 fe       	sbrs	r11, 6
    1458:	0b c0       	rjmp	.+22     	; 0x1470 <vfprintf+0x2c4>
    145a:	2b 2d       	mov	r18, r11
    145c:	2e 7f       	andi	r18, 0xFE	; 254
    145e:	a5 14       	cp	r10, r5
    1460:	50 f4       	brcc	.+20     	; 0x1476 <vfprintf+0x2ca>
    1462:	b4 fe       	sbrs	r11, 4
    1464:	0a c0       	rjmp	.+20     	; 0x147a <vfprintf+0x2ce>
    1466:	b2 fc       	sbrc	r11, 2
    1468:	08 c0       	rjmp	.+16     	; 0x147a <vfprintf+0x2ce>
    146a:	2b 2d       	mov	r18, r11
    146c:	2e 7e       	andi	r18, 0xEE	; 238
    146e:	05 c0       	rjmp	.+10     	; 0x147a <vfprintf+0x2ce>
    1470:	7a 2c       	mov	r7, r10
    1472:	2b 2d       	mov	r18, r11
    1474:	03 c0       	rjmp	.+6      	; 0x147c <vfprintf+0x2d0>
    1476:	7a 2c       	mov	r7, r10
    1478:	01 c0       	rjmp	.+2      	; 0x147c <vfprintf+0x2d0>
    147a:	75 2c       	mov	r7, r5
    147c:	24 ff       	sbrs	r18, 4
    147e:	0d c0       	rjmp	.+26     	; 0x149a <vfprintf+0x2ee>
    1480:	fe 01       	movw	r30, r28
    1482:	ea 0d       	add	r30, r10
    1484:	f1 1d       	adc	r31, r1
    1486:	80 81       	ld	r24, Z
    1488:	80 33       	cpi	r24, 0x30	; 48
    148a:	11 f4       	brne	.+4      	; 0x1490 <vfprintf+0x2e4>
    148c:	29 7e       	andi	r18, 0xE9	; 233
    148e:	09 c0       	rjmp	.+18     	; 0x14a2 <vfprintf+0x2f6>
    1490:	22 ff       	sbrs	r18, 2
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <vfprintf+0x2f4>
    1494:	73 94       	inc	r7
    1496:	73 94       	inc	r7
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <vfprintf+0x2f6>
    149a:	82 2f       	mov	r24, r18
    149c:	86 78       	andi	r24, 0x86	; 134
    149e:	09 f0       	breq	.+2      	; 0x14a2 <vfprintf+0x2f6>
    14a0:	73 94       	inc	r7
    14a2:	23 fd       	sbrc	r18, 3
    14a4:	12 c0       	rjmp	.+36     	; 0x14ca <vfprintf+0x31e>
    14a6:	20 ff       	sbrs	r18, 0
    14a8:	06 c0       	rjmp	.+12     	; 0x14b6 <vfprintf+0x30a>
    14aa:	5a 2c       	mov	r5, r10
    14ac:	73 14       	cp	r7, r3
    14ae:	18 f4       	brcc	.+6      	; 0x14b6 <vfprintf+0x30a>
    14b0:	53 0c       	add	r5, r3
    14b2:	57 18       	sub	r5, r7
    14b4:	73 2c       	mov	r7, r3
    14b6:	73 14       	cp	r7, r3
    14b8:	60 f4       	brcc	.+24     	; 0x14d2 <vfprintf+0x326>
    14ba:	b7 01       	movw	r22, r14
    14bc:	80 e2       	ldi	r24, 0x20	; 32
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	2c 87       	std	Y+12, r18	; 0x0c
    14c2:	c0 d1       	rcall	.+896    	; 0x1844 <fputc>
    14c4:	73 94       	inc	r7
    14c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    14c8:	f6 cf       	rjmp	.-20     	; 0x14b6 <vfprintf+0x30a>
    14ca:	73 14       	cp	r7, r3
    14cc:	10 f4       	brcc	.+4      	; 0x14d2 <vfprintf+0x326>
    14ce:	37 18       	sub	r3, r7
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <vfprintf+0x328>
    14d2:	31 2c       	mov	r3, r1
    14d4:	24 ff       	sbrs	r18, 4
    14d6:	11 c0       	rjmp	.+34     	; 0x14fa <vfprintf+0x34e>
    14d8:	b7 01       	movw	r22, r14
    14da:	80 e3       	ldi	r24, 0x30	; 48
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	2c 87       	std	Y+12, r18	; 0x0c
    14e0:	b1 d1       	rcall	.+866    	; 0x1844 <fputc>
    14e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e4:	22 ff       	sbrs	r18, 2
    14e6:	16 c0       	rjmp	.+44     	; 0x1514 <vfprintf+0x368>
    14e8:	21 ff       	sbrs	r18, 1
    14ea:	03 c0       	rjmp	.+6      	; 0x14f2 <vfprintf+0x346>
    14ec:	88 e5       	ldi	r24, 0x58	; 88
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vfprintf+0x34a>
    14f2:	88 e7       	ldi	r24, 0x78	; 120
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	b7 01       	movw	r22, r14
    14f8:	0c c0       	rjmp	.+24     	; 0x1512 <vfprintf+0x366>
    14fa:	82 2f       	mov	r24, r18
    14fc:	86 78       	andi	r24, 0x86	; 134
    14fe:	51 f0       	breq	.+20     	; 0x1514 <vfprintf+0x368>
    1500:	21 fd       	sbrc	r18, 1
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <vfprintf+0x35c>
    1504:	80 e2       	ldi	r24, 0x20	; 32
    1506:	01 c0       	rjmp	.+2      	; 0x150a <vfprintf+0x35e>
    1508:	8b e2       	ldi	r24, 0x2B	; 43
    150a:	27 fd       	sbrc	r18, 7
    150c:	8d e2       	ldi	r24, 0x2D	; 45
    150e:	b7 01       	movw	r22, r14
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	98 d1       	rcall	.+816    	; 0x1844 <fputc>
    1514:	a5 14       	cp	r10, r5
    1516:	30 f4       	brcc	.+12     	; 0x1524 <vfprintf+0x378>
    1518:	b7 01       	movw	r22, r14
    151a:	80 e3       	ldi	r24, 0x30	; 48
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	92 d1       	rcall	.+804    	; 0x1844 <fputc>
    1520:	5a 94       	dec	r5
    1522:	f8 cf       	rjmp	.-16     	; 0x1514 <vfprintf+0x368>
    1524:	aa 94       	dec	r10
    1526:	f4 01       	movw	r30, r8
    1528:	ea 0d       	add	r30, r10
    152a:	f1 1d       	adc	r31, r1
    152c:	80 81       	ld	r24, Z
    152e:	b7 01       	movw	r22, r14
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	88 d1       	rcall	.+784    	; 0x1844 <fputc>
    1534:	a1 10       	cpse	r10, r1
    1536:	f6 cf       	rjmp	.-20     	; 0x1524 <vfprintf+0x378>
    1538:	33 20       	and	r3, r3
    153a:	09 f4       	brne	.+2      	; 0x153e <vfprintf+0x392>
    153c:	5d ce       	rjmp	.-838    	; 0x11f8 <vfprintf+0x4c>
    153e:	b7 01       	movw	r22, r14
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	7f d1       	rcall	.+766    	; 0x1844 <fputc>
    1546:	3a 94       	dec	r3
    1548:	f7 cf       	rjmp	.-18     	; 0x1538 <vfprintf+0x38c>
    154a:	f7 01       	movw	r30, r14
    154c:	86 81       	ldd	r24, Z+6	; 0x06
    154e:	97 81       	ldd	r25, Z+7	; 0x07
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <vfprintf+0x3aa>
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	9f ef       	ldi	r25, 0xFF	; 255
    1556:	2c 96       	adiw	r28, 0x0c	; 12
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	bf 90       	pop	r11
    1574:	af 90       	pop	r10
    1576:	9f 90       	pop	r9
    1578:	8f 90       	pop	r8
    157a:	7f 90       	pop	r7
    157c:	6f 90       	pop	r6
    157e:	5f 90       	pop	r5
    1580:	4f 90       	pop	r4
    1582:	3f 90       	pop	r3
    1584:	2f 90       	pop	r2
    1586:	08 95       	ret

00001588 <calloc>:
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	86 9f       	mul	r24, r22
    1592:	80 01       	movw	r16, r0
    1594:	87 9f       	mul	r24, r23
    1596:	10 0d       	add	r17, r0
    1598:	96 9f       	mul	r25, r22
    159a:	10 0d       	add	r17, r0
    159c:	11 24       	eor	r1, r1
    159e:	c8 01       	movw	r24, r16
    15a0:	0d d0       	rcall	.+26     	; 0x15bc <malloc>
    15a2:	ec 01       	movw	r28, r24
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	21 f0       	breq	.+8      	; 0x15b0 <calloc+0x28>
    15a8:	a8 01       	movw	r20, r16
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	38 d1       	rcall	.+624    	; 0x1820 <memset>
    15b0:	ce 01       	movw	r24, r28
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	08 95       	ret

000015bc <malloc>:
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	91 05       	cpc	r25, r1
    15c4:	10 f4       	brcc	.+4      	; 0x15ca <malloc+0xe>
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	e0 91 ef 02 	lds	r30, 0x02EF
    15ce:	f0 91 f0 02 	lds	r31, 0x02F0
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	a0 e0       	ldi	r26, 0x00	; 0
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	30 97       	sbiw	r30, 0x00	; 0
    15dc:	39 f1       	breq	.+78     	; 0x162c <malloc+0x70>
    15de:	40 81       	ld	r20, Z
    15e0:	51 81       	ldd	r21, Z+1	; 0x01
    15e2:	48 17       	cp	r20, r24
    15e4:	59 07       	cpc	r21, r25
    15e6:	b8 f0       	brcs	.+46     	; 0x1616 <malloc+0x5a>
    15e8:	48 17       	cp	r20, r24
    15ea:	59 07       	cpc	r21, r25
    15ec:	71 f4       	brne	.+28     	; 0x160a <malloc+0x4e>
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	10 97       	sbiw	r26, 0x00	; 0
    15f4:	29 f0       	breq	.+10     	; 0x1600 <malloc+0x44>
    15f6:	13 96       	adiw	r26, 0x03	; 3
    15f8:	9c 93       	st	X, r25
    15fa:	8e 93       	st	-X, r24
    15fc:	12 97       	sbiw	r26, 0x02	; 2
    15fe:	2c c0       	rjmp	.+88     	; 0x1658 <malloc+0x9c>
    1600:	90 93 f0 02 	sts	0x02F0, r25
    1604:	80 93 ef 02 	sts	0x02EF, r24
    1608:	27 c0       	rjmp	.+78     	; 0x1658 <malloc+0x9c>
    160a:	21 15       	cp	r18, r1
    160c:	31 05       	cpc	r19, r1
    160e:	31 f0       	breq	.+12     	; 0x161c <malloc+0x60>
    1610:	42 17       	cp	r20, r18
    1612:	53 07       	cpc	r21, r19
    1614:	18 f0       	brcs	.+6      	; 0x161c <malloc+0x60>
    1616:	a9 01       	movw	r20, r18
    1618:	db 01       	movw	r26, r22
    161a:	01 c0       	rjmp	.+2      	; 0x161e <malloc+0x62>
    161c:	ef 01       	movw	r28, r30
    161e:	9a 01       	movw	r18, r20
    1620:	bd 01       	movw	r22, r26
    1622:	df 01       	movw	r26, r30
    1624:	02 80       	ldd	r0, Z+2	; 0x02
    1626:	f3 81       	ldd	r31, Z+3	; 0x03
    1628:	e0 2d       	mov	r30, r0
    162a:	d7 cf       	rjmp	.-82     	; 0x15da <malloc+0x1e>
    162c:	21 15       	cp	r18, r1
    162e:	31 05       	cpc	r19, r1
    1630:	f9 f0       	breq	.+62     	; 0x1670 <malloc+0xb4>
    1632:	28 1b       	sub	r18, r24
    1634:	39 0b       	sbc	r19, r25
    1636:	24 30       	cpi	r18, 0x04	; 4
    1638:	31 05       	cpc	r19, r1
    163a:	80 f4       	brcc	.+32     	; 0x165c <malloc+0xa0>
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	9b 81       	ldd	r25, Y+3	; 0x03
    1640:	61 15       	cp	r22, r1
    1642:	71 05       	cpc	r23, r1
    1644:	21 f0       	breq	.+8      	; 0x164e <malloc+0x92>
    1646:	fb 01       	movw	r30, r22
    1648:	93 83       	std	Z+3, r25	; 0x03
    164a:	82 83       	std	Z+2, r24	; 0x02
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <malloc+0x9a>
    164e:	90 93 f0 02 	sts	0x02F0, r25
    1652:	80 93 ef 02 	sts	0x02EF, r24
    1656:	fe 01       	movw	r30, r28
    1658:	32 96       	adiw	r30, 0x02	; 2
    165a:	44 c0       	rjmp	.+136    	; 0x16e4 <malloc+0x128>
    165c:	fe 01       	movw	r30, r28
    165e:	e2 0f       	add	r30, r18
    1660:	f3 1f       	adc	r31, r19
    1662:	81 93       	st	Z+, r24
    1664:	91 93       	st	Z+, r25
    1666:	22 50       	subi	r18, 0x02	; 2
    1668:	31 09       	sbc	r19, r1
    166a:	39 83       	std	Y+1, r19	; 0x01
    166c:	28 83       	st	Y, r18
    166e:	3a c0       	rjmp	.+116    	; 0x16e4 <malloc+0x128>
    1670:	20 91 ed 02 	lds	r18, 0x02ED
    1674:	30 91 ee 02 	lds	r19, 0x02EE
    1678:	23 2b       	or	r18, r19
    167a:	41 f4       	brne	.+16     	; 0x168c <malloc+0xd0>
    167c:	20 91 02 02 	lds	r18, 0x0202
    1680:	30 91 03 02 	lds	r19, 0x0203
    1684:	30 93 ee 02 	sts	0x02EE, r19
    1688:	20 93 ed 02 	sts	0x02ED, r18
    168c:	20 91 00 02 	lds	r18, 0x0200
    1690:	30 91 01 02 	lds	r19, 0x0201
    1694:	21 15       	cp	r18, r1
    1696:	31 05       	cpc	r19, r1
    1698:	41 f4       	brne	.+16     	; 0x16aa <malloc+0xee>
    169a:	2d b7       	in	r18, 0x3d	; 61
    169c:	3e b7       	in	r19, 0x3e	; 62
    169e:	40 91 04 02 	lds	r20, 0x0204
    16a2:	50 91 05 02 	lds	r21, 0x0205
    16a6:	24 1b       	sub	r18, r20
    16a8:	35 0b       	sbc	r19, r21
    16aa:	e0 91 ed 02 	lds	r30, 0x02ED
    16ae:	f0 91 ee 02 	lds	r31, 0x02EE
    16b2:	e2 17       	cp	r30, r18
    16b4:	f3 07       	cpc	r31, r19
    16b6:	a0 f4       	brcc	.+40     	; 0x16e0 <malloc+0x124>
    16b8:	2e 1b       	sub	r18, r30
    16ba:	3f 0b       	sbc	r19, r31
    16bc:	28 17       	cp	r18, r24
    16be:	39 07       	cpc	r19, r25
    16c0:	78 f0       	brcs	.+30     	; 0x16e0 <malloc+0x124>
    16c2:	ac 01       	movw	r20, r24
    16c4:	4e 5f       	subi	r20, 0xFE	; 254
    16c6:	5f 4f       	sbci	r21, 0xFF	; 255
    16c8:	24 17       	cp	r18, r20
    16ca:	35 07       	cpc	r19, r21
    16cc:	48 f0       	brcs	.+18     	; 0x16e0 <malloc+0x124>
    16ce:	4e 0f       	add	r20, r30
    16d0:	5f 1f       	adc	r21, r31
    16d2:	50 93 ee 02 	sts	0x02EE, r21
    16d6:	40 93 ed 02 	sts	0x02ED, r20
    16da:	81 93       	st	Z+, r24
    16dc:	91 93       	st	Z+, r25
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <malloc+0x128>
    16e0:	e0 e0       	ldi	r30, 0x00	; 0
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	cf 01       	movw	r24, r30
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <free>:
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <free+0xa>
    16f4:	87 c0       	rjmp	.+270    	; 0x1804 <free+0x118>
    16f6:	fc 01       	movw	r30, r24
    16f8:	32 97       	sbiw	r30, 0x02	; 2
    16fa:	13 82       	std	Z+3, r1	; 0x03
    16fc:	12 82       	std	Z+2, r1	; 0x02
    16fe:	c0 91 ef 02 	lds	r28, 0x02EF
    1702:	d0 91 f0 02 	lds	r29, 0x02F0
    1706:	20 97       	sbiw	r28, 0x00	; 0
    1708:	81 f4       	brne	.+32     	; 0x172a <free+0x3e>
    170a:	20 81       	ld	r18, Z
    170c:	31 81       	ldd	r19, Z+1	; 0x01
    170e:	28 0f       	add	r18, r24
    1710:	39 1f       	adc	r19, r25
    1712:	80 91 ed 02 	lds	r24, 0x02ED
    1716:	90 91 ee 02 	lds	r25, 0x02EE
    171a:	82 17       	cp	r24, r18
    171c:	93 07       	cpc	r25, r19
    171e:	79 f5       	brne	.+94     	; 0x177e <free+0x92>
    1720:	f0 93 ee 02 	sts	0x02EE, r31
    1724:	e0 93 ed 02 	sts	0x02ED, r30
    1728:	6d c0       	rjmp	.+218    	; 0x1804 <free+0x118>
    172a:	de 01       	movw	r26, r28
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	ae 17       	cp	r26, r30
    1732:	bf 07       	cpc	r27, r31
    1734:	50 f4       	brcc	.+20     	; 0x174a <free+0x5e>
    1736:	12 96       	adiw	r26, 0x02	; 2
    1738:	4d 91       	ld	r20, X+
    173a:	5c 91       	ld	r21, X
    173c:	13 97       	sbiw	r26, 0x03	; 3
    173e:	9d 01       	movw	r18, r26
    1740:	41 15       	cp	r20, r1
    1742:	51 05       	cpc	r21, r1
    1744:	09 f1       	breq	.+66     	; 0x1788 <free+0x9c>
    1746:	da 01       	movw	r26, r20
    1748:	f3 cf       	rjmp	.-26     	; 0x1730 <free+0x44>
    174a:	b3 83       	std	Z+3, r27	; 0x03
    174c:	a2 83       	std	Z+2, r26	; 0x02
    174e:	40 81       	ld	r20, Z
    1750:	51 81       	ldd	r21, Z+1	; 0x01
    1752:	84 0f       	add	r24, r20
    1754:	95 1f       	adc	r25, r21
    1756:	8a 17       	cp	r24, r26
    1758:	9b 07       	cpc	r25, r27
    175a:	71 f4       	brne	.+28     	; 0x1778 <free+0x8c>
    175c:	8d 91       	ld	r24, X+
    175e:	9c 91       	ld	r25, X
    1760:	11 97       	sbiw	r26, 0x01	; 1
    1762:	84 0f       	add	r24, r20
    1764:	95 1f       	adc	r25, r21
    1766:	02 96       	adiw	r24, 0x02	; 2
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	80 83       	st	Z, r24
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	8d 91       	ld	r24, X+
    1770:	9c 91       	ld	r25, X
    1772:	13 97       	sbiw	r26, 0x03	; 3
    1774:	93 83       	std	Z+3, r25	; 0x03
    1776:	82 83       	std	Z+2, r24	; 0x02
    1778:	21 15       	cp	r18, r1
    177a:	31 05       	cpc	r19, r1
    177c:	29 f4       	brne	.+10     	; 0x1788 <free+0x9c>
    177e:	f0 93 f0 02 	sts	0x02F0, r31
    1782:	e0 93 ef 02 	sts	0x02EF, r30
    1786:	3e c0       	rjmp	.+124    	; 0x1804 <free+0x118>
    1788:	d9 01       	movw	r26, r18
    178a:	13 96       	adiw	r26, 0x03	; 3
    178c:	fc 93       	st	X, r31
    178e:	ee 93       	st	-X, r30
    1790:	12 97       	sbiw	r26, 0x02	; 2
    1792:	4d 91       	ld	r20, X+
    1794:	5d 91       	ld	r21, X+
    1796:	a4 0f       	add	r26, r20
    1798:	b5 1f       	adc	r27, r21
    179a:	ea 17       	cp	r30, r26
    179c:	fb 07       	cpc	r31, r27
    179e:	79 f4       	brne	.+30     	; 0x17be <free+0xd2>
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	84 0f       	add	r24, r20
    17a6:	95 1f       	adc	r25, r21
    17a8:	02 96       	adiw	r24, 0x02	; 2
    17aa:	d9 01       	movw	r26, r18
    17ac:	11 96       	adiw	r26, 0x01	; 1
    17ae:	9c 93       	st	X, r25
    17b0:	8e 93       	st	-X, r24
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	13 96       	adiw	r26, 0x03	; 3
    17b8:	9c 93       	st	X, r25
    17ba:	8e 93       	st	-X, r24
    17bc:	12 97       	sbiw	r26, 0x02	; 2
    17be:	e0 e0       	ldi	r30, 0x00	; 0
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	9b 81       	ldd	r25, Y+3	; 0x03
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	19 f0       	breq	.+6      	; 0x17d0 <free+0xe4>
    17ca:	fe 01       	movw	r30, r28
    17cc:	ec 01       	movw	r28, r24
    17ce:	f9 cf       	rjmp	.-14     	; 0x17c2 <free+0xd6>
    17d0:	ce 01       	movw	r24, r28
    17d2:	02 96       	adiw	r24, 0x02	; 2
    17d4:	28 81       	ld	r18, Y
    17d6:	39 81       	ldd	r19, Y+1	; 0x01
    17d8:	82 0f       	add	r24, r18
    17da:	93 1f       	adc	r25, r19
    17dc:	20 91 ed 02 	lds	r18, 0x02ED
    17e0:	30 91 ee 02 	lds	r19, 0x02EE
    17e4:	28 17       	cp	r18, r24
    17e6:	39 07       	cpc	r19, r25
    17e8:	69 f4       	brne	.+26     	; 0x1804 <free+0x118>
    17ea:	30 97       	sbiw	r30, 0x00	; 0
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <free+0x10c>
    17ee:	10 92 f0 02 	sts	0x02F0, r1
    17f2:	10 92 ef 02 	sts	0x02EF, r1
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <free+0x110>
    17f8:	13 82       	std	Z+3, r1	; 0x03
    17fa:	12 82       	std	Z+2, r1	; 0x02
    17fc:	d0 93 ee 02 	sts	0x02EE, r29
    1800:	c0 93 ed 02 	sts	0x02ED, r28
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <strnlen_P>:
    180a:	fc 01       	movw	r30, r24
    180c:	05 90       	lpm	r0, Z+
    180e:	61 50       	subi	r22, 0x01	; 1
    1810:	70 40       	sbci	r23, 0x00	; 0
    1812:	01 10       	cpse	r0, r1
    1814:	d8 f7       	brcc	.-10     	; 0x180c <strnlen_P+0x2>
    1816:	80 95       	com	r24
    1818:	90 95       	com	r25
    181a:	8e 0f       	add	r24, r30
    181c:	9f 1f       	adc	r25, r31
    181e:	08 95       	ret

00001820 <memset>:
    1820:	dc 01       	movw	r26, r24
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <memset+0x6>
    1824:	6d 93       	st	X+, r22
    1826:	41 50       	subi	r20, 0x01	; 1
    1828:	50 40       	sbci	r21, 0x00	; 0
    182a:	e0 f7       	brcc	.-8      	; 0x1824 <memset+0x4>
    182c:	08 95       	ret

0000182e <strnlen>:
    182e:	fc 01       	movw	r30, r24
    1830:	61 50       	subi	r22, 0x01	; 1
    1832:	70 40       	sbci	r23, 0x00	; 0
    1834:	01 90       	ld	r0, Z+
    1836:	01 10       	cpse	r0, r1
    1838:	d8 f7       	brcc	.-10     	; 0x1830 <strnlen+0x2>
    183a:	80 95       	com	r24
    183c:	90 95       	com	r25
    183e:	8e 0f       	add	r24, r30
    1840:	9f 1f       	adc	r25, r31
    1842:	08 95       	ret

00001844 <fputc>:
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	18 2f       	mov	r17, r24
    184e:	09 2f       	mov	r16, r25
    1850:	eb 01       	movw	r28, r22
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	81 fd       	sbrc	r24, 1
    1856:	03 c0       	rjmp	.+6      	; 0x185e <fputc+0x1a>
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	9f ef       	ldi	r25, 0xFF	; 255
    185c:	20 c0       	rjmp	.+64     	; 0x189e <fputc+0x5a>
    185e:	82 ff       	sbrs	r24, 2
    1860:	10 c0       	rjmp	.+32     	; 0x1882 <fputc+0x3e>
    1862:	4e 81       	ldd	r20, Y+6	; 0x06
    1864:	5f 81       	ldd	r21, Y+7	; 0x07
    1866:	2c 81       	ldd	r18, Y+4	; 0x04
    1868:	3d 81       	ldd	r19, Y+5	; 0x05
    186a:	42 17       	cp	r20, r18
    186c:	53 07       	cpc	r21, r19
    186e:	7c f4       	brge	.+30     	; 0x188e <fputc+0x4a>
    1870:	e8 81       	ld	r30, Y
    1872:	f9 81       	ldd	r31, Y+1	; 0x01
    1874:	9f 01       	movw	r18, r30
    1876:	2f 5f       	subi	r18, 0xFF	; 255
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	39 83       	std	Y+1, r19	; 0x01
    187c:	28 83       	st	Y, r18
    187e:	10 83       	st	Z, r17
    1880:	06 c0       	rjmp	.+12     	; 0x188e <fputc+0x4a>
    1882:	e8 85       	ldd	r30, Y+8	; 0x08
    1884:	f9 85       	ldd	r31, Y+9	; 0x09
    1886:	81 2f       	mov	r24, r17
    1888:	19 95       	eicall
    188a:	89 2b       	or	r24, r25
    188c:	29 f7       	brne	.-54     	; 0x1858 <fputc+0x14>
    188e:	2e 81       	ldd	r18, Y+6	; 0x06
    1890:	3f 81       	ldd	r19, Y+7	; 0x07
    1892:	2f 5f       	subi	r18, 0xFF	; 255
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	3f 83       	std	Y+7, r19	; 0x07
    1898:	2e 83       	std	Y+6, r18	; 0x06
    189a:	81 2f       	mov	r24, r17
    189c:	90 2f       	mov	r25, r16
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <__ultoa_invert>:
    18a8:	fa 01       	movw	r30, r20
    18aa:	aa 27       	eor	r26, r26
    18ac:	28 30       	cpi	r18, 0x08	; 8
    18ae:	51 f1       	breq	.+84     	; 0x1904 <__ultoa_invert+0x5c>
    18b0:	20 31       	cpi	r18, 0x10	; 16
    18b2:	81 f1       	breq	.+96     	; 0x1914 <__ultoa_invert+0x6c>
    18b4:	e8 94       	clt
    18b6:	6f 93       	push	r22
    18b8:	6e 7f       	andi	r22, 0xFE	; 254
    18ba:	6e 5f       	subi	r22, 0xFE	; 254
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	af 4f       	sbci	r26, 0xFF	; 255
    18c4:	b1 e0       	ldi	r27, 0x01	; 1
    18c6:	3e d0       	rcall	.+124    	; 0x1944 <__ultoa_invert+0x9c>
    18c8:	b4 e0       	ldi	r27, 0x04	; 4
    18ca:	3c d0       	rcall	.+120    	; 0x1944 <__ultoa_invert+0x9c>
    18cc:	67 0f       	add	r22, r23
    18ce:	78 1f       	adc	r23, r24
    18d0:	89 1f       	adc	r24, r25
    18d2:	9a 1f       	adc	r25, r26
    18d4:	a1 1d       	adc	r26, r1
    18d6:	68 0f       	add	r22, r24
    18d8:	79 1f       	adc	r23, r25
    18da:	8a 1f       	adc	r24, r26
    18dc:	91 1d       	adc	r25, r1
    18de:	a1 1d       	adc	r26, r1
    18e0:	6a 0f       	add	r22, r26
    18e2:	71 1d       	adc	r23, r1
    18e4:	81 1d       	adc	r24, r1
    18e6:	91 1d       	adc	r25, r1
    18e8:	a1 1d       	adc	r26, r1
    18ea:	20 d0       	rcall	.+64     	; 0x192c <__ultoa_invert+0x84>
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <__ultoa_invert+0x48>
    18ee:	68 94       	set
    18f0:	3f 91       	pop	r19
    18f2:	2a e0       	ldi	r18, 0x0A	; 10
    18f4:	26 9f       	mul	r18, r22
    18f6:	11 24       	eor	r1, r1
    18f8:	30 19       	sub	r19, r0
    18fa:	30 5d       	subi	r19, 0xD0	; 208
    18fc:	31 93       	st	Z+, r19
    18fe:	de f6       	brtc	.-74     	; 0x18b6 <__ultoa_invert+0xe>
    1900:	cf 01       	movw	r24, r30
    1902:	08 95       	ret
    1904:	46 2f       	mov	r20, r22
    1906:	47 70       	andi	r20, 0x07	; 7
    1908:	40 5d       	subi	r20, 0xD0	; 208
    190a:	41 93       	st	Z+, r20
    190c:	b3 e0       	ldi	r27, 0x03	; 3
    190e:	0f d0       	rcall	.+30     	; 0x192e <__ultoa_invert+0x86>
    1910:	c9 f7       	brne	.-14     	; 0x1904 <__ultoa_invert+0x5c>
    1912:	f6 cf       	rjmp	.-20     	; 0x1900 <__ultoa_invert+0x58>
    1914:	46 2f       	mov	r20, r22
    1916:	4f 70       	andi	r20, 0x0F	; 15
    1918:	40 5d       	subi	r20, 0xD0	; 208
    191a:	4a 33       	cpi	r20, 0x3A	; 58
    191c:	18 f0       	brcs	.+6      	; 0x1924 <__ultoa_invert+0x7c>
    191e:	49 5d       	subi	r20, 0xD9	; 217
    1920:	31 fd       	sbrc	r19, 1
    1922:	40 52       	subi	r20, 0x20	; 32
    1924:	41 93       	st	Z+, r20
    1926:	02 d0       	rcall	.+4      	; 0x192c <__ultoa_invert+0x84>
    1928:	a9 f7       	brne	.-22     	; 0x1914 <__ultoa_invert+0x6c>
    192a:	ea cf       	rjmp	.-44     	; 0x1900 <__ultoa_invert+0x58>
    192c:	b4 e0       	ldi	r27, 0x04	; 4
    192e:	a6 95       	lsr	r26
    1930:	97 95       	ror	r25
    1932:	87 95       	ror	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	ba 95       	dec	r27
    193a:	c9 f7       	brne	.-14     	; 0x192e <__ultoa_invert+0x86>
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	61 05       	cpc	r22, r1
    1940:	71 05       	cpc	r23, r1
    1942:	08 95       	ret
    1944:	9b 01       	movw	r18, r22
    1946:	ac 01       	movw	r20, r24
    1948:	0a 2e       	mov	r0, r26
    194a:	06 94       	lsr	r0
    194c:	57 95       	ror	r21
    194e:	47 95       	ror	r20
    1950:	37 95       	ror	r19
    1952:	27 95       	ror	r18
    1954:	ba 95       	dec	r27
    1956:	c9 f7       	brne	.-14     	; 0x194a <__ultoa_invert+0xa2>
    1958:	62 0f       	add	r22, r18
    195a:	73 1f       	adc	r23, r19
    195c:	84 1f       	adc	r24, r20
    195e:	95 1f       	adc	r25, r21
    1960:	a0 1d       	adc	r26, r0
    1962:	08 95       	ret

00001964 <_exit>:
    1964:	f8 94       	cli

00001966 <__stop_program>:
    1966:	ff cf       	rjmp	.-2      	; 0x1966 <__stop_program>
