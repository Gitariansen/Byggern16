
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800200  00000e70  00000f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008002ae  008002ae  00000fb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00000fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001927  00000000  00000000  00001252  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e02  00000000  00000000  00002b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001251  00000000  00000000  0000397b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d0  00000000  00000000  00004bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000068c  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a85  00000000  00000000  00005728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  000061ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	ce c1       	rjmp	.+924    	; 0x3aa <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e7       	ldi	r30, 0x70	; 112
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 3a       	cpi	r26, 0xAE	; 174
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae ea       	ldi	r26, 0xAE	; 174
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 3b       	cpi	r26, 0xBF	; 191
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	a5 c6       	rjmp	.+3402   	; 0xe6c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "drivers/MCP2551.h"
#include "drivers/ir.h"
#include "drivers/motor.h"

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	66 97       	sbiw	r28, 0x16	; 22
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
 138:	87 e6       	ldi	r24, 0x67	; 103
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	b0 d2       	rcall	.+1376   	; 0x69e <UART_init>
	CAN_init();
 13e:	4a d0       	rcall	.+148    	; 0x1d4 <CAN_init>
	IR_init();
 140:	73 d1       	rcall	.+742    	; 0x428 <IR_init>

	//SERVO_init();
	MOTOR_init();
 142:	f6 d1       	rcall	.+1004   	; 0x530 <MOTOR_init>
	// Test motor
	MOTOR_set_velocity(100);
 144:	84 e6       	ldi	r24, 0x64	; 100
 146:	02 d2       	rcall	.+1028   	; 0x54c <MOTOR_set_velocity>
	printf("Hello world\n");
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	1a d5       	rcall	.+2612   	; 0xb82 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	87 ea       	ldi	r24, 0xA7	; 167
 152:	91 e6       	ldi	r25, 0x61	; 97
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x30>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x3a>
 15e:	00 00       	nop
	_delay_ms(2000);
	MOTOR_stop();
 160:	f7 d1       	rcall	.+1006   	; 0x550 <MOTOR_stop>
		
		ir_value = IR_read();
		if(ir_value != old_ir_value) {
			old_ir_value = ir_value;
			// Send score to node 1
			send_msg.id = 2;
 162:	02 e0       	ldi	r16, 0x02	; 2
 164:	10 e0       	ldi	r17, 0x00	; 0
			send_msg.data[0] = ir_value;
			send_msg.length = 1;
 166:	dd 24       	eor	r13, r13
 168:	d3 94       	inc	r13
	
	uint8_t ir_value;
	uint8_t old_ir_value;
	while(1) {
		
		receive_msg = CAN_data_receive();
 16a:	ce 01       	movw	r24, r28
 16c:	0c 96       	adiw	r24, 0x0c	; 12
 16e:	9b d0       	rcall	.+310    	; 0x2a6 <CAN_data_receive>
		if(receive_msg.id == 1) {
 170:	8c 85       	ldd	r24, Y+12	; 0x0c
 172:	9d 85       	ldd	r25, Y+13	; 0x0d
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	19 f4       	brne	.+6      	; 0x17e <main+0x5a>
			SERVO_write(-receive_msg.data[0]);
 178:	8f 85       	ldd	r24, Y+15	; 0x0f
 17a:	81 95       	neg	r24
 17c:	f7 d1       	rcall	.+1006   	; 0x56c <SERVO_write>
		}
		
		ir_value = IR_read();
 17e:	56 d1       	rcall	.+684    	; 0x42c <IR_read>
 180:	f8 2e       	mov	r15, r24
		if(ir_value != old_ir_value) {
 182:	8e 15       	cp	r24, r14
 184:	39 f0       	breq	.+14     	; 0x194 <main+0x70>
			old_ir_value = ir_value;
			// Send score to node 1
			send_msg.id = 2;
 186:	1a 83       	std	Y+2, r17	; 0x02
 188:	09 83       	std	Y+1, r16	; 0x01
			send_msg.data[0] = ir_value;
 18a:	8c 83       	std	Y+4, r24	; 0x04
			send_msg.length = 1;
 18c:	db 82       	std	Y+3, r13	; 0x03
			CAN_message_send(&send_msg);
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	39 d0       	rcall	.+114    	; 0x206 <CAN_message_send>
 194:	8f e9       	ldi	r24, 0x9F	; 159
 196:	9f e0       	ldi	r25, 0x0F	; 15
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x74>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x7a>
 19e:	00 00       	nop
 1a0:	ef 2c       	mov	r14, r15
 1a2:	e3 cf       	rjmp	.-58     	; 0x16a <main+0x46>

000001a4 <ADC_init>:

#include "adc.h"
#include <avr/io.h>

void ADC_init() {
	ADCSRA |= (1 << ADEN);
 1a4:	ea e7       	ldi	r30, 0x7A	; 122
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	80 83       	st	Z, r24
	// Set prescaler to 128
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 1ae:	80 81       	ld	r24, Z
 1b0:	87 60       	ori	r24, 0x07	; 7
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <ADC_read>:
}

uint8_t ADC_read(uint8_t ch) {
	// AVCC with external capacitor at AREF pin. 8-bit resolution.
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (0x1F & ch);
 1b6:	8f 71       	andi	r24, 0x1F	; 31
 1b8:	80 66       	ori	r24, 0x60	; 96
 1ba:	80 93 7c 00 	sts	0x007C, r24
	// Start conversion
	ADCSRA |= (1 << ADSC);
 1be:	ea e7       	ldi	r30, 0x7A	; 122
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
 1c8:	80 81       	ld	r24, Z
 1ca:	86 fd       	sbrc	r24, 6
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <ADC_read+0x12>
	return ADCH;
 1ce:	80 91 79 00 	lds	r24, 0x0079
 1d2:	08 95       	ret

000001d4 <CAN_init>:

uint8_t rx_flag;

void CAN_init() {
	// Initialize MCP2551
	MCP2551_init();
 1d4:	8f d1       	rcall	.+798    	; 0x4f4 <MCP2551_init>
	// Set normal mode
	MCP2551_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	60 ee       	ldi	r22, 0xE0	; 224
 1da:	8f e0       	ldi	r24, 0x0F	; 15
 1dc:	6e d1       	rcall	.+732    	; 0x4ba <MCP2551_bit_modify>

	uint8_t value = MCP2551_read_data(MCP_CANSTAT);
 1de:	8e e0       	ldi	r24, 0x0E	; 14
 1e0:	2d d1       	rcall	.+602    	; 0x43c <MCP2551_read_data>
	if ((value & MODE_MASK) != MODE_NORMAL) {
 1e2:	80 7e       	andi	r24, 0xE0	; 224
 1e4:	21 f0       	breq	.+8      	; 0x1ee <CAN_init+0x1a>
		printf("MCP2551 is NOT in normal mode after reset!\n");
 1e6:	83 e1       	ldi	r24, 0x13	; 19
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	cb c4       	rjmp	.+2454   	; 0xb82 <puts>
		return 1;
 1ec:	08 95       	ret
	}

	// Enable interrupts for receive and error
	MCP2551_bit_modify(MCP_CANINTE, 0xFF, MCP_RX_INT | MCP_ERRIE);
 1ee:	43 e2       	ldi	r20, 0x23	; 35
 1f0:	6f ef       	ldi	r22, 0xFF	; 255
 1f2:	8b e2       	ldi	r24, 0x2B	; 43
 1f4:	62 d1       	rcall	.+708    	; 0x4ba <MCP2551_bit_modify>
	
	EICRA	|= (1 << ISC21);
 1f6:	e9 e6       	ldi	r30, 0x69	; 105
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	80 83       	st	Z, r24
	EIMSK	|= (1 << INT2);
 200:	ea 9a       	sbi	0x1d, 2	; 29
	sei();
 202:	78 94       	sei
 204:	08 95       	ret

00000206 <CAN_message_send>:
		rx_flag = 1;
	}
	MCP2551_bit_modify(MCP_CANINTF, 0xFF, 0);
}

void CAN_message_send(struct can_message_t* msg){
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	dc 01       	movw	r26, r24
	}
	// Write starting from TXB0SIDH
	MCP2551_write_data(MCP_TXB0SIDH, data, data_length); 
	// Request to send from buffer TX0
	MCP2551_request_to_send(1);
}
 214:	0d b7       	in	r16, 0x3d	; 61
 216:	1e b7       	in	r17, 0x3e	; 62
	}
	MCP2551_bit_modify(MCP_CANINTF, 0xFF, 0);
}

void CAN_message_send(struct can_message_t* msg){
	int data_length = 5 + msg->length;
 218:	12 96       	adiw	r26, 0x02	; 2
 21a:	4c 91       	ld	r20, X
 21c:	12 97       	sbiw	r26, 0x02	; 2
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	4b 5f       	subi	r20, 0xFB	; 251
 222:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t data[data_length];
 224:	8d b7       	in	r24, 0x3d	; 61
 226:	9e b7       	in	r25, 0x3e	; 62
 228:	84 1b       	sub	r24, r20
 22a:	95 0b       	sbc	r25, r21
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	9e bf       	out	0x3e, r25	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	8d bf       	out	0x3d, r24	; 61
 236:	6d b7       	in	r22, 0x3d	; 61
 238:	7e b7       	in	r23, 0x3e	; 62
 23a:	6f 5f       	subi	r22, 0xFF	; 255
 23c:	7f 4f       	sbci	r23, 0xFF	; 255
	data[0] = msg->id >> 3; // Bit 0 to 2 to TXB0SIDH
 23e:	8d 91       	ld	r24, X+
 240:	9c 91       	ld	r25, X
 242:	11 97       	sbiw	r26, 0x01	; 1
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	96 95       	lsr	r25
 24a:	87 95       	ror	r24
 24c:	96 95       	lsr	r25
 24e:	87 95       	ror	r24
 250:	ed b7       	in	r30, 0x3d	; 61
 252:	fe b7       	in	r31, 0x3e	; 62
 254:	81 83       	std	Z+1, r24	; 0x01
	data[1] = msg->id << 5; // Bit 3 to 10 to TXB0SIDL
 256:	8c 91       	ld	r24, X
 258:	82 95       	swap	r24
 25a:	88 0f       	add	r24, r24
 25c:	80 7e       	andi	r24, 0xE0	; 224
 25e:	fb 01       	movw	r30, r22
 260:	81 83       	std	Z+1, r24	; 0x01
	// Not using extended ID
	data[2] = 0;
 262:	12 82       	std	Z+2, r1	; 0x02
	data[3] = 0;
 264:	13 82       	std	Z+3, r1	; 0x03
	// length to TXB0DLC
	data[4] = msg->length;
 266:	12 96       	adiw	r26, 0x02	; 2
 268:	8c 91       	ld	r24, X
 26a:	12 97       	sbiw	r26, 0x02	; 2
 26c:	84 83       	std	Z+4, r24	; 0x04
	// Fill rest of array with message data
	for(int i = 5; i < data_length; i++) {
 26e:	46 30       	cpi	r20, 0x06	; 6
 270:	51 05       	cpc	r21, r1
 272:	5c f0       	brlt	.+22     	; 0x28a <CAN_message_send+0x84>
 274:	13 96       	adiw	r26, 0x03	; 3
 276:	35 96       	adiw	r30, 0x05	; 5
 278:	25 e0       	ldi	r18, 0x05	; 5
 27a:	30 e0       	ldi	r19, 0x00	; 0
		data[i] = msg->data[i - 5];
 27c:	8d 91       	ld	r24, X+
 27e:	81 93       	st	Z+, r24
	data[2] = 0;
	data[3] = 0;
	// length to TXB0DLC
	data[4] = msg->length;
	// Fill rest of array with message data
	for(int i = 5; i < data_length; i++) {
 280:	2f 5f       	subi	r18, 0xFF	; 255
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	24 17       	cp	r18, r20
 286:	35 07       	cpc	r19, r21
 288:	cc f3       	brlt	.-14     	; 0x27c <CAN_message_send+0x76>
		data[i] = msg->data[i - 5];
	}
	// Write starting from TXB0SIDH
	MCP2551_write_data(MCP_TXB0SIDH, data, data_length); 
 28a:	81 e3       	ldi	r24, 0x31	; 49
 28c:	e7 d0       	rcall	.+462    	; 0x45c <MCP2551_write_data>
	// Request to send from buffer TX0
	MCP2551_request_to_send(1);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 d1       	rcall	.+528    	; 0x4a2 <MCP2551_request_to_send>
}
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	1e bf       	out	0x3e, r17	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0d bf       	out	0x3d, r16	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	08 95       	ret

000002a6 <CAN_data_receive>:

struct can_message_t CAN_data_receive() {
 2a6:	8f 92       	push	r8
 2a8:	9f 92       	push	r9
 2aa:	af 92       	push	r10
 2ac:	bf 92       	push	r11
 2ae:	cf 92       	push	r12
 2b0:	df 92       	push	r13
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	2b 97       	sbiw	r28, 0x0b	; 11
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	6c 01       	movw	r12, r24
	// TODO: enable interrupts to use rx_flag
	struct can_message_t msg;
	rx_flag = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 b4 02 	sts	0x02B4, r24
	if(rx_flag) {
		msg.id = (MCP2551_read_data(MCP_RXB0SIDH) << 3) | (MCP2551_read_data(MCP_RXB0SIDL) >> 5);
 2d6:	81 e6       	ldi	r24, 0x61	; 97
 2d8:	b1 d0       	rcall	.+354    	; 0x43c <MCP2551_read_data>
 2da:	a8 2e       	mov	r10, r24
 2dc:	82 e6       	ldi	r24, 0x62	; 98
 2de:	ae d0       	rcall	.+348    	; 0x43c <MCP2551_read_data>
 2e0:	82 95       	swap	r24
 2e2:	86 95       	lsr	r24
 2e4:	87 70       	andi	r24, 0x07	; 7
 2e6:	b1 2c       	mov	r11, r1
 2e8:	aa 0c       	add	r10, r10
 2ea:	bb 1c       	adc	r11, r11
 2ec:	aa 0c       	add	r10, r10
 2ee:	bb 1c       	adc	r11, r11
 2f0:	aa 0c       	add	r10, r10
 2f2:	bb 1c       	adc	r11, r11
 2f4:	a8 2a       	or	r10, r24
		msg.length = (0x0F) & MCP2551_read_data(MCP_RXB0DLC);
 2f6:	85 e6       	ldi	r24, 0x65	; 101
 2f8:	a1 d0       	rcall	.+322    	; 0x43c <MCP2551_read_data>
 2fa:	8f 70       	andi	r24, 0x0F	; 15
 2fc:	88 2e       	mov	r8, r24
		for(int i = 0; i < msg.length; i++) {
 2fe:	99 f0       	breq	.+38     	; 0x326 <CAN_data_receive+0x80>
 300:	8e 01       	movw	r16, r28
 302:	0c 5f       	subi	r16, 0xFC	; 252
 304:	1f 4f       	sbci	r17, 0xFF	; 255
 306:	78 01       	movw	r14, r16
 308:	e8 0e       	add	r14, r24
 30a:	f1 1c       	adc	r15, r1
 30c:	0f 2e       	mov	r0, r31
 30e:	f6 e6       	ldi	r31, 0x66	; 102
 310:	9f 2e       	mov	r9, r31
 312:	f0 2d       	mov	r31, r0
			msg.data[i] = MCP2551_read_data(MCP_RXB0D0 + i);
 314:	89 2d       	mov	r24, r9
 316:	92 d0       	rcall	.+292    	; 0x43c <MCP2551_read_data>
 318:	f8 01       	movw	r30, r16
 31a:	81 93       	st	Z+, r24
 31c:	8f 01       	movw	r16, r30
 31e:	93 94       	inc	r9
	struct can_message_t msg;
	rx_flag = 1;
	if(rx_flag) {
		msg.id = (MCP2551_read_data(MCP_RXB0SIDH) << 3) | (MCP2551_read_data(MCP_RXB0SIDL) >> 5);
		msg.length = (0x0F) & MCP2551_read_data(MCP_RXB0DLC);
		for(int i = 0; i < msg.length; i++) {
 320:	ee 15       	cp	r30, r14
 322:	ff 05       	cpc	r31, r15
 324:	b9 f7       	brne	.-18     	; 0x314 <CAN_data_receive+0x6e>
			msg.data[i] = MCP2551_read_data(MCP_RXB0D0 + i);
		}
		rx_flag = 0;
 326:	10 92 b4 02 	sts	0x02B4, r1
	} else {
		printf("(W) can.c: Buffer empty. Returning empty message\n");
	}
	return msg;
 32a:	ba 82       	std	Y+2, r11	; 0x02
 32c:	a9 82       	std	Y+1, r10	; 0x01
 32e:	8b 82       	std	Y+3, r8	; 0x03
 330:	8b e0       	ldi	r24, 0x0B	; 11
 332:	fe 01       	movw	r30, r28
 334:	31 96       	adiw	r30, 0x01	; 1
 336:	d6 01       	movw	r26, r12
 338:	01 90       	ld	r0, Z+
 33a:	0d 92       	st	X+, r0
 33c:	8a 95       	dec	r24
 33e:	e1 f7       	brne	.-8      	; 0x338 <CAN_data_receive+0x92>
}
 340:	c6 01       	movw	r24, r12
 342:	2b 96       	adiw	r28, 0x0b	; 11
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	bf 90       	pop	r11
 360:	af 90       	pop	r10
 362:	9f 90       	pop	r9
 364:	8f 90       	pop	r8
 366:	08 95       	ret

00000368 <CAN_error>:

void CAN_error() {
 368:	cf 93       	push	r28
	uint8_t error = MCP2551_read_data(MCP_EFLG);
 36a:	8d e2       	ldi	r24, 0x2D	; 45
 36c:	67 d0       	rcall	.+206    	; 0x43c <MCP2551_read_data>
 36e:	c8 2f       	mov	r28, r24
	if(error & MCP_TXWAR) {
 370:	82 ff       	sbrs	r24, 2
 372:	03 c0       	rjmp	.+6      	; 0x37a <CAN_error+0x12>
		printf("(E) can.c: Transmission error\n");
 374:	8e e3       	ldi	r24, 0x3E	; 62
 376:	92 e0       	ldi	r25, 0x02	; 2
 378:	04 d4       	rcall	.+2056   	; 0xb82 <puts>
	}
	if(error & MCP_RXWAR) {
 37a:	c1 ff       	sbrs	r28, 1
 37c:	03 c0       	rjmp	.+6      	; 0x384 <CAN_error+0x1c>
		printf("(E) can.c: Receive error\n");
 37e:	8c e5       	ldi	r24, 0x5C	; 92
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	ff d3       	rcall	.+2046   	; 0xb82 <puts>
	}
}
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <CAN_int_vect>:

ISR(INT2_vect) {
	CAN_int_vect();
}

void CAN_int_vect() {
 388:	cf 93       	push	r28
	uint8_t interrupt = MCP2551_read_data(MCP_CANINTF);
 38a:	8c e2       	ldi	r24, 0x2C	; 44
 38c:	57 d0       	rcall	.+174    	; 0x43c <MCP2551_read_data>
 38e:	c8 2f       	mov	r28, r24
	if(interrupt & MCP_ERRIF) {
 390:	85 fd       	sbrc	r24, 5
		CAN_error();
 392:	ea df       	rcall	.-44     	; 0x368 <CAN_error>
	}
	if(interrupt & MCP_RX0IF) {
 394:	c0 ff       	sbrs	r28, 0
 396:	03 c0       	rjmp	.+6      	; 0x39e <CAN_int_vect+0x16>
		rx_flag = 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 b4 02 	sts	0x02B4, r24
	}
	MCP2551_bit_modify(MCP_CANINTF, 0xFF, 0);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	6f ef       	ldi	r22, 0xFF	; 255
 3a2:	8c e2       	ldi	r24, 0x2C	; 44
 3a4:	8a d0       	rcall	.+276    	; 0x4ba <MCP2551_bit_modify>
}
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <__vector_3>:
	EICRA	|= (1 << ISC21);
	EIMSK	|= (1 << INT2);
	sei();
}

ISR(INT2_vect) {
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	0b b6       	in	r0, 0x3b	; 59
 3b6:	0f 92       	push	r0
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
	CAN_int_vect();
 3d0:	db df       	rcall	.-74     	; 0x388 <CAN_int_vect>
}
 3d2:	ff 91       	pop	r31
 3d4:	ef 91       	pop	r30
 3d6:	bf 91       	pop	r27
 3d8:	af 91       	pop	r26
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	7f 91       	pop	r23
 3e0:	6f 91       	pop	r22
 3e2:	5f 91       	pop	r21
 3e4:	4f 91       	pop	r20
 3e6:	3f 91       	pop	r19
 3e8:	2f 91       	pop	r18
 3ea:	0f 90       	pop	r0
 3ec:	0b be       	out	0x3b, r0	; 59
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <DAC_init>:

#include "dac.h"
#include "TWI_Master.h"

void DAC_init() {
	TWI_Master_Initialise();
 3f8:	11 c1       	rjmp	.+546    	; 0x61c <TWI_Master_Initialise>
 3fa:	08 95       	ret

000003fc <DAC_write>:
}

void DAC_write(uint8_t value) {
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	00 d0       	rcall	.+0      	; 0x402 <DAC_write+0x6>
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
	uint8_t twi_msg[3] = {
 406:	90 e5       	ldi	r25, 0x50	; 80
 408:	99 83       	std	Y+1, r25	; 0x01
 40a:	1a 82       	std	Y+2, r1	; 0x02
 40c:	8b 83       	std	Y+3, r24	; 0x03
		MAX520_TWI_ADDRESS,
		0x00,
		value
	};
	TWI_Start_Transceiver_With_Data(twi_msg, 3);
 40e:	63 e0       	ldi	r22, 0x03	; 3
 410:	ce 01       	movw	r24, r28
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	0d d1       	rcall	.+538    	; 0x630 <TWI_Start_Transceiver_With_Data>
	printf("HOLMES\n");
 416:	85 e7       	ldi	r24, 0x75	; 117
 418:	92 e0       	ldi	r25, 0x02	; 2
 41a:	b3 d3       	rcall	.+1894   	; 0xb82 <puts>
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <IR_init>:

#include "ir.h"
#include "adc.h"

void IR_init() {
	ADC_init();
 428:	bd ce       	rjmp	.-646    	; 0x1a4 <ADC_init>
 42a:	08 95       	ret

0000042c <IR_read>:
}

uint8_t IR_read() {
	// TODO: Implement filter
	return ADC_read(IR_CHANNEL) < THRESHOLD;
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	c3 de       	rcall	.-634    	; 0x1b6 <ADC_read>
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	8f 37       	cpi	r24, 0x7F	; 127
 434:	08 f0       	brcs	.+2      	; 0x438 <IR_read+0xc>
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	89 2f       	mov	r24, r25
 43a:	08 95       	ret

0000043c <MCP2551_read_data>:
 43c:	cf 93       	push	r28
 43e:	c8 2f       	mov	r28, r24
 440:	f8 94       	cli
 442:	e8 d0       	rcall	.+464    	; 0x614 <SPI_SS_low>
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	e0 d0       	rcall	.+448    	; 0x608 <SPI_transcieve>
 448:	8c 2f       	mov	r24, r28
 44a:	de d0       	rcall	.+444    	; 0x608 <SPI_transcieve>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	dc d0       	rcall	.+440    	; 0x608 <SPI_transcieve>
 450:	c8 2f       	mov	r28, r24
 452:	e2 d0       	rcall	.+452    	; 0x618 <SPI_SS_high>
 454:	78 94       	sei
 456:	8c 2f       	mov	r24, r28
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <MCP2551_write_data>:
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	c8 2f       	mov	r28, r24
 46a:	7b 01       	movw	r14, r22
 46c:	8a 01       	movw	r16, r20
 46e:	f8 94       	cli
 470:	d1 d0       	rcall	.+418    	; 0x614 <SPI_SS_low>
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	c9 d0       	rcall	.+402    	; 0x608 <SPI_transcieve>
 476:	8c 2f       	mov	r24, r28
 478:	c7 d0       	rcall	.+398    	; 0x608 <SPI_transcieve>
 47a:	10 16       	cp	r1, r16
 47c:	11 06       	cpc	r1, r17
 47e:	44 f4       	brge	.+16     	; 0x490 <MCP2551_write_data+0x34>
 480:	e7 01       	movw	r28, r14
 482:	0e 0d       	add	r16, r14
 484:	1f 1d       	adc	r17, r15
 486:	89 91       	ld	r24, Y+
 488:	bf d0       	rcall	.+382    	; 0x608 <SPI_transcieve>
 48a:	c0 17       	cp	r28, r16
 48c:	d1 07       	cpc	r29, r17
 48e:	d9 f7       	brne	.-10     	; 0x486 <MCP2551_write_data+0x2a>
 490:	c3 d0       	rcall	.+390    	; 0x618 <SPI_SS_high>
 492:	78 94       	sei
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	ff 90       	pop	r15
 49e:	ef 90       	pop	r14
 4a0:	08 95       	ret

000004a2 <MCP2551_request_to_send>:
 4a2:	cf 93       	push	r28
 4a4:	c8 2f       	mov	r28, r24
 4a6:	f8 94       	cli
 4a8:	b5 d0       	rcall	.+362    	; 0x614 <SPI_SS_low>
 4aa:	8c 2f       	mov	r24, r28
 4ac:	87 70       	andi	r24, 0x07	; 7
 4ae:	80 68       	ori	r24, 0x80	; 128
 4b0:	ab d0       	rcall	.+342    	; 0x608 <SPI_transcieve>
 4b2:	b2 d0       	rcall	.+356    	; 0x618 <SPI_SS_high>
 4b4:	78 94       	sei
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <MCP2551_bit_modify>:
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	18 2f       	mov	r17, r24
 4c2:	d6 2f       	mov	r29, r22
 4c4:	c4 2f       	mov	r28, r20
 4c6:	f8 94       	cli
 4c8:	a5 d0       	rcall	.+330    	; 0x614 <SPI_SS_low>
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	9d d0       	rcall	.+314    	; 0x608 <SPI_transcieve>
 4ce:	81 2f       	mov	r24, r17
 4d0:	9b d0       	rcall	.+310    	; 0x608 <SPI_transcieve>
 4d2:	8d 2f       	mov	r24, r29
 4d4:	99 d0       	rcall	.+306    	; 0x608 <SPI_transcieve>
 4d6:	8c 2f       	mov	r24, r28
 4d8:	97 d0       	rcall	.+302    	; 0x608 <SPI_transcieve>
 4da:	9e d0       	rcall	.+316    	; 0x618 <SPI_SS_high>
 4dc:	78 94       	sei
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	08 95       	ret

000004e6 <MCP2551_reset>:
 4e6:	f8 94       	cli
 4e8:	95 d0       	rcall	.+298    	; 0x614 <SPI_SS_low>
 4ea:	80 ec       	ldi	r24, 0xC0	; 192
 4ec:	8d d0       	rcall	.+282    	; 0x608 <SPI_transcieve>
 4ee:	94 d0       	rcall	.+296    	; 0x618 <SPI_SS_high>
 4f0:	78 94       	sei
 4f2:	08 95       	ret

000004f4 <MCP2551_init>:
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	1f 92       	push	r1
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	7d d0       	rcall	.+250    	; 0x5fa <SPI_master_init>
 500:	f2 df       	rcall	.-28     	; 0x4e6 <MCP2551_reset>
 502:	8f e3       	ldi	r24, 0x3F	; 63
 504:	9c e9       	ldi	r25, 0x9C	; 156
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <MCP2551_init+0x12>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <MCP2551_init+0x18>
 50c:	00 00       	nop
 50e:	8e e0       	ldi	r24, 0x0E	; 14
 510:	95 df       	rcall	.-214    	; 0x43c <MCP2551_read_data>
 512:	89 83       	std	Y+1, r24	; 0x01
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	80 7e       	andi	r24, 0xE0	; 224
 518:	80 38       	cpi	r24, 0x80	; 128
 51a:	29 f0       	breq	.+10     	; 0x526 <MCP2551_init+0x32>
 51c:	8c e7       	ldi	r24, 0x7C	; 124
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	30 d3       	rcall	.+1632   	; 0xb82 <puts>
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	01 c0       	rjmp	.+2      	; 0x528 <MCP2551_init+0x34>
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0f 90       	pop	r0
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <MOTOR_init>:

void MOTOR_set_velocity(uint8_t vel) {
	DAC_write(vel);
}

void MOTOR_set_dir(uint8_t dirn) {
 530:	63 df       	rcall	.-314    	; 0x3f8 <DAC_init>
 532:	e1 e0       	ldi	r30, 0x01	; 1
 534:	f1 e0       	ldi	r31, 0x01	; 1
 536:	80 81       	ld	r24, Z
 538:	8a 67       	ori	r24, 0x7A	; 122
 53a:	80 83       	st	Z, r24
 53c:	e2 e0       	ldi	r30, 0x02	; 2
 53e:	f1 e0       	ldi	r31, 0x01	; 1
 540:	80 81       	ld	r24, Z
 542:	82 61       	ori	r24, 0x12	; 18
 544:	80 83       	st	Z, r24
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	59 cf       	rjmp	.-334    	; 0x3fc <DAC_write>
 54a:	08 95       	ret

0000054c <MOTOR_set_velocity>:
 54c:	57 cf       	rjmp	.-338    	; 0x3fc <DAC_write>
 54e:	08 95       	ret

00000550 <MOTOR_stop>:
	MJ1_PORT	|= (1 << EN) | (1 << DIR);
	MOTOR_set_velocity(0);
}

void MOTOR_set_velocity(uint8_t vel) {
	DAC_write(vel);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	54 cf       	rjmp	.-344    	; 0x3fc <DAC_write>
 554:	08 95       	ret

00000556 <PWM_set_pulse_width>:
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	4a e7       	ldi	r20, 0x7A	; 122
 55c:	53 e4       	ldi	r21, 0x43	; 67
 55e:	64 d2       	rcall	.+1224   	; 0xa28 <__mulsf3>
 560:	81 d1       	rcall	.+770    	; 0x864 <__fixunssfsi>
 562:	70 93 89 00 	sts	0x0089, r23
 566:	60 93 88 00 	sts	0x0088, r22
 56a:	08 95       	ret

0000056c <SERVO_write>:
 56c:	cf 92       	push	r12
 56e:	df 92       	push	r13
 570:	ef 92       	push	r14
 572:	ff 92       	push	r15
 574:	68 2f       	mov	r22, r24
 576:	77 27       	eor	r23, r23
 578:	67 fd       	sbrc	r22, 7
 57a:	70 95       	com	r23
 57c:	87 2f       	mov	r24, r23
 57e:	97 2f       	mov	r25, r23
 580:	9f d1       	rcall	.+830    	; 0x8c0 <__floatsisf>
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	48 ec       	ldi	r20, 0xC8	; 200
 588:	52 e4       	ldi	r21, 0x42	; 66
 58a:	04 d1       	rcall	.+520    	; 0x794 <__divsf3>
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	5f e3       	ldi	r21, 0x3F	; 63
 594:	49 d2       	rcall	.+1170   	; 0xa28 <__mulsf3>
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	40 ec       	ldi	r20, 0xC0	; 192
 59c:	5f e3       	ldi	r21, 0x3F	; 63
 59e:	92 d0       	rcall	.+292    	; 0x6c4 <__addsf3>
 5a0:	6b 01       	movw	r12, r22
 5a2:	7c 01       	movw	r14, r24
 5a4:	26 e6       	ldi	r18, 0x66	; 102
 5a6:	36 e6       	ldi	r19, 0x66	; 102
 5a8:	46 e0       	ldi	r20, 0x06	; 6
 5aa:	50 e4       	ldi	r21, 0x40	; 64
 5ac:	39 d2       	rcall	.+1138   	; 0xa20 <__gesf2>
 5ae:	18 16       	cp	r1, r24
 5b0:	54 f0       	brlt	.+20     	; 0x5c6 <SERVO_write+0x5a>
 5b2:	26 e6       	ldi	r18, 0x66	; 102
 5b4:	36 e6       	ldi	r19, 0x66	; 102
 5b6:	46 e6       	ldi	r20, 0x66	; 102
 5b8:	5f e3       	ldi	r21, 0x3F	; 63
 5ba:	c7 01       	movw	r24, r14
 5bc:	b6 01       	movw	r22, r12
 5be:	e6 d0       	rcall	.+460    	; 0x78c <__cmpsf2>
 5c0:	88 23       	and	r24, r24
 5c2:	5c f0       	brlt	.+22     	; 0x5da <SERVO_write+0x6e>
 5c4:	12 c0       	rjmp	.+36     	; 0x5ea <SERVO_write+0x7e>
 5c6:	0f 2e       	mov	r0, r31
 5c8:	f6 e6       	ldi	r31, 0x66	; 102
 5ca:	cf 2e       	mov	r12, r31
 5cc:	dc 2c       	mov	r13, r12
 5ce:	f6 e0       	ldi	r31, 0x06	; 6
 5d0:	ef 2e       	mov	r14, r31
 5d2:	f0 e4       	ldi	r31, 0x40	; 64
 5d4:	ff 2e       	mov	r15, r31
 5d6:	f0 2d       	mov	r31, r0
 5d8:	08 c0       	rjmp	.+16     	; 0x5ea <SERVO_write+0x7e>
 5da:	0f 2e       	mov	r0, r31
 5dc:	f6 e6       	ldi	r31, 0x66	; 102
 5de:	cf 2e       	mov	r12, r31
 5e0:	dc 2c       	mov	r13, r12
 5e2:	ec 2c       	mov	r14, r12
 5e4:	ff e3       	ldi	r31, 0x3F	; 63
 5e6:	ff 2e       	mov	r15, r31
 5e8:	f0 2d       	mov	r31, r0
 5ea:	c7 01       	movw	r24, r14
 5ec:	b6 01       	movw	r22, r12
 5ee:	b3 df       	rcall	.-154    	; 0x556 <PWM_set_pulse_width>
 5f0:	ff 90       	pop	r15
 5f2:	ef 90       	pop	r14
 5f4:	df 90       	pop	r13
 5f6:	cf 90       	pop	r12
 5f8:	08 95       	ret

000005fa <SPI_master_init>:
 5fa:	87 e8       	ldi	r24, 0x87	; 135
 5fc:	84 b9       	out	0x04, r24	; 4
 5fe:	28 9a       	sbi	0x05, 0	; 5
 600:	8c b5       	in	r24, 0x2c	; 44
 602:	81 65       	ori	r24, 0x51	; 81
 604:	8c bd       	out	0x2c, r24	; 44
 606:	08 95       	ret

00000608 <SPI_transcieve>:
 608:	8e bd       	out	0x2e, r24	; 46
 60a:	0d b4       	in	r0, 0x2d	; 45
 60c:	07 fe       	sbrs	r0, 7
 60e:	fd cf       	rjmp	.-6      	; 0x60a <SPI_transcieve+0x2>
 610:	8e b5       	in	r24, 0x2e	; 46
 612:	08 95       	ret

00000614 <SPI_SS_low>:
 614:	2f 98       	cbi	0x05, 7	; 5
 616:	08 95       	ret

00000618 <SPI_SS_high>:
 618:	2f 9a       	sbi	0x05, 7	; 5
 61a:	08 95       	ret

0000061c <TWI_Master_Initialise>:
****************************************************************************/
unsigned char TWI_Get_State_Info( void )
{
  while ( TWI_Transceiver_Busy() );             // Wait until TWI has completed the transmission.
  return ( TWI_state );                         // Return error state.
}
 61c:	8c e0       	ldi	r24, 0x0C	; 12
 61e:	80 93 b8 00 	sts	0x00B8, r24
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	80 93 bb 00 	sts	0x00BB, r24
 628:	84 e0       	ldi	r24, 0x04	; 4
 62a:	80 93 bc 00 	sts	0x00BC, r24
 62e:	08 95       	ret

00000630 <TWI_Start_Transceiver_With_Data>:
/****************************************************************************
Call this function to test if the TWI_ISR is busy transmitting.
****************************************************************************/
unsigned char TWI_Transceiver_Busy( void )
{
  return ( TWCR & (1<<TWIE) );                  // IF TWI Interrupt is enabled then the Transceiver is busy
 630:	ec eb       	ldi	r30, 0xBC	; 188
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	20 81       	ld	r18, Z
then initialize the next operation and return.
****************************************************************************/
void TWI_Start_Transceiver_With_Data( unsigned char *msg, unsigned char msgSize )
{
  unsigned char temp;
  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
 636:	20 fd       	sbrc	r18, 0
 638:	fd cf       	rjmp	.-6      	; 0x634 <TWI_Start_Transceiver_With_Data+0x4>

  TWI_msgSize = msgSize;                        // Number of data to transmit.
 63a:	60 93 af 02 	sts	0x02AF, r22
  TWI_buf[0]  = msg[0];                         // Store slave address with R/W setting.
 63e:	fc 01       	movw	r30, r24
 640:	20 81       	ld	r18, Z
 642:	20 93 b0 02 	sts	0x02B0, r18
  if (!( msg[0] & (TRUE<<TWI_READ_BIT) ))       // If it is a write operation, then also copy data.
 646:	20 fd       	sbrc	r18, 0
 648:	0c c0       	rjmp	.+24     	; 0x662 <TWI_Start_Transceiver_With_Data+0x32>
  {
    for ( temp = 1; temp < msgSize; temp++ )
 64a:	62 30       	cpi	r22, 0x02	; 2
 64c:	50 f0       	brcs	.+20     	; 0x662 <TWI_Start_Transceiver_With_Data+0x32>
 64e:	dc 01       	movw	r26, r24
 650:	11 96       	adiw	r26, 0x01	; 1
 652:	e1 eb       	ldi	r30, 0xB1	; 177
 654:	f2 e0       	ldi	r31, 0x02	; 2
 656:	81 e0       	ldi	r24, 0x01	; 1
      TWI_buf[ temp ] = msg[ temp ];
 658:	9d 91       	ld	r25, X+
 65a:	91 93       	st	Z+, r25

  TWI_msgSize = msgSize;                        // Number of data to transmit.
  TWI_buf[0]  = msg[0];                         // Store slave address with R/W setting.
  if (!( msg[0] & (TRUE<<TWI_READ_BIT) ))       // If it is a write operation, then also copy data.
  {
    for ( temp = 1; temp < msgSize; temp++ )
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	86 13       	cpse	r24, r22
 660:	fb cf       	rjmp	.-10     	; 0x658 <TWI_Start_Transceiver_With_Data+0x28>
      TWI_buf[ temp ] = msg[ temp ];
  }
  TWI_statusReg.all = 0; 
 662:	10 92 ae 02 	sts	0x02AE, r1
  TWI_state         = TWI_NO_STATE ;
 666:	88 ef       	ldi	r24, 0xF8	; 248
 668:	80 93 06 02 	sts	0x0206, r24
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
 66c:	85 e8       	ldi	r24, 0x85	; 133
 66e:	80 93 bc 00 	sts	0x00BC, r24
         (1<<TWIE)|(1<<TWINT)|                  // Enable TWI Interupt and clear the flag.
         (0<<TWEA)/*|(1<<TWSTA)*/|(0<<TWSTO)|       // Initiate a START condition.
         (0<<TWWC);                             //
	printf("HOLMES\n");
 672:	85 e7       	ldi	r24, 0x75	; 117
 674:	92 e0       	ldi	r25, 0x02	; 2
 676:	85 c2       	rjmp	.+1290   	; 0xb82 <puts>
 678:	08 95       	ret

0000067a <UART_transmit>:
 67a:	e0 ec       	ldi	r30, 0xC0	; 192
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	90 81       	ld	r25, Z
 680:	95 ff       	sbrs	r25, 5
 682:	fd cf       	rjmp	.-6      	; 0x67e <UART_transmit+0x4>
 684:	80 93 c6 00 	sts	0x00C6, r24
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	08 95       	ret

0000068e <UART_receive>:
 68e:	e0 ec       	ldi	r30, 0xC0	; 192
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 81       	ld	r24, Z
 694:	88 23       	and	r24, r24
 696:	ec f7       	brge	.-6      	; 0x692 <UART_receive+0x4>
 698:	80 91 c6 00 	lds	r24, 0x00C6
 69c:	08 95       	ret

0000069e <UART_init>:
 69e:	90 93 c5 00 	sts	0x00C5, r25
 6a2:	80 93 c4 00 	sts	0x00C4, r24
 6a6:	88 e1       	ldi	r24, 0x18	; 24
 6a8:	80 93 c1 00 	sts	0x00C1, r24
 6ac:	8e e0       	ldi	r24, 0x0E	; 14
 6ae:	80 93 c2 00 	sts	0x00C2, r24
 6b2:	67 e4       	ldi	r22, 0x47	; 71
 6b4:	73 e0       	ldi	r23, 0x03	; 3
 6b6:	8d e3       	ldi	r24, 0x3D	; 61
 6b8:	93 e0       	ldi	r25, 0x03	; 3
 6ba:	19 d2       	rcall	.+1074   	; 0xaee <fdevopen>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	08 95       	ret

000006c2 <__subsf3>:
 6c2:	50 58       	subi	r21, 0x80	; 128

000006c4 <__addsf3>:
 6c4:	bb 27       	eor	r27, r27
 6c6:	aa 27       	eor	r26, r26
 6c8:	0e d0       	rcall	.+28     	; 0x6e6 <__addsf3x>
 6ca:	70 c1       	rjmp	.+736    	; 0x9ac <__fp_round>
 6cc:	61 d1       	rcall	.+706    	; 0x990 <__fp_pscA>
 6ce:	30 f0       	brcs	.+12     	; 0x6dc <__addsf3+0x18>
 6d0:	66 d1       	rcall	.+716    	; 0x99e <__fp_pscB>
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <__addsf3+0x18>
 6d4:	31 f4       	brne	.+12     	; 0x6e2 <__addsf3+0x1e>
 6d6:	9f 3f       	cpi	r25, 0xFF	; 255
 6d8:	11 f4       	brne	.+4      	; 0x6de <__addsf3+0x1a>
 6da:	1e f4       	brtc	.+6      	; 0x6e2 <__addsf3+0x1e>
 6dc:	56 c1       	rjmp	.+684    	; 0x98a <__fp_nan>
 6de:	0e f4       	brtc	.+2      	; 0x6e2 <__addsf3+0x1e>
 6e0:	e0 95       	com	r30
 6e2:	e7 fb       	bst	r30, 7
 6e4:	4c c1       	rjmp	.+664    	; 0x97e <__fp_inf>

000006e6 <__addsf3x>:
 6e6:	e9 2f       	mov	r30, r25
 6e8:	72 d1       	rcall	.+740    	; 0x9ce <__fp_split3>
 6ea:	80 f3       	brcs	.-32     	; 0x6cc <__addsf3+0x8>
 6ec:	ba 17       	cp	r27, r26
 6ee:	62 07       	cpc	r22, r18
 6f0:	73 07       	cpc	r23, r19
 6f2:	84 07       	cpc	r24, r20
 6f4:	95 07       	cpc	r25, r21
 6f6:	18 f0       	brcs	.+6      	; 0x6fe <__addsf3x+0x18>
 6f8:	71 f4       	brne	.+28     	; 0x716 <__addsf3x+0x30>
 6fa:	9e f5       	brtc	.+102    	; 0x762 <__addsf3x+0x7c>
 6fc:	8a c1       	rjmp	.+788    	; 0xa12 <__fp_zero>
 6fe:	0e f4       	brtc	.+2      	; 0x702 <__addsf3x+0x1c>
 700:	e0 95       	com	r30
 702:	0b 2e       	mov	r0, r27
 704:	ba 2f       	mov	r27, r26
 706:	a0 2d       	mov	r26, r0
 708:	0b 01       	movw	r0, r22
 70a:	b9 01       	movw	r22, r18
 70c:	90 01       	movw	r18, r0
 70e:	0c 01       	movw	r0, r24
 710:	ca 01       	movw	r24, r20
 712:	a0 01       	movw	r20, r0
 714:	11 24       	eor	r1, r1
 716:	ff 27       	eor	r31, r31
 718:	59 1b       	sub	r21, r25
 71a:	99 f0       	breq	.+38     	; 0x742 <__addsf3x+0x5c>
 71c:	59 3f       	cpi	r21, 0xF9	; 249
 71e:	50 f4       	brcc	.+20     	; 0x734 <__addsf3x+0x4e>
 720:	50 3e       	cpi	r21, 0xE0	; 224
 722:	68 f1       	brcs	.+90     	; 0x77e <__addsf3x+0x98>
 724:	1a 16       	cp	r1, r26
 726:	f0 40       	sbci	r31, 0x00	; 0
 728:	a2 2f       	mov	r26, r18
 72a:	23 2f       	mov	r18, r19
 72c:	34 2f       	mov	r19, r20
 72e:	44 27       	eor	r20, r20
 730:	58 5f       	subi	r21, 0xF8	; 248
 732:	f3 cf       	rjmp	.-26     	; 0x71a <__addsf3x+0x34>
 734:	46 95       	lsr	r20
 736:	37 95       	ror	r19
 738:	27 95       	ror	r18
 73a:	a7 95       	ror	r26
 73c:	f0 40       	sbci	r31, 0x00	; 0
 73e:	53 95       	inc	r21
 740:	c9 f7       	brne	.-14     	; 0x734 <__addsf3x+0x4e>
 742:	7e f4       	brtc	.+30     	; 0x762 <__addsf3x+0x7c>
 744:	1f 16       	cp	r1, r31
 746:	ba 0b       	sbc	r27, r26
 748:	62 0b       	sbc	r22, r18
 74a:	73 0b       	sbc	r23, r19
 74c:	84 0b       	sbc	r24, r20
 74e:	ba f0       	brmi	.+46     	; 0x77e <__addsf3x+0x98>
 750:	91 50       	subi	r25, 0x01	; 1
 752:	a1 f0       	breq	.+40     	; 0x77c <__addsf3x+0x96>
 754:	ff 0f       	add	r31, r31
 756:	bb 1f       	adc	r27, r27
 758:	66 1f       	adc	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	c2 f7       	brpl	.-16     	; 0x750 <__addsf3x+0x6a>
 760:	0e c0       	rjmp	.+28     	; 0x77e <__addsf3x+0x98>
 762:	ba 0f       	add	r27, r26
 764:	62 1f       	adc	r22, r18
 766:	73 1f       	adc	r23, r19
 768:	84 1f       	adc	r24, r20
 76a:	48 f4       	brcc	.+18     	; 0x77e <__addsf3x+0x98>
 76c:	87 95       	ror	r24
 76e:	77 95       	ror	r23
 770:	67 95       	ror	r22
 772:	b7 95       	ror	r27
 774:	f7 95       	ror	r31
 776:	9e 3f       	cpi	r25, 0xFE	; 254
 778:	08 f0       	brcs	.+2      	; 0x77c <__addsf3x+0x96>
 77a:	b3 cf       	rjmp	.-154    	; 0x6e2 <__addsf3+0x1e>
 77c:	93 95       	inc	r25
 77e:	88 0f       	add	r24, r24
 780:	08 f0       	brcs	.+2      	; 0x784 <__addsf3x+0x9e>
 782:	99 27       	eor	r25, r25
 784:	ee 0f       	add	r30, r30
 786:	97 95       	ror	r25
 788:	87 95       	ror	r24
 78a:	08 95       	ret

0000078c <__cmpsf2>:
 78c:	d4 d0       	rcall	.+424    	; 0x936 <__fp_cmp>
 78e:	08 f4       	brcc	.+2      	; 0x792 <__cmpsf2+0x6>
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	08 95       	ret

00000794 <__divsf3>:
 794:	0c d0       	rcall	.+24     	; 0x7ae <__divsf3x>
 796:	0a c1       	rjmp	.+532    	; 0x9ac <__fp_round>
 798:	02 d1       	rcall	.+516    	; 0x99e <__fp_pscB>
 79a:	40 f0       	brcs	.+16     	; 0x7ac <__divsf3+0x18>
 79c:	f9 d0       	rcall	.+498    	; 0x990 <__fp_pscA>
 79e:	30 f0       	brcs	.+12     	; 0x7ac <__divsf3+0x18>
 7a0:	21 f4       	brne	.+8      	; 0x7aa <__divsf3+0x16>
 7a2:	5f 3f       	cpi	r21, 0xFF	; 255
 7a4:	19 f0       	breq	.+6      	; 0x7ac <__divsf3+0x18>
 7a6:	eb c0       	rjmp	.+470    	; 0x97e <__fp_inf>
 7a8:	51 11       	cpse	r21, r1
 7aa:	34 c1       	rjmp	.+616    	; 0xa14 <__fp_szero>
 7ac:	ee c0       	rjmp	.+476    	; 0x98a <__fp_nan>

000007ae <__divsf3x>:
 7ae:	0f d1       	rcall	.+542    	; 0x9ce <__fp_split3>
 7b0:	98 f3       	brcs	.-26     	; 0x798 <__divsf3+0x4>

000007b2 <__divsf3_pse>:
 7b2:	99 23       	and	r25, r25
 7b4:	c9 f3       	breq	.-14     	; 0x7a8 <__divsf3+0x14>
 7b6:	55 23       	and	r21, r21
 7b8:	b1 f3       	breq	.-20     	; 0x7a6 <__divsf3+0x12>
 7ba:	95 1b       	sub	r25, r21
 7bc:	55 0b       	sbc	r21, r21
 7be:	bb 27       	eor	r27, r27
 7c0:	aa 27       	eor	r26, r26
 7c2:	62 17       	cp	r22, r18
 7c4:	73 07       	cpc	r23, r19
 7c6:	84 07       	cpc	r24, r20
 7c8:	38 f0       	brcs	.+14     	; 0x7d8 <__divsf3_pse+0x26>
 7ca:	9f 5f       	subi	r25, 0xFF	; 255
 7cc:	5f 4f       	sbci	r21, 0xFF	; 255
 7ce:	22 0f       	add	r18, r18
 7d0:	33 1f       	adc	r19, r19
 7d2:	44 1f       	adc	r20, r20
 7d4:	aa 1f       	adc	r26, r26
 7d6:	a9 f3       	breq	.-22     	; 0x7c2 <__divsf3_pse+0x10>
 7d8:	33 d0       	rcall	.+102    	; 0x840 <__divsf3_pse+0x8e>
 7da:	0e 2e       	mov	r0, r30
 7dc:	3a f0       	brmi	.+14     	; 0x7ec <__divsf3_pse+0x3a>
 7de:	e0 e8       	ldi	r30, 0x80	; 128
 7e0:	30 d0       	rcall	.+96     	; 0x842 <__divsf3_pse+0x90>
 7e2:	91 50       	subi	r25, 0x01	; 1
 7e4:	50 40       	sbci	r21, 0x00	; 0
 7e6:	e6 95       	lsr	r30
 7e8:	00 1c       	adc	r0, r0
 7ea:	ca f7       	brpl	.-14     	; 0x7de <__divsf3_pse+0x2c>
 7ec:	29 d0       	rcall	.+82     	; 0x840 <__divsf3_pse+0x8e>
 7ee:	fe 2f       	mov	r31, r30
 7f0:	27 d0       	rcall	.+78     	; 0x840 <__divsf3_pse+0x8e>
 7f2:	66 0f       	add	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 1f       	adc	r24, r24
 7f8:	bb 1f       	adc	r27, r27
 7fa:	26 17       	cp	r18, r22
 7fc:	37 07       	cpc	r19, r23
 7fe:	48 07       	cpc	r20, r24
 800:	ab 07       	cpc	r26, r27
 802:	b0 e8       	ldi	r27, 0x80	; 128
 804:	09 f0       	breq	.+2      	; 0x808 <__divsf3_pse+0x56>
 806:	bb 0b       	sbc	r27, r27
 808:	80 2d       	mov	r24, r0
 80a:	bf 01       	movw	r22, r30
 80c:	ff 27       	eor	r31, r31
 80e:	93 58       	subi	r25, 0x83	; 131
 810:	5f 4f       	sbci	r21, 0xFF	; 255
 812:	2a f0       	brmi	.+10     	; 0x81e <__divsf3_pse+0x6c>
 814:	9e 3f       	cpi	r25, 0xFE	; 254
 816:	51 05       	cpc	r21, r1
 818:	68 f0       	brcs	.+26     	; 0x834 <__divsf3_pse+0x82>
 81a:	b1 c0       	rjmp	.+354    	; 0x97e <__fp_inf>
 81c:	fb c0       	rjmp	.+502    	; 0xa14 <__fp_szero>
 81e:	5f 3f       	cpi	r21, 0xFF	; 255
 820:	ec f3       	brlt	.-6      	; 0x81c <__divsf3_pse+0x6a>
 822:	98 3e       	cpi	r25, 0xE8	; 232
 824:	dc f3       	brlt	.-10     	; 0x81c <__divsf3_pse+0x6a>
 826:	86 95       	lsr	r24
 828:	77 95       	ror	r23
 82a:	67 95       	ror	r22
 82c:	b7 95       	ror	r27
 82e:	f7 95       	ror	r31
 830:	9f 5f       	subi	r25, 0xFF	; 255
 832:	c9 f7       	brne	.-14     	; 0x826 <__divsf3_pse+0x74>
 834:	88 0f       	add	r24, r24
 836:	91 1d       	adc	r25, r1
 838:	96 95       	lsr	r25
 83a:	87 95       	ror	r24
 83c:	97 f9       	bld	r25, 7
 83e:	08 95       	ret
 840:	e1 e0       	ldi	r30, 0x01	; 1
 842:	66 0f       	add	r22, r22
 844:	77 1f       	adc	r23, r23
 846:	88 1f       	adc	r24, r24
 848:	bb 1f       	adc	r27, r27
 84a:	62 17       	cp	r22, r18
 84c:	73 07       	cpc	r23, r19
 84e:	84 07       	cpc	r24, r20
 850:	ba 07       	cpc	r27, r26
 852:	20 f0       	brcs	.+8      	; 0x85c <__divsf3_pse+0xaa>
 854:	62 1b       	sub	r22, r18
 856:	73 0b       	sbc	r23, r19
 858:	84 0b       	sbc	r24, r20
 85a:	ba 0b       	sbc	r27, r26
 85c:	ee 1f       	adc	r30, r30
 85e:	88 f7       	brcc	.-30     	; 0x842 <__divsf3_pse+0x90>
 860:	e0 95       	com	r30
 862:	08 95       	ret

00000864 <__fixunssfsi>:
 864:	bc d0       	rcall	.+376    	; 0x9de <__fp_splitA>
 866:	88 f0       	brcs	.+34     	; 0x88a <__fixunssfsi+0x26>
 868:	9f 57       	subi	r25, 0x7F	; 127
 86a:	90 f0       	brcs	.+36     	; 0x890 <__fixunssfsi+0x2c>
 86c:	b9 2f       	mov	r27, r25
 86e:	99 27       	eor	r25, r25
 870:	b7 51       	subi	r27, 0x17	; 23
 872:	a0 f0       	brcs	.+40     	; 0x89c <__fixunssfsi+0x38>
 874:	d1 f0       	breq	.+52     	; 0x8aa <__fixunssfsi+0x46>
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	88 1f       	adc	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	1a f0       	brmi	.+6      	; 0x886 <__fixunssfsi+0x22>
 880:	ba 95       	dec	r27
 882:	c9 f7       	brne	.-14     	; 0x876 <__fixunssfsi+0x12>
 884:	12 c0       	rjmp	.+36     	; 0x8aa <__fixunssfsi+0x46>
 886:	b1 30       	cpi	r27, 0x01	; 1
 888:	81 f0       	breq	.+32     	; 0x8aa <__fixunssfsi+0x46>
 88a:	c3 d0       	rcall	.+390    	; 0xa12 <__fp_zero>
 88c:	b1 e0       	ldi	r27, 0x01	; 1
 88e:	08 95       	ret
 890:	c0 c0       	rjmp	.+384    	; 0xa12 <__fp_zero>
 892:	67 2f       	mov	r22, r23
 894:	78 2f       	mov	r23, r24
 896:	88 27       	eor	r24, r24
 898:	b8 5f       	subi	r27, 0xF8	; 248
 89a:	39 f0       	breq	.+14     	; 0x8aa <__fixunssfsi+0x46>
 89c:	b9 3f       	cpi	r27, 0xF9	; 249
 89e:	cc f3       	brlt	.-14     	; 0x892 <__fixunssfsi+0x2e>
 8a0:	86 95       	lsr	r24
 8a2:	77 95       	ror	r23
 8a4:	67 95       	ror	r22
 8a6:	b3 95       	inc	r27
 8a8:	d9 f7       	brne	.-10     	; 0x8a0 <__fixunssfsi+0x3c>
 8aa:	3e f4       	brtc	.+14     	; 0x8ba <__fixunssfsi+0x56>
 8ac:	90 95       	com	r25
 8ae:	80 95       	com	r24
 8b0:	70 95       	com	r23
 8b2:	61 95       	neg	r22
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	8f 4f       	sbci	r24, 0xFF	; 255
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	08 95       	ret

000008bc <__floatunsisf>:
 8bc:	e8 94       	clt
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__floatsisf+0x12>

000008c0 <__floatsisf>:
 8c0:	97 fb       	bst	r25, 7
 8c2:	3e f4       	brtc	.+14     	; 0x8d2 <__floatsisf+0x12>
 8c4:	90 95       	com	r25
 8c6:	80 95       	com	r24
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	8f 4f       	sbci	r24, 0xFF	; 255
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	99 23       	and	r25, r25
 8d4:	a9 f0       	breq	.+42     	; 0x900 <__floatsisf+0x40>
 8d6:	f9 2f       	mov	r31, r25
 8d8:	96 e9       	ldi	r25, 0x96	; 150
 8da:	bb 27       	eor	r27, r27
 8dc:	93 95       	inc	r25
 8de:	f6 95       	lsr	r31
 8e0:	87 95       	ror	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	b7 95       	ror	r27
 8e8:	f1 11       	cpse	r31, r1
 8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <__floatsisf+0x1c>
 8ec:	fa f4       	brpl	.+62     	; 0x92c <__floatsisf+0x6c>
 8ee:	bb 0f       	add	r27, r27
 8f0:	11 f4       	brne	.+4      	; 0x8f6 <__floatsisf+0x36>
 8f2:	60 ff       	sbrs	r22, 0
 8f4:	1b c0       	rjmp	.+54     	; 0x92c <__floatsisf+0x6c>
 8f6:	6f 5f       	subi	r22, 0xFF	; 255
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	16 c0       	rjmp	.+44     	; 0x92c <__floatsisf+0x6c>
 900:	88 23       	and	r24, r24
 902:	11 f0       	breq	.+4      	; 0x908 <__floatsisf+0x48>
 904:	96 e9       	ldi	r25, 0x96	; 150
 906:	11 c0       	rjmp	.+34     	; 0x92a <__floatsisf+0x6a>
 908:	77 23       	and	r23, r23
 90a:	21 f0       	breq	.+8      	; 0x914 <__floatsisf+0x54>
 90c:	9e e8       	ldi	r25, 0x8E	; 142
 90e:	87 2f       	mov	r24, r23
 910:	76 2f       	mov	r23, r22
 912:	05 c0       	rjmp	.+10     	; 0x91e <__floatsisf+0x5e>
 914:	66 23       	and	r22, r22
 916:	71 f0       	breq	.+28     	; 0x934 <__floatsisf+0x74>
 918:	96 e8       	ldi	r25, 0x86	; 134
 91a:	86 2f       	mov	r24, r22
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	2a f0       	brmi	.+10     	; 0x92c <__floatsisf+0x6c>
 922:	9a 95       	dec	r25
 924:	66 0f       	add	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	da f7       	brpl	.-10     	; 0x922 <__floatsisf+0x62>
 92c:	88 0f       	add	r24, r24
 92e:	96 95       	lsr	r25
 930:	87 95       	ror	r24
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret

00000936 <__fp_cmp>:
 936:	99 0f       	add	r25, r25
 938:	00 08       	sbc	r0, r0
 93a:	55 0f       	add	r21, r21
 93c:	aa 0b       	sbc	r26, r26
 93e:	e0 e8       	ldi	r30, 0x80	; 128
 940:	fe ef       	ldi	r31, 0xFE	; 254
 942:	16 16       	cp	r1, r22
 944:	17 06       	cpc	r1, r23
 946:	e8 07       	cpc	r30, r24
 948:	f9 07       	cpc	r31, r25
 94a:	c0 f0       	brcs	.+48     	; 0x97c <__fp_cmp+0x46>
 94c:	12 16       	cp	r1, r18
 94e:	13 06       	cpc	r1, r19
 950:	e4 07       	cpc	r30, r20
 952:	f5 07       	cpc	r31, r21
 954:	98 f0       	brcs	.+38     	; 0x97c <__fp_cmp+0x46>
 956:	62 1b       	sub	r22, r18
 958:	73 0b       	sbc	r23, r19
 95a:	84 0b       	sbc	r24, r20
 95c:	95 0b       	sbc	r25, r21
 95e:	39 f4       	brne	.+14     	; 0x96e <__fp_cmp+0x38>
 960:	0a 26       	eor	r0, r26
 962:	61 f0       	breq	.+24     	; 0x97c <__fp_cmp+0x46>
 964:	23 2b       	or	r18, r19
 966:	24 2b       	or	r18, r20
 968:	25 2b       	or	r18, r21
 96a:	21 f4       	brne	.+8      	; 0x974 <__fp_cmp+0x3e>
 96c:	08 95       	ret
 96e:	0a 26       	eor	r0, r26
 970:	09 f4       	brne	.+2      	; 0x974 <__fp_cmp+0x3e>
 972:	a1 40       	sbci	r26, 0x01	; 1
 974:	a6 95       	lsr	r26
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	81 1d       	adc	r24, r1
 97a:	81 1d       	adc	r24, r1
 97c:	08 95       	ret

0000097e <__fp_inf>:
 97e:	97 f9       	bld	r25, 7
 980:	9f 67       	ori	r25, 0x7F	; 127
 982:	80 e8       	ldi	r24, 0x80	; 128
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	08 95       	ret

0000098a <__fp_nan>:
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	80 ec       	ldi	r24, 0xC0	; 192
 98e:	08 95       	ret

00000990 <__fp_pscA>:
 990:	00 24       	eor	r0, r0
 992:	0a 94       	dec	r0
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	09 06       	cpc	r0, r25
 99c:	08 95       	ret

0000099e <__fp_pscB>:
 99e:	00 24       	eor	r0, r0
 9a0:	0a 94       	dec	r0
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	14 06       	cpc	r1, r20
 9a8:	05 06       	cpc	r0, r21
 9aa:	08 95       	ret

000009ac <__fp_round>:
 9ac:	09 2e       	mov	r0, r25
 9ae:	03 94       	inc	r0
 9b0:	00 0c       	add	r0, r0
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__fp_round+0xc>
 9b4:	88 23       	and	r24, r24
 9b6:	52 f0       	brmi	.+20     	; 0x9cc <__fp_round+0x20>
 9b8:	bb 0f       	add	r27, r27
 9ba:	40 f4       	brcc	.+16     	; 0x9cc <__fp_round+0x20>
 9bc:	bf 2b       	or	r27, r31
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0x18>
 9c0:	60 ff       	sbrs	r22, 0
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__fp_round+0x20>
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__fp_split3>:
 9ce:	57 fd       	sbrc	r21, 7
 9d0:	90 58       	subi	r25, 0x80	; 128
 9d2:	44 0f       	add	r20, r20
 9d4:	55 1f       	adc	r21, r21
 9d6:	59 f0       	breq	.+22     	; 0x9ee <__fp_splitA+0x10>
 9d8:	5f 3f       	cpi	r21, 0xFF	; 255
 9da:	71 f0       	breq	.+28     	; 0x9f8 <__fp_splitA+0x1a>
 9dc:	47 95       	ror	r20

000009de <__fp_splitA>:
 9de:	88 0f       	add	r24, r24
 9e0:	97 fb       	bst	r25, 7
 9e2:	99 1f       	adc	r25, r25
 9e4:	61 f0       	breq	.+24     	; 0x9fe <__fp_splitA+0x20>
 9e6:	9f 3f       	cpi	r25, 0xFF	; 255
 9e8:	79 f0       	breq	.+30     	; 0xa08 <__fp_splitA+0x2a>
 9ea:	87 95       	ror	r24
 9ec:	08 95       	ret
 9ee:	12 16       	cp	r1, r18
 9f0:	13 06       	cpc	r1, r19
 9f2:	14 06       	cpc	r1, r20
 9f4:	55 1f       	adc	r21, r21
 9f6:	f2 cf       	rjmp	.-28     	; 0x9dc <__fp_split3+0xe>
 9f8:	46 95       	lsr	r20
 9fa:	f1 df       	rcall	.-30     	; 0x9de <__fp_splitA>
 9fc:	08 c0       	rjmp	.+16     	; 0xa0e <__fp_splitA+0x30>
 9fe:	16 16       	cp	r1, r22
 a00:	17 06       	cpc	r1, r23
 a02:	18 06       	cpc	r1, r24
 a04:	99 1f       	adc	r25, r25
 a06:	f1 cf       	rjmp	.-30     	; 0x9ea <__fp_splitA+0xc>
 a08:	86 95       	lsr	r24
 a0a:	71 05       	cpc	r23, r1
 a0c:	61 05       	cpc	r22, r1
 a0e:	08 94       	sec
 a10:	08 95       	ret

00000a12 <__fp_zero>:
 a12:	e8 94       	clt

00000a14 <__fp_szero>:
 a14:	bb 27       	eor	r27, r27
 a16:	66 27       	eor	r22, r22
 a18:	77 27       	eor	r23, r23
 a1a:	cb 01       	movw	r24, r22
 a1c:	97 f9       	bld	r25, 7
 a1e:	08 95       	ret

00000a20 <__gesf2>:
 a20:	8a df       	rcall	.-236    	; 0x936 <__fp_cmp>
 a22:	08 f4       	brcc	.+2      	; 0xa26 <__gesf2+0x6>
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	08 95       	ret

00000a28 <__mulsf3>:
 a28:	0b d0       	rcall	.+22     	; 0xa40 <__mulsf3x>
 a2a:	c0 cf       	rjmp	.-128    	; 0x9ac <__fp_round>
 a2c:	b1 df       	rcall	.-158    	; 0x990 <__fp_pscA>
 a2e:	28 f0       	brcs	.+10     	; 0xa3a <__mulsf3+0x12>
 a30:	b6 df       	rcall	.-148    	; 0x99e <__fp_pscB>
 a32:	18 f0       	brcs	.+6      	; 0xa3a <__mulsf3+0x12>
 a34:	95 23       	and	r25, r21
 a36:	09 f0       	breq	.+2      	; 0xa3a <__mulsf3+0x12>
 a38:	a2 cf       	rjmp	.-188    	; 0x97e <__fp_inf>
 a3a:	a7 cf       	rjmp	.-178    	; 0x98a <__fp_nan>
 a3c:	11 24       	eor	r1, r1
 a3e:	ea cf       	rjmp	.-44     	; 0xa14 <__fp_szero>

00000a40 <__mulsf3x>:
 a40:	c6 df       	rcall	.-116    	; 0x9ce <__fp_split3>
 a42:	a0 f3       	brcs	.-24     	; 0xa2c <__mulsf3+0x4>

00000a44 <__mulsf3_pse>:
 a44:	95 9f       	mul	r25, r21
 a46:	d1 f3       	breq	.-12     	; 0xa3c <__mulsf3+0x14>
 a48:	95 0f       	add	r25, r21
 a4a:	50 e0       	ldi	r21, 0x00	; 0
 a4c:	55 1f       	adc	r21, r21
 a4e:	62 9f       	mul	r22, r18
 a50:	f0 01       	movw	r30, r0
 a52:	72 9f       	mul	r23, r18
 a54:	bb 27       	eor	r27, r27
 a56:	f0 0d       	add	r31, r0
 a58:	b1 1d       	adc	r27, r1
 a5a:	63 9f       	mul	r22, r19
 a5c:	aa 27       	eor	r26, r26
 a5e:	f0 0d       	add	r31, r0
 a60:	b1 1d       	adc	r27, r1
 a62:	aa 1f       	adc	r26, r26
 a64:	64 9f       	mul	r22, r20
 a66:	66 27       	eor	r22, r22
 a68:	b0 0d       	add	r27, r0
 a6a:	a1 1d       	adc	r26, r1
 a6c:	66 1f       	adc	r22, r22
 a6e:	82 9f       	mul	r24, r18
 a70:	22 27       	eor	r18, r18
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	62 1f       	adc	r22, r18
 a78:	73 9f       	mul	r23, r19
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	62 1f       	adc	r22, r18
 a80:	83 9f       	mul	r24, r19
 a82:	a0 0d       	add	r26, r0
 a84:	61 1d       	adc	r22, r1
 a86:	22 1f       	adc	r18, r18
 a88:	74 9f       	mul	r23, r20
 a8a:	33 27       	eor	r19, r19
 a8c:	a0 0d       	add	r26, r0
 a8e:	61 1d       	adc	r22, r1
 a90:	23 1f       	adc	r18, r19
 a92:	84 9f       	mul	r24, r20
 a94:	60 0d       	add	r22, r0
 a96:	21 1d       	adc	r18, r1
 a98:	82 2f       	mov	r24, r18
 a9a:	76 2f       	mov	r23, r22
 a9c:	6a 2f       	mov	r22, r26
 a9e:	11 24       	eor	r1, r1
 aa0:	9f 57       	subi	r25, 0x7F	; 127
 aa2:	50 40       	sbci	r21, 0x00	; 0
 aa4:	8a f0       	brmi	.+34     	; 0xac8 <__mulsf3_pse+0x84>
 aa6:	e1 f0       	breq	.+56     	; 0xae0 <__mulsf3_pse+0x9c>
 aa8:	88 23       	and	r24, r24
 aaa:	4a f0       	brmi	.+18     	; 0xabe <__mulsf3_pse+0x7a>
 aac:	ee 0f       	add	r30, r30
 aae:	ff 1f       	adc	r31, r31
 ab0:	bb 1f       	adc	r27, r27
 ab2:	66 1f       	adc	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	91 50       	subi	r25, 0x01	; 1
 aba:	50 40       	sbci	r21, 0x00	; 0
 abc:	a9 f7       	brne	.-22     	; 0xaa8 <__mulsf3_pse+0x64>
 abe:	9e 3f       	cpi	r25, 0xFE	; 254
 ac0:	51 05       	cpc	r21, r1
 ac2:	70 f0       	brcs	.+28     	; 0xae0 <__mulsf3_pse+0x9c>
 ac4:	5c cf       	rjmp	.-328    	; 0x97e <__fp_inf>
 ac6:	a6 cf       	rjmp	.-180    	; 0xa14 <__fp_szero>
 ac8:	5f 3f       	cpi	r21, 0xFF	; 255
 aca:	ec f3       	brlt	.-6      	; 0xac6 <__mulsf3_pse+0x82>
 acc:	98 3e       	cpi	r25, 0xE8	; 232
 ace:	dc f3       	brlt	.-10     	; 0xac6 <__mulsf3_pse+0x82>
 ad0:	86 95       	lsr	r24
 ad2:	77 95       	ror	r23
 ad4:	67 95       	ror	r22
 ad6:	b7 95       	ror	r27
 ad8:	f7 95       	ror	r31
 ada:	e7 95       	ror	r30
 adc:	9f 5f       	subi	r25, 0xFF	; 255
 ade:	c1 f7       	brne	.-16     	; 0xad0 <__mulsf3_pse+0x8c>
 ae0:	fe 2b       	or	r31, r30
 ae2:	88 0f       	add	r24, r24
 ae4:	91 1d       	adc	r25, r1
 ae6:	96 95       	lsr	r25
 ae8:	87 95       	ror	r24
 aea:	97 f9       	bld	r25, 7
 aec:	08 95       	ret

00000aee <fdevopen>:
 aee:	0f 93       	push	r16
 af0:	1f 93       	push	r17
 af2:	cf 93       	push	r28
 af4:	df 93       	push	r29
 af6:	ec 01       	movw	r28, r24
 af8:	8b 01       	movw	r16, r22
 afa:	00 97       	sbiw	r24, 0x00	; 0
 afc:	31 f4       	brne	.+12     	; 0xb0a <fdevopen+0x1c>
 afe:	61 15       	cp	r22, r1
 b00:	71 05       	cpc	r23, r1
 b02:	19 f4       	brne	.+6      	; 0xb0a <fdevopen+0x1c>
 b04:	80 e0       	ldi	r24, 0x00	; 0
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	37 c0       	rjmp	.+110    	; 0xb78 <fdevopen+0x8a>
 b0a:	6e e0       	ldi	r22, 0x0E	; 14
 b0c:	70 e0       	ldi	r23, 0x00	; 0
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	64 d0       	rcall	.+200    	; 0xbdc <calloc>
 b14:	fc 01       	movw	r30, r24
 b16:	00 97       	sbiw	r24, 0x00	; 0
 b18:	a9 f3       	breq	.-22     	; 0xb04 <fdevopen+0x16>
 b1a:	80 e8       	ldi	r24, 0x80	; 128
 b1c:	83 83       	std	Z+3, r24	; 0x03
 b1e:	01 15       	cp	r16, r1
 b20:	11 05       	cpc	r17, r1
 b22:	71 f0       	breq	.+28     	; 0xb40 <fdevopen+0x52>
 b24:	13 87       	std	Z+11, r17	; 0x0b
 b26:	02 87       	std	Z+10, r16	; 0x0a
 b28:	81 e8       	ldi	r24, 0x81	; 129
 b2a:	83 83       	std	Z+3, r24	; 0x03
 b2c:	80 91 b5 02 	lds	r24, 0x02B5
 b30:	90 91 b6 02 	lds	r25, 0x02B6
 b34:	89 2b       	or	r24, r25
 b36:	21 f4       	brne	.+8      	; 0xb40 <fdevopen+0x52>
 b38:	f0 93 b6 02 	sts	0x02B6, r31
 b3c:	e0 93 b5 02 	sts	0x02B5, r30
 b40:	20 97       	sbiw	r28, 0x00	; 0
 b42:	c9 f0       	breq	.+50     	; 0xb76 <fdevopen+0x88>
 b44:	d1 87       	std	Z+9, r29	; 0x09
 b46:	c0 87       	std	Z+8, r28	; 0x08
 b48:	83 81       	ldd	r24, Z+3	; 0x03
 b4a:	82 60       	ori	r24, 0x02	; 2
 b4c:	83 83       	std	Z+3, r24	; 0x03
 b4e:	80 91 b7 02 	lds	r24, 0x02B7
 b52:	90 91 b8 02 	lds	r25, 0x02B8
 b56:	89 2b       	or	r24, r25
 b58:	71 f4       	brne	.+28     	; 0xb76 <fdevopen+0x88>
 b5a:	f0 93 b8 02 	sts	0x02B8, r31
 b5e:	e0 93 b7 02 	sts	0x02B7, r30
 b62:	80 91 b9 02 	lds	r24, 0x02B9
 b66:	90 91 ba 02 	lds	r25, 0x02BA
 b6a:	89 2b       	or	r24, r25
 b6c:	21 f4       	brne	.+8      	; 0xb76 <fdevopen+0x88>
 b6e:	f0 93 ba 02 	sts	0x02BA, r31
 b72:	e0 93 b9 02 	sts	0x02B9, r30
 b76:	cf 01       	movw	r24, r30
 b78:	df 91       	pop	r29
 b7a:	cf 91       	pop	r28
 b7c:	1f 91       	pop	r17
 b7e:	0f 91       	pop	r16
 b80:	08 95       	ret

00000b82 <puts>:
 b82:	0f 93       	push	r16
 b84:	1f 93       	push	r17
 b86:	cf 93       	push	r28
 b88:	df 93       	push	r29
 b8a:	e0 91 b7 02 	lds	r30, 0x02B7
 b8e:	f0 91 b8 02 	lds	r31, 0x02B8
 b92:	23 81       	ldd	r18, Z+3	; 0x03
 b94:	21 ff       	sbrs	r18, 1
 b96:	1b c0       	rjmp	.+54     	; 0xbce <puts+0x4c>
 b98:	ec 01       	movw	r28, r24
 b9a:	00 e0       	ldi	r16, 0x00	; 0
 b9c:	10 e0       	ldi	r17, 0x00	; 0
 b9e:	89 91       	ld	r24, Y+
 ba0:	60 91 b7 02 	lds	r22, 0x02B7
 ba4:	70 91 b8 02 	lds	r23, 0x02B8
 ba8:	db 01       	movw	r26, r22
 baa:	18 96       	adiw	r26, 0x08	; 8
 bac:	ed 91       	ld	r30, X+
 bae:	fc 91       	ld	r31, X
 bb0:	19 97       	sbiw	r26, 0x09	; 9
 bb2:	88 23       	and	r24, r24
 bb4:	31 f0       	breq	.+12     	; 0xbc2 <puts+0x40>
 bb6:	19 95       	eicall
 bb8:	89 2b       	or	r24, r25
 bba:	89 f3       	breq	.-30     	; 0xb9e <puts+0x1c>
 bbc:	0f ef       	ldi	r16, 0xFF	; 255
 bbe:	1f ef       	ldi	r17, 0xFF	; 255
 bc0:	ee cf       	rjmp	.-36     	; 0xb9e <puts+0x1c>
 bc2:	8a e0       	ldi	r24, 0x0A	; 10
 bc4:	19 95       	eicall
 bc6:	89 2b       	or	r24, r25
 bc8:	11 f4       	brne	.+4      	; 0xbce <puts+0x4c>
 bca:	c8 01       	movw	r24, r16
 bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <puts+0x50>
 bce:	8f ef       	ldi	r24, 0xFF	; 255
 bd0:	9f ef       	ldi	r25, 0xFF	; 255
 bd2:	df 91       	pop	r29
 bd4:	cf 91       	pop	r28
 bd6:	1f 91       	pop	r17
 bd8:	0f 91       	pop	r16
 bda:	08 95       	ret

00000bdc <calloc>:
 bdc:	0f 93       	push	r16
 bde:	1f 93       	push	r17
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	86 9f       	mul	r24, r22
 be6:	80 01       	movw	r16, r0
 be8:	87 9f       	mul	r24, r23
 bea:	10 0d       	add	r17, r0
 bec:	96 9f       	mul	r25, r22
 bee:	10 0d       	add	r17, r0
 bf0:	11 24       	eor	r1, r1
 bf2:	c8 01       	movw	r24, r16
 bf4:	0d d0       	rcall	.+26     	; 0xc10 <malloc>
 bf6:	ec 01       	movw	r28, r24
 bf8:	00 97       	sbiw	r24, 0x00	; 0
 bfa:	21 f0       	breq	.+8      	; 0xc04 <calloc+0x28>
 bfc:	a8 01       	movw	r20, r16
 bfe:	60 e0       	ldi	r22, 0x00	; 0
 c00:	70 e0       	ldi	r23, 0x00	; 0
 c02:	2d d1       	rcall	.+602    	; 0xe5e <memset>
 c04:	ce 01       	movw	r24, r28
 c06:	df 91       	pop	r29
 c08:	cf 91       	pop	r28
 c0a:	1f 91       	pop	r17
 c0c:	0f 91       	pop	r16
 c0e:	08 95       	ret

00000c10 <malloc>:
 c10:	cf 93       	push	r28
 c12:	df 93       	push	r29
 c14:	82 30       	cpi	r24, 0x02	; 2
 c16:	91 05       	cpc	r25, r1
 c18:	10 f4       	brcc	.+4      	; 0xc1e <malloc+0xe>
 c1a:	82 e0       	ldi	r24, 0x02	; 2
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	e0 91 bd 02 	lds	r30, 0x02BD
 c22:	f0 91 be 02 	lds	r31, 0x02BE
 c26:	20 e0       	ldi	r18, 0x00	; 0
 c28:	30 e0       	ldi	r19, 0x00	; 0
 c2a:	a0 e0       	ldi	r26, 0x00	; 0
 c2c:	b0 e0       	ldi	r27, 0x00	; 0
 c2e:	30 97       	sbiw	r30, 0x00	; 0
 c30:	39 f1       	breq	.+78     	; 0xc80 <malloc+0x70>
 c32:	40 81       	ld	r20, Z
 c34:	51 81       	ldd	r21, Z+1	; 0x01
 c36:	48 17       	cp	r20, r24
 c38:	59 07       	cpc	r21, r25
 c3a:	b8 f0       	brcs	.+46     	; 0xc6a <malloc+0x5a>
 c3c:	48 17       	cp	r20, r24
 c3e:	59 07       	cpc	r21, r25
 c40:	71 f4       	brne	.+28     	; 0xc5e <malloc+0x4e>
 c42:	82 81       	ldd	r24, Z+2	; 0x02
 c44:	93 81       	ldd	r25, Z+3	; 0x03
 c46:	10 97       	sbiw	r26, 0x00	; 0
 c48:	29 f0       	breq	.+10     	; 0xc54 <malloc+0x44>
 c4a:	13 96       	adiw	r26, 0x03	; 3
 c4c:	9c 93       	st	X, r25
 c4e:	8e 93       	st	-X, r24
 c50:	12 97       	sbiw	r26, 0x02	; 2
 c52:	2c c0       	rjmp	.+88     	; 0xcac <malloc+0x9c>
 c54:	90 93 be 02 	sts	0x02BE, r25
 c58:	80 93 bd 02 	sts	0x02BD, r24
 c5c:	27 c0       	rjmp	.+78     	; 0xcac <malloc+0x9c>
 c5e:	21 15       	cp	r18, r1
 c60:	31 05       	cpc	r19, r1
 c62:	31 f0       	breq	.+12     	; 0xc70 <malloc+0x60>
 c64:	42 17       	cp	r20, r18
 c66:	53 07       	cpc	r21, r19
 c68:	18 f0       	brcs	.+6      	; 0xc70 <malloc+0x60>
 c6a:	a9 01       	movw	r20, r18
 c6c:	db 01       	movw	r26, r22
 c6e:	01 c0       	rjmp	.+2      	; 0xc72 <malloc+0x62>
 c70:	ef 01       	movw	r28, r30
 c72:	9a 01       	movw	r18, r20
 c74:	bd 01       	movw	r22, r26
 c76:	df 01       	movw	r26, r30
 c78:	02 80       	ldd	r0, Z+2	; 0x02
 c7a:	f3 81       	ldd	r31, Z+3	; 0x03
 c7c:	e0 2d       	mov	r30, r0
 c7e:	d7 cf       	rjmp	.-82     	; 0xc2e <malloc+0x1e>
 c80:	21 15       	cp	r18, r1
 c82:	31 05       	cpc	r19, r1
 c84:	f9 f0       	breq	.+62     	; 0xcc4 <malloc+0xb4>
 c86:	28 1b       	sub	r18, r24
 c88:	39 0b       	sbc	r19, r25
 c8a:	24 30       	cpi	r18, 0x04	; 4
 c8c:	31 05       	cpc	r19, r1
 c8e:	80 f4       	brcc	.+32     	; 0xcb0 <malloc+0xa0>
 c90:	8a 81       	ldd	r24, Y+2	; 0x02
 c92:	9b 81       	ldd	r25, Y+3	; 0x03
 c94:	61 15       	cp	r22, r1
 c96:	71 05       	cpc	r23, r1
 c98:	21 f0       	breq	.+8      	; 0xca2 <malloc+0x92>
 c9a:	fb 01       	movw	r30, r22
 c9c:	93 83       	std	Z+3, r25	; 0x03
 c9e:	82 83       	std	Z+2, r24	; 0x02
 ca0:	04 c0       	rjmp	.+8      	; 0xcaa <malloc+0x9a>
 ca2:	90 93 be 02 	sts	0x02BE, r25
 ca6:	80 93 bd 02 	sts	0x02BD, r24
 caa:	fe 01       	movw	r30, r28
 cac:	32 96       	adiw	r30, 0x02	; 2
 cae:	44 c0       	rjmp	.+136    	; 0xd38 <malloc+0x128>
 cb0:	fe 01       	movw	r30, r28
 cb2:	e2 0f       	add	r30, r18
 cb4:	f3 1f       	adc	r31, r19
 cb6:	81 93       	st	Z+, r24
 cb8:	91 93       	st	Z+, r25
 cba:	22 50       	subi	r18, 0x02	; 2
 cbc:	31 09       	sbc	r19, r1
 cbe:	39 83       	std	Y+1, r19	; 0x01
 cc0:	28 83       	st	Y, r18
 cc2:	3a c0       	rjmp	.+116    	; 0xd38 <malloc+0x128>
 cc4:	20 91 bb 02 	lds	r18, 0x02BB
 cc8:	30 91 bc 02 	lds	r19, 0x02BC
 ccc:	23 2b       	or	r18, r19
 cce:	41 f4       	brne	.+16     	; 0xce0 <malloc+0xd0>
 cd0:	20 91 02 02 	lds	r18, 0x0202
 cd4:	30 91 03 02 	lds	r19, 0x0203
 cd8:	30 93 bc 02 	sts	0x02BC, r19
 cdc:	20 93 bb 02 	sts	0x02BB, r18
 ce0:	20 91 00 02 	lds	r18, 0x0200
 ce4:	30 91 01 02 	lds	r19, 0x0201
 ce8:	21 15       	cp	r18, r1
 cea:	31 05       	cpc	r19, r1
 cec:	41 f4       	brne	.+16     	; 0xcfe <malloc+0xee>
 cee:	2d b7       	in	r18, 0x3d	; 61
 cf0:	3e b7       	in	r19, 0x3e	; 62
 cf2:	40 91 04 02 	lds	r20, 0x0204
 cf6:	50 91 05 02 	lds	r21, 0x0205
 cfa:	24 1b       	sub	r18, r20
 cfc:	35 0b       	sbc	r19, r21
 cfe:	e0 91 bb 02 	lds	r30, 0x02BB
 d02:	f0 91 bc 02 	lds	r31, 0x02BC
 d06:	e2 17       	cp	r30, r18
 d08:	f3 07       	cpc	r31, r19
 d0a:	a0 f4       	brcc	.+40     	; 0xd34 <malloc+0x124>
 d0c:	2e 1b       	sub	r18, r30
 d0e:	3f 0b       	sbc	r19, r31
 d10:	28 17       	cp	r18, r24
 d12:	39 07       	cpc	r19, r25
 d14:	78 f0       	brcs	.+30     	; 0xd34 <malloc+0x124>
 d16:	ac 01       	movw	r20, r24
 d18:	4e 5f       	subi	r20, 0xFE	; 254
 d1a:	5f 4f       	sbci	r21, 0xFF	; 255
 d1c:	24 17       	cp	r18, r20
 d1e:	35 07       	cpc	r19, r21
 d20:	48 f0       	brcs	.+18     	; 0xd34 <malloc+0x124>
 d22:	4e 0f       	add	r20, r30
 d24:	5f 1f       	adc	r21, r31
 d26:	50 93 bc 02 	sts	0x02BC, r21
 d2a:	40 93 bb 02 	sts	0x02BB, r20
 d2e:	81 93       	st	Z+, r24
 d30:	91 93       	st	Z+, r25
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <malloc+0x128>
 d34:	e0 e0       	ldi	r30, 0x00	; 0
 d36:	f0 e0       	ldi	r31, 0x00	; 0
 d38:	cf 01       	movw	r24, r30
 d3a:	df 91       	pop	r29
 d3c:	cf 91       	pop	r28
 d3e:	08 95       	ret

00000d40 <free>:
 d40:	cf 93       	push	r28
 d42:	df 93       	push	r29
 d44:	00 97       	sbiw	r24, 0x00	; 0
 d46:	09 f4       	brne	.+2      	; 0xd4a <free+0xa>
 d48:	87 c0       	rjmp	.+270    	; 0xe58 <free+0x118>
 d4a:	fc 01       	movw	r30, r24
 d4c:	32 97       	sbiw	r30, 0x02	; 2
 d4e:	13 82       	std	Z+3, r1	; 0x03
 d50:	12 82       	std	Z+2, r1	; 0x02
 d52:	c0 91 bd 02 	lds	r28, 0x02BD
 d56:	d0 91 be 02 	lds	r29, 0x02BE
 d5a:	20 97       	sbiw	r28, 0x00	; 0
 d5c:	81 f4       	brne	.+32     	; 0xd7e <free+0x3e>
 d5e:	20 81       	ld	r18, Z
 d60:	31 81       	ldd	r19, Z+1	; 0x01
 d62:	28 0f       	add	r18, r24
 d64:	39 1f       	adc	r19, r25
 d66:	80 91 bb 02 	lds	r24, 0x02BB
 d6a:	90 91 bc 02 	lds	r25, 0x02BC
 d6e:	82 17       	cp	r24, r18
 d70:	93 07       	cpc	r25, r19
 d72:	79 f5       	brne	.+94     	; 0xdd2 <free+0x92>
 d74:	f0 93 bc 02 	sts	0x02BC, r31
 d78:	e0 93 bb 02 	sts	0x02BB, r30
 d7c:	6d c0       	rjmp	.+218    	; 0xe58 <free+0x118>
 d7e:	de 01       	movw	r26, r28
 d80:	20 e0       	ldi	r18, 0x00	; 0
 d82:	30 e0       	ldi	r19, 0x00	; 0
 d84:	ae 17       	cp	r26, r30
 d86:	bf 07       	cpc	r27, r31
 d88:	50 f4       	brcc	.+20     	; 0xd9e <free+0x5e>
 d8a:	12 96       	adiw	r26, 0x02	; 2
 d8c:	4d 91       	ld	r20, X+
 d8e:	5c 91       	ld	r21, X
 d90:	13 97       	sbiw	r26, 0x03	; 3
 d92:	9d 01       	movw	r18, r26
 d94:	41 15       	cp	r20, r1
 d96:	51 05       	cpc	r21, r1
 d98:	09 f1       	breq	.+66     	; 0xddc <free+0x9c>
 d9a:	da 01       	movw	r26, r20
 d9c:	f3 cf       	rjmp	.-26     	; 0xd84 <free+0x44>
 d9e:	b3 83       	std	Z+3, r27	; 0x03
 da0:	a2 83       	std	Z+2, r26	; 0x02
 da2:	40 81       	ld	r20, Z
 da4:	51 81       	ldd	r21, Z+1	; 0x01
 da6:	84 0f       	add	r24, r20
 da8:	95 1f       	adc	r25, r21
 daa:	8a 17       	cp	r24, r26
 dac:	9b 07       	cpc	r25, r27
 dae:	71 f4       	brne	.+28     	; 0xdcc <free+0x8c>
 db0:	8d 91       	ld	r24, X+
 db2:	9c 91       	ld	r25, X
 db4:	11 97       	sbiw	r26, 0x01	; 1
 db6:	84 0f       	add	r24, r20
 db8:	95 1f       	adc	r25, r21
 dba:	02 96       	adiw	r24, 0x02	; 2
 dbc:	91 83       	std	Z+1, r25	; 0x01
 dbe:	80 83       	st	Z, r24
 dc0:	12 96       	adiw	r26, 0x02	; 2
 dc2:	8d 91       	ld	r24, X+
 dc4:	9c 91       	ld	r25, X
 dc6:	13 97       	sbiw	r26, 0x03	; 3
 dc8:	93 83       	std	Z+3, r25	; 0x03
 dca:	82 83       	std	Z+2, r24	; 0x02
 dcc:	21 15       	cp	r18, r1
 dce:	31 05       	cpc	r19, r1
 dd0:	29 f4       	brne	.+10     	; 0xddc <free+0x9c>
 dd2:	f0 93 be 02 	sts	0x02BE, r31
 dd6:	e0 93 bd 02 	sts	0x02BD, r30
 dda:	3e c0       	rjmp	.+124    	; 0xe58 <free+0x118>
 ddc:	d9 01       	movw	r26, r18
 dde:	13 96       	adiw	r26, 0x03	; 3
 de0:	fc 93       	st	X, r31
 de2:	ee 93       	st	-X, r30
 de4:	12 97       	sbiw	r26, 0x02	; 2
 de6:	4d 91       	ld	r20, X+
 de8:	5d 91       	ld	r21, X+
 dea:	a4 0f       	add	r26, r20
 dec:	b5 1f       	adc	r27, r21
 dee:	ea 17       	cp	r30, r26
 df0:	fb 07       	cpc	r31, r27
 df2:	79 f4       	brne	.+30     	; 0xe12 <free+0xd2>
 df4:	80 81       	ld	r24, Z
 df6:	91 81       	ldd	r25, Z+1	; 0x01
 df8:	84 0f       	add	r24, r20
 dfa:	95 1f       	adc	r25, r21
 dfc:	02 96       	adiw	r24, 0x02	; 2
 dfe:	d9 01       	movw	r26, r18
 e00:	11 96       	adiw	r26, 0x01	; 1
 e02:	9c 93       	st	X, r25
 e04:	8e 93       	st	-X, r24
 e06:	82 81       	ldd	r24, Z+2	; 0x02
 e08:	93 81       	ldd	r25, Z+3	; 0x03
 e0a:	13 96       	adiw	r26, 0x03	; 3
 e0c:	9c 93       	st	X, r25
 e0e:	8e 93       	st	-X, r24
 e10:	12 97       	sbiw	r26, 0x02	; 2
 e12:	e0 e0       	ldi	r30, 0x00	; 0
 e14:	f0 e0       	ldi	r31, 0x00	; 0
 e16:	8a 81       	ldd	r24, Y+2	; 0x02
 e18:	9b 81       	ldd	r25, Y+3	; 0x03
 e1a:	00 97       	sbiw	r24, 0x00	; 0
 e1c:	19 f0       	breq	.+6      	; 0xe24 <free+0xe4>
 e1e:	fe 01       	movw	r30, r28
 e20:	ec 01       	movw	r28, r24
 e22:	f9 cf       	rjmp	.-14     	; 0xe16 <free+0xd6>
 e24:	ce 01       	movw	r24, r28
 e26:	02 96       	adiw	r24, 0x02	; 2
 e28:	28 81       	ld	r18, Y
 e2a:	39 81       	ldd	r19, Y+1	; 0x01
 e2c:	82 0f       	add	r24, r18
 e2e:	93 1f       	adc	r25, r19
 e30:	20 91 bb 02 	lds	r18, 0x02BB
 e34:	30 91 bc 02 	lds	r19, 0x02BC
 e38:	28 17       	cp	r18, r24
 e3a:	39 07       	cpc	r19, r25
 e3c:	69 f4       	brne	.+26     	; 0xe58 <free+0x118>
 e3e:	30 97       	sbiw	r30, 0x00	; 0
 e40:	29 f4       	brne	.+10     	; 0xe4c <free+0x10c>
 e42:	10 92 be 02 	sts	0x02BE, r1
 e46:	10 92 bd 02 	sts	0x02BD, r1
 e4a:	02 c0       	rjmp	.+4      	; 0xe50 <free+0x110>
 e4c:	13 82       	std	Z+3, r1	; 0x03
 e4e:	12 82       	std	Z+2, r1	; 0x02
 e50:	d0 93 bc 02 	sts	0x02BC, r29
 e54:	c0 93 bb 02 	sts	0x02BB, r28
 e58:	df 91       	pop	r29
 e5a:	cf 91       	pop	r28
 e5c:	08 95       	ret

00000e5e <memset>:
 e5e:	dc 01       	movw	r26, r24
 e60:	01 c0       	rjmp	.+2      	; 0xe64 <memset+0x6>
 e62:	6d 93       	st	X+, r22
 e64:	41 50       	subi	r20, 0x01	; 1
 e66:	50 40       	sbci	r21, 0x00	; 0
 e68:	e0 f7       	brcc	.-8      	; 0xe62 <memset+0x4>
 e6a:	08 95       	ret

00000e6c <_exit>:
 e6c:	f8 94       	cli

00000e6e <__stop_program>:
 e6e:	ff cf       	rjmp	.-2      	; 0xe6e <__stop_program>
